domain WellFoundedOrder[T]  {
  
  function bounded(v: T): Bool 
  
  function decreasing(v1: T, v2: T): Bool 
}

domain IntOrder  {
  
  axiom {
    (forall i: Int ::0 <= i == (bounded(i): Bool))
  }
  
  axiom {
    (forall i: Int ::(forall j: Int ::i < j == (decreasing(i, j): Bool)))
  }
}

domain Void  {
  
  function unit(): Void 
  
  axiom {
    (forall v: Void ::true ==> unit() == v)
  }
}

domain $domain$unknown1  {
  
  function unknown1(unknown123: Perm, unknown124: Perm): Perm interpretation "^"
}

domain $domain$to_int  {
  
  function to_int(to_int1: Perm): Int interpretation "to_int"
}

domain $domain$unknown18  {
  
  function unknown18(unknown125: Perm): Bool interpretation "is_int"
}

domain Block  {
  
  function block_length(b: Block): Int 
  
  function loc(b: Block, i: Int): Ref 
  
  function loc_inv_1(r: Ref): Block 
  
  function loc_inv_2(r: Ref): Int 
  
  axiom {
    (forall b: Block ::block_length(b) >= 0)
  }
  
  axiom {
    (forall b: Block, i: Int ::
      { loc(b, i) }
      loc_inv_1(loc(b, i)) == b && loc_inv_2(loc(b, i)) == i)
  }
}

domain Pointer  {
  
  function pointer_of(b: Block, offset: Int): Pointer 
  
  function pointer_block(p: Pointer): Block 
  
  function pointer_offset(p: Pointer): Int 
  
  axiom {
    (forall p: Pointer ::pointer_offset(p) >= 0 &&
      pointer_offset(p) < block_length(pointer_block(p)))
  }
  
  axiom {
    (forall b: Block, offset: Int ::
      { pointer_block(pointer_of(b, offset)), pointer_offset(pointer_of(b, offset)) }
      pointer_block(pointer_of(b, offset)) == b &&
      pointer_offset(pointer_of(b, offset)) == offset)
  }
}

domain Any  {
  
  
}

domain Option[T1]  {
  
  function none1(): Option[T1] 
  
  function some(x: T1): Option[T1] 
  
  function option_get(opt: Option[T1]): T1 
  
  axiom {
    (forall x: T1 ::
      { (some(x): Option[T1]) }
      (none1(): Option[T1]) != (some(x): Option[T1]))
  }
  
  axiom {
    (forall x: T1 ::
      { (some(x): Option[T1]) }
      (option_get((some(x): Option[T1])): T1) == x)
  }
  
  axiom {
    (forall opt: Option[T1] ::
      { (some((option_get(opt): T1)): Option[T1]) }
      (some((option_get(opt): T1)): Option[T1]) == opt)
  }
}

domain Nothing  {
  
  
}

field int: Int

field dim2: Option[Pointer]

field dimensions: Int

field dim1: Option[Pointer]

field dimensions1: Int

field flags: Int

field min: Int

field host2: Option[Pointer]

field host: Option[Pointer]

field ref: Ref

field dimensions2: Int

field extent: Int

field dim: Option[Pointer]

field host1: Option[Pointer]

field rat: Perm

field stride: Int

function mPi(): Perm
  decreases 
{
  314159265358979323846 * write / 100000000000000000000
}

function unknown2(x: Perm): Perm
  requires 0 * write / 1 <= x
  decreases 
  ensures result == unknown1(x, 5 * write / 10)


function unknown3(x: Perm): Perm
  decreases 
  ensures -1 * write / 1 <= result
  ensures result <= 1 * write / 1


function nondetfloat(): Perm
  decreases 


function unknown4(x: Perm): Perm
  requires -1 * write / 1 <= x
  requires x <= 1 * write / 1
  decreases 
  ensures (2 * write / 1 != 0 * write / 1 ?
      -mPi() * write / (2 * write / 1) :
      nondetfloat()) <=
    result
  ensures result <=
    (2 * write / 1 != 0 * write / 1 ?
      mPi() / (2 * write / 1) :
      nondetfloat())


function unknown5(x: Perm): Perm
  decreases 
  ensures -1 * write / 1 <= result
  ensures result <= 1 * write / 1


function unknown6(x: Perm): Perm
  requires -1 * write / 1 <= x
  requires x <= 1 * write / 1
  decreases 
  ensures 0 * write / 1 <= result
  ensures result <= mPi()


function unknown7(x: Perm): Perm
  decreases 
  ensures x == 0 * write / 1 ==> result == 0 * write / 1


function unknown8(x: Perm): Perm
  decreases 
  ensures (2 * write / 1 != 0 * write / 1 ?
      -mPi() * write / (2 * write / 1) :
      nondetfloat()) <=
    result
  ensures result <=
    (2 * write / 1 != 0 * write / 1 ?
      mPi() / (2 * write / 1) :
      nondetfloat())


function unknown9(x: Perm, y: Perm): Perm
  decreases 
  ensures -mPi() * write <= result
  ensures result <= mPi()


function unknown10(x: Perm): Perm
  decreases 
  ensures result == (unknown14(x) - unknown14(-x * write)) / 2


function unknown11(x: Perm): Perm
  decreases 
  ensures result == (unknown14(x) + unknown14(-x * write)) / 2


function unknown12(x: Perm): Perm
  decreases 
  ensures result ==
    (unknown14(x) - unknown14(-x * write)) /
    (unknown14(x) + unknown14(-x * write))


function unknown13(x: Perm, y: Perm): Perm
  decreases 
  ensures result == unknown16(x * x + y * y, 5 * write / 10)


function unknown14(x: Perm): Perm
  decreases 
  ensures result == unknown16(27182818284 * write / 10000000000, x)


function unknown15(x: Perm): Perm
  decreases 


function unknown16(x: Perm, y: Perm): Perm
  decreases 
  ensures result == unknown1(x, y)
  ensures 0 * write / 1 < x ==> 0 * write / 1 < result


function unknown17(x: Perm): Perm
  decreases 
  ensures result == to_int(x) * write / 1


function unknown19(x: Perm): Perm
  decreases 
  ensures result == (unknown18(x) ? x : (to_int(x) + 1) * write / 1)


function unknown20(x: Perm): Perm
  decreases 
  ensures !(x < 0 * write / 1 && unknown18(x - 5 * write / 10)) ==>
    result == to_int(x + 5 * write / 10) * write / 1
  ensures x < 0 * write / 1 && unknown18(x - 5 * write / 10) ==>
    result == x - 5 * write / 10


function unknown21(x: Perm): Perm
  requires 0 * write / 1 <= x
  decreases 
  ensures result == unknown35(x, 5 * write / 10)


function unknown22(x: Perm): Perm
  decreases 
  ensures -1 * write / 1 <= result
  ensures result <= 1 * write / 1


function unknown23(x: Perm): Perm
  requires -1 * write / 1 <= x
  requires x <= 1 * write / 1
  decreases 
  ensures (2 * write / 1 != 0 * write / 1 ?
      -mPi() * write / (2 * write / 1) :
      nondetfloat()) <=
    result
  ensures result <=
    (2 * write / 1 != 0 * write / 1 ?
      mPi() / (2 * write / 1) :
      nondetfloat())


function unknown24(x: Perm): Perm
  decreases 
  ensures -1 * write / 1 <= result
  ensures result <= 1 * write / 1


function unknown25(x: Perm): Perm
  requires -1 * write / 1 <= x
  requires x <= 1 * write / 1
  decreases 
  ensures 0 * write / 1 <= result
  ensures result <= mPi()


function unknown26(x: Perm): Perm
  decreases 
  ensures x == 0 * write / 1 ==> result == 0 * write / 1


function unknown27(x: Perm): Perm
  decreases 
  ensures (2 * write / 1 != 0 * write / 1 ?
      -mPi() * write / (2 * write / 1) :
      nondetfloat()) <=
    result
  ensures result <=
    (2 * write / 1 != 0 * write / 1 ?
      mPi() / (2 * write / 1) :
      nondetfloat())


function unknown28(x: Perm, y: Perm): Perm
  decreases 
  ensures -mPi() * write <= result
  ensures result <= mPi()


function unknown29(x: Perm): Perm
  decreases 


function unknown30(x: Perm): Perm
  decreases 
  ensures result == (unknown33(x) + unknown33(-x * write)) / 2


function unknown31(x: Perm): Perm
  decreases 
  ensures result ==
    (unknown33(x) - unknown33(-x * write)) /
    (unknown33(x) + unknown33(-x * write))


function unknown32(x: Perm, y: Perm): Perm
  decreases 
  ensures result == unknown35(x * x + y * y, 5 * write / 10)


function unknown33(x: Perm): Perm
  decreases 
  ensures result == unknown35(27182818284 * write / 10000000000, x)


function unknown34(x: Perm): Perm
  decreases 


function unknown35(x: Perm, y: Perm): Perm
  decreases 
  ensures result == unknown1(x, y)
  ensures 0 * write / 1 < x ==> 0 * write / 1 < result


function unknown36(x: Perm): Perm
  decreases 
  ensures result == to_int(x) * write / 1


function unknown37(x: Perm): Perm
  decreases 
  ensures result == (unknown18(x) ? x : (to_int(x) + 1) * write / 1)


function unknown38(x: Perm): Perm
  decreases 
  ensures !(x < 0 * write / 1 && unknown18(x - 5 * write / 10)) ==>
    result == to_int(x + 5 * write / 10) * write / 1
  ensures x < 0 * write / 1 && unknown18(x - 5 * write / 10) ==>
    result == x - 5 * write / 10


function ptrDeref(p: Pointer): Ref
  decreases 
{
  loc(pointer_block(p), pointer_offset(p))
}

function ptrAdd(p: Pointer, offset: Int): Pointer
  requires 0 <= pointer_offset(p) + offset
  requires pointer_offset(p) + offset < block_length(pointer_block(p))
  decreases 
{
  pointer_of(pointer_block(p), pointer_offset(p) + offset)
}

function anyAs(t: Any): Any
  decreases 


function asAny(t: Any): Any
  decreases 
  ensures anyAs(result) == t


function optGet(opt: Option[Any]): Any
  requires opt != (none1(): Option[Any])
  decreases 
  ensures (some(result): Option[Any]) == opt
{
  (option_get(opt): Any)
}

function optOrElse(opt: Option[Any], alt: Any): Any
  decreases 
  ensures opt == (none1(): Option[Any]) ==> result == alt
  ensures opt != (none1(): Option[Any]) ==> result == optGet(opt)
{
  (opt == (none1(): Option[Any]) ? alt : optGet(opt))
}

function max(x: Int, y: Int): Int
{
  (y < x ? x : y)
}

function min1(x: Int, y: Int): Int
{
  (y < x ? y : x)
}

function max1(x: Perm, y: Perm): Perm
{
  (y < x ? x : y)
}

function min2(x: Perm, y: Perm): Perm
{
  (y < x ? y : x)
}

function abs(x: Int): Int
{
  (0 <= x ? x : -x)
}

function abs1(x: Perm): Perm
{
  (0 * write / 1 <= x ? x : -x * write)
}

function hdiv(x: Int, y: Int): Int
{
  (y == 0 ? 0 : x / y)
}

function hmod(x: Int, y: Int): Int
{
  (y == 0 ? 0 : x % y)
}

function truncdiv(a: Int, b: Int): Int
  requires b != 0
  decreases 
{
  (let i ==
    (a / b) in
    (let i1 ==
      (a % b) in
      (0 <= a || i1 == 0 ? i : i + (0 < b ? 1 : -1))))
}

function truncmod(a: Int, b: Int): Int
  requires b != 0
  decreases 
{
  (let i ==
    (a % b) in
    (0 <= a || i == 0 ? i : i - (0 < b ? b : -b)))
}

function lemmaNonlinear(a: Int, b: Int, maxA: Int): Bool
  requires 0 <= a
  requires 0 < b
  requires a < maxA
  decreases b
  ensures a * b <= (maxA - 1) * b
  ensures result


function lemma2dAccess(a: Int, minA: Int, strideA: Int, extentA: Int, b: Int,
  minB: Int, strideB: Int, extentB: Int): Bool
  requires minA <= a
  requires a - minA < extentA
  requires minB <= b
  requires b - minB < extentB
  requires 0 < strideA
  requires extentA * strideA <= strideB
  decreases 
  ensures 0 <= (b - minB) * strideB
  ensures 0 <= (a - minA) * strideA + (b - minB) * strideB
  ensures (a - minA) * strideA + (b - minB) * strideB < strideB * extentB
  ensures result


function lemma3dAccess(a: Int, minA: Int, strideA: Int, extentA: Int, b: Int,
  minB: Int, strideB: Int, extentB: Int, c: Int, minC: Int, strideC: Int, extentC: Int): Bool
  requires minA <= a
  requires a - minA < extentA
  requires minB <= b
  requires b - minB < extentB
  requires minC <= c
  requires c - minC < extentC
  requires 0 < strideA
  requires extentA * strideA <= strideB
  requires extentB * strideB <= strideC
  decreases 
  ensures 0 <=
    (a - minA) * strideA + (b - minB) * strideB + (c - minC) * strideC
  ensures (a - minA) * strideA + (b - minB) * strideB +
    (c - minC) * strideC <
    strideC * extentC
  ensures result


function lemma4dAccess(a: Int, minA: Int, strideA: Int, extentA: Int, b: Int,
  minB: Int, strideB: Int, extentB: Int, c: Int, minC: Int, strideC: Int, extentC: Int,
  d: Int, minD: Int, strideD: Int, extentD: Int): Bool
  requires minA <= a
  requires a - minA < extentA
  requires minB <= b
  requires b - minB < extentB
  requires minC <= c
  requires c - minC < extentC
  requires minD <= d
  requires d - minD < extentD
  requires 0 < strideA
  requires extentA * strideA <= strideB
  requires extentB * strideB <= strideC
  requires extentC * strideC <= strideD
  decreases 
  ensures 0 <=
    (a - minA) * strideA + (b - minB) * strideB + (c - minC) * strideC +
    (d - minD) * strideD
  ensures (a - minA) * strideA + (b - minB) * strideB +
    (c - minC) * strideC +
    (d - minD) * strideD <
    strideD * extentD
  ensures result


function lemma5dAccess(a: Int, minA: Int, strideA: Int, extentA: Int, b: Int,
  minB: Int, strideB: Int, extentB: Int, c: Int, minC: Int, strideC: Int, extentC: Int,
  d: Int, minD: Int, strideD: Int, extentD: Int, e: Int, minE: Int, strideE: Int,
  extentE: Int): Bool
  requires minA <= a
  requires a - minA < extentA
  requires minB <= b
  requires b - minB < extentB
  requires minC <= c
  requires c - minC < extentC
  requires minD <= d
  requires d - minD < extentD
  requires minE <= e
  requires e - minE < extentE
  requires 0 < strideA
  requires extentA * strideA <= strideB
  requires extentB * strideB <= strideC
  requires extentC * strideC <= strideD
  requires extentD * strideD <= strideE
  decreases 
  ensures 0 <=
    (a - minA) * strideA + (b - minB) * strideB + (c - minC) * strideC +
    (d - minD) * strideD +
    (e - minE) * strideE
  ensures (a - minA) * strideA + (b - minB) * strideB +
    (c - minC) * strideC +
    (d - minD) * strideD +
    (e - minE) * strideE <
    strideE * extentE
  ensures result


function split(xi: Int, xo: Int, xmin: Int, factor: Int): Int
{
  xo * factor + xi + xmin
}

function nothingAs(value: Nothing): Any
  decreases 


function nothingAs1(value: Nothing): Pointer
  decreases 


function optGet1(opt: Option[Nothing]): Nothing
  requires opt != (none1(): Option[Nothing])
  decreases 
  ensures (some(result): Option[Nothing]) == opt
{
  (option_get(opt): Nothing)
}

function optGet2(opt: Option[Pointer]): Pointer
  requires opt != (none1(): Option[Pointer])
  decreases 
  ensures (some(result): Option[Pointer]) == opt
{
  (option_get(opt): Pointer)
}

function pureSol(x: Int): Perm


function pureSolutionMap(x: Int): Int


function pureAnt1(x: Int): Int


function pureAnt2(x: Int): Int


function pureModel(x: Int): Perm


function pureVResIn(x: Int): Perm


function pureVResOut(x: Int): Perm


function scale(amount: Perm): Perm
  requires amount >= 0 * write
  decreases 
  ensures result >= 0 * write
{
  amount
}

function type(type1: Ref): Int
  decreases 
  ensures result >= 0
  ensures result <= 4
  ensures type1 == null ==> result == 0
  ensures type1 != null ==> result != 0


function subtype(subtype1: Int, subtype2: Int): Bool
  requires subtype1 >= 0
  requires subtype1 <= 4
  requires subtype2 >= 0
  requires subtype2 <= 4
  decreases 
{
  (subtype1 == 0 ==> true) &&
  ((subtype1 == 3 ==> subtype2 == 3) && (subtype1 == 2 ==> subtype2 == 2) &&
  (subtype1 == 4 ==> subtype2 == 4) &&
  (subtype1 == 1 ==> subtype2 == 1))
}

predicate ant1ImPred(data: Option[Pointer], _0: Int, _0Min: Int, _0Extent: Int) {
  _0Min <= _0 && _0 < _0Min + _0Extent &&
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data))) -
  pointer_offset(optGet2(data)) ==
  _0Extent &&
  (let idx ==
    (_0 - _0Min) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), idx)): Option[Pointer]))).int, write))
}

predicate int32Pred(data: Option[Pointer]) {
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  (forall i: Int ::
    { ptrDeref(ptrAdd(optGet2(data), i)).int }
    0 <= i &&
    i <
    block_length(pointer_block(optGet2(data))) -
    pointer_offset(optGet2(data)) ==>
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), i)): Option[Pointer]))).int, write))
}

predicate ant2ImPred(data: Option[Pointer], _0: Int, _0Min: Int, _0Extent: Int) {
  _0Min <= _0 && _0 < _0Min + _0Extent &&
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data))) -
  pointer_offset(optGet2(data)) ==
  _0Extent &&
  (let idx ==
    (_0 - _0Min) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), idx)): Option[Pointer]))).int, write))
}

predicate antenna1Pred(data: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data))) -
  pointer_offset(optGet2(data)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), idx)): Option[Pointer]))).int, write))
}

predicate antenna2Pred(data: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data))) -
  pointer_offset(optGet2(data)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), idx)): Option[Pointer]))).int, write))
}

predicate model0Pred(data0: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data0 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data0))) -
  pointer_offset(optGet2(data0)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data0), idx)): Option[Pointer]))).rat, write))
}

predicate model1Pred(data1: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data1 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data1))) -
  pointer_offset(optGet2(data1)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data1), idx)): Option[Pointer]))).rat, write))
}

predicate model2Pred(data2: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data2 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data2))) -
  pointer_offset(optGet2(data2)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data2), idx)): Option[Pointer]))).rat, write))
}

predicate model3Pred(data3: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data3 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data3))) -
  pointer_offset(optGet2(data3)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data3), idx)): Option[Pointer]))).rat, write))
}

predicate model4Pred(data4: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data4 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data4))) -
  pointer_offset(optGet2(data4)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data4), idx)): Option[Pointer]))).rat, write))
}

predicate model5Pred(data5: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data5 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data5))) -
  pointer_offset(optGet2(data5)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data5), idx)): Option[Pointer]))).rat, write))
}

predicate model6Pred(data6: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data6 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data6))) -
  pointer_offset(optGet2(data6)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data6), idx)): Option[Pointer]))).rat, write))
}

predicate model7Pred(data7: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data7 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data7))) -
  pointer_offset(optGet2(data7)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data7), idx)): Option[Pointer]))).rat, write))
}

predicate float32Pred(data: Option[Pointer]) {
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  (forall i: Int ::
    { ptrDeref(ptrAdd(optGet2(data), i)).rat }
    0 <= i &&
    i <
    block_length(pointer_block(optGet2(data))) -
    pointer_offset(optGet2(data)) ==>
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), i)): Option[Pointer]))).rat, write))
}

predicate modelImPred(data: Option[Pointer], _0: Int, _0Min: Int, _0Extent: Int,
  _1: Int, _1Min: Int, _1Extent: Int, _2: Int, _2Min: Int, _2Extent: Int, _3: Int,
  _3Min: Int, _3Extent: Int) {
  _0Min <= _0 && _0 < _0Min + _0Extent && _1Min <= _1 &&
  _1 < _1Min + _1Extent &&
  _2Min <= _2 &&
  _2 < _2Min + _2Extent &&
  _3Min <= _3 &&
  _3 < _3Min + _3Extent &&
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data))) -
  pointer_offset(optGet2(data)) ==
  _0Extent * _1Extent * _2Extent * _3Extent &&
  lemma4dAccess(_0, _0Min, 1, _0Extent, _1, _1Min, _0Extent, _1Extent, _2, _2Min,
  _0Extent * _1Extent, _2Extent, _3, _3Min, _0Extent * _1Extent * _2Extent,
  _3Extent) &&
  (let idx ==
    (_0 - _0Min + (_1 - _1Min) * _0Extent +
    (_2 - _2Min) * _0Extent * _1Extent +
    (_3 - _3Min) * _0Extent * _1Extent * _2Extent) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), idx)): Option[Pointer]))).rat, write))
}

predicate sol0Pred(data0: Option[Pointer], i: Int, iMin: Int, iExtent: Int,
  si: Int, siMin: Int, siExtent: Int, a: Int, aMin: Int, aExtent: Int) {
  iMin <= i && i < iMin + iExtent && siMin <= si && si < siMin + siExtent &&
  aMin <= a &&
  a < aMin + aExtent &&
  data0 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data0))) -
  pointer_offset(optGet2(data0)) ==
  iExtent * siExtent * aExtent &&
  lemma3dAccess(i, iMin, 1, iExtent, si, siMin, iExtent, siExtent, a, aMin,
  iExtent * siExtent, aExtent) &&
  (let idx ==
    (i - iMin + (si - siMin) * iExtent + (a - aMin) * iExtent * siExtent) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data0), idx)): Option[Pointer]))).rat, write))
}

predicate sol1Pred(data1: Option[Pointer], i: Int, iMin: Int, iExtent: Int,
  si: Int, siMin: Int, siExtent: Int, a: Int, aMin: Int, aExtent: Int) {
  iMin <= i && i < iMin + iExtent && siMin <= si && si < siMin + siExtent &&
  aMin <= a &&
  a < aMin + aExtent &&
  data1 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data1))) -
  pointer_offset(optGet2(data1)) ==
  iExtent * siExtent * aExtent &&
  lemma3dAccess(i, iMin, 1, iExtent, si, siMin, iExtent, siExtent, a, aMin,
  iExtent * siExtent, aExtent) &&
  (let idx ==
    (i - iMin + (si - siMin) * iExtent + (a - aMin) * iExtent * siExtent) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data1), idx)): Option[Pointer]))).rat, write))
}

predicate solImPred(data: Option[Pointer], _0: Int, _0Min: Int, _0Extent: Int,
  _1: Int, _1Min: Int, _1Extent: Int, _2: Int, _2Min: Int, _2Extent: Int, _3: Int,
  _3Min: Int, _3Extent: Int) {
  _0Min <= _0 && _0 < _0Min + _0Extent && _1Min <= _1 &&
  _1 < _1Min + _1Extent &&
  _2Min <= _2 &&
  _2 < _2Min + _2Extent &&
  _3Min <= _3 &&
  _3 < _3Min + _3Extent &&
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data))) -
  pointer_offset(optGet2(data)) ==
  _0Extent * _1Extent * _2Extent * _3Extent &&
  lemma4dAccess(_0, _0Min, 1, _0Extent, _1, _1Min, _0Extent, _1Extent, _2, _2Min,
  _0Extent * _1Extent, _2Extent, _3, _3Min, _0Extent * _1Extent * _2Extent,
  _3Extent) &&
  (let idx ==
    (_0 - _0Min + (_1 - _1Min) * _0Extent +
    (_2 - _2Min) * _0Extent * _1Extent +
    (_3 - _3Min) * _0Extent * _1Extent * _2Extent) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), idx)): Option[Pointer]))).rat, write))
}

predicate float64Pred(data: Option[Pointer]) {
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  (forall i: Int ::
    { ptrDeref(ptrAdd(optGet2(data), i)).rat }
    0 <= i &&
    i <
    block_length(pointer_block(optGet2(data))) -
    pointer_offset(optGet2(data)) ==>
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), i)): Option[Pointer]))).rat, write))
}

predicate solutionIndexPred(data: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data))) -
  pointer_offset(optGet2(data)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), idx)): Option[Pointer]))).int, write))
}

predicate solutionMapImPred(data: Option[Pointer], _0: Int, _0Min: Int, _0Extent: Int) {
  _0Min <= _0 && _0 < _0Min + _0Extent &&
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data))) -
  pointer_offset(optGet2(data)) ==
  _0Extent &&
  (let idx ==
    (_0 - _0Min) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), idx)): Option[Pointer]))).int, write))
}

predicate solutions0Pred(data0: Option[Pointer], si: Int, siMin: Int, siExtent: Int,
  a: Int, aMin: Int, aExtent: Int) {
  siMin <= si && si < siMin + siExtent && aMin <= a && a < aMin + aExtent &&
  data0 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data0))) -
  pointer_offset(optGet2(data0)) ==
  siExtent * aExtent &&
  lemma2dAccess(si, siMin, 1, siExtent, a, aMin, siExtent, aExtent) &&
  (let idx ==
    (si - siMin + (a - aMin) * siExtent) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data0), idx)): Option[Pointer]))).rat, write))
}

predicate solutions1Pred(data1: Option[Pointer], si: Int, siMin: Int, siExtent: Int,
  a: Int, aMin: Int, aExtent: Int) {
  siMin <= si && si < siMin + siExtent && aMin <= a && a < aMin + aExtent &&
  data1 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data1))) -
  pointer_offset(optGet2(data1)) ==
  siExtent * aExtent &&
  lemma2dAccess(si, siMin, 1, siExtent, a, aMin, siExtent, aExtent) &&
  (let idx ==
    (si - siMin + (a - aMin) * siExtent) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data1), idx)): Option[Pointer]))).rat, write))
}

predicate solutions2Pred(data2: Option[Pointer], si: Int, siMin: Int, siExtent: Int,
  a: Int, aMin: Int, aExtent: Int) {
  siMin <= si && si < siMin + siExtent && aMin <= a && a < aMin + aExtent &&
  data2 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data2))) -
  pointer_offset(optGet2(data2)) ==
  siExtent * aExtent &&
  lemma2dAccess(si, siMin, 1, siExtent, a, aMin, siExtent, aExtent) &&
  (let idx ==
    (si - siMin + (a - aMin) * siExtent) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data2), idx)): Option[Pointer]))).rat, write))
}

predicate solutions3Pred(data3: Option[Pointer], si: Int, siMin: Int, siExtent: Int,
  a: Int, aMin: Int, aExtent: Int) {
  siMin <= si && si < siMin + siExtent && aMin <= a && a < aMin + aExtent &&
  data3 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data3))) -
  pointer_offset(optGet2(data3)) ==
  siExtent * aExtent &&
  lemma2dAccess(si, siMin, 1, siExtent, a, aMin, siExtent, aExtent) &&
  (let idx ==
    (si - siMin + (a - aMin) * siExtent) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data3), idx)): Option[Pointer]))).rat, write))
}

predicate vRes00Pred(data0: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data0 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data0))) -
  pointer_offset(optGet2(data0)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data0), idx)): Option[Pointer]))).rat, write))
}

predicate vRes01Pred(data1: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data1 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data1))) -
  pointer_offset(optGet2(data1)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data1), idx)): Option[Pointer]))).rat, write))
}

predicate vRes02Pred(data2: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data2 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data2))) -
  pointer_offset(optGet2(data2)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data2), idx)): Option[Pointer]))).rat, write))
}

predicate vRes03Pred(data3: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data3 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data3))) -
  pointer_offset(optGet2(data3)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data3), idx)): Option[Pointer]))).rat, write))
}

predicate vRes04Pred(data4: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data4 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data4))) -
  pointer_offset(optGet2(data4)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data4), idx)): Option[Pointer]))).rat, write))
}

predicate vRes05Pred(data5: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data5 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data5))) -
  pointer_offset(optGet2(data5)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data5), idx)): Option[Pointer]))).rat, write))
}

predicate vRes06Pred(data6: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data6 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data6))) -
  pointer_offset(optGet2(data6)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data6), idx)): Option[Pointer]))).rat, write))
}

predicate vRes07Pred(data7: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data7 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data7))) -
  pointer_offset(optGet2(data7)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data7), idx)): Option[Pointer]))).rat, write))
}

predicate vResInImPred(data: Option[Pointer], _0: Int, _0Min: Int, _0Extent: Int,
  _1: Int, _1Min: Int, _1Extent: Int, _2: Int, _2Min: Int, _2Extent: Int, _3: Int,
  _3Min: Int, _3Extent: Int) {
  _0Min <= _0 && _0 < _0Min + _0Extent && _1Min <= _1 &&
  _1 < _1Min + _1Extent &&
  _2Min <= _2 &&
  _2 < _2Min + _2Extent &&
  _3Min <= _3 &&
  _3 < _3Min + _3Extent &&
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data))) -
  pointer_offset(optGet2(data)) ==
  _0Extent * _1Extent * _2Extent * _3Extent &&
  lemma4dAccess(_0, _0Min, 1, _0Extent, _1, _1Min, _0Extent, _1Extent, _2, _2Min,
  _0Extent * _1Extent, _2Extent, _3, _3Min, _0Extent * _1Extent * _2Extent,
  _3Extent) &&
  (let idx ==
    (_0 - _0Min + (_1 - _1Min) * _0Extent +
    (_2 - _2Min) * _0Extent * _1Extent +
    (_3 - _3Min) * _0Extent * _1Extent * _2Extent) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), idx)): Option[Pointer]))).rat, write))
}

predicate vResOutPred(data: Option[Pointer], c: Int, cMin: Int, cExtent: Int,
  i: Int, iMin: Int, iExtent: Int, j: Int, jMin: Int, jExtent: Int, v: Int,
  vMin: Int, vExtent: Int) {
  cMin <= c && c < cMin + cExtent && iMin <= i && i < iMin + iExtent &&
  jMin <= j &&
  j < jMin + jExtent &&
  vMin <= v &&
  v < vMin + vExtent &&
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data))) -
  pointer_offset(optGet2(data)) ==
  cExtent * iExtent * jExtent * vExtent &&
  lemma4dAccess(c, cMin, 1, cExtent, i, iMin, cExtent, iExtent, j, jMin, cExtent *
  iExtent, jExtent, v, vMin, cExtent * iExtent * jExtent, vExtent) &&
  (let idx ==
    (c - cMin + (i - iMin) * cExtent + (j - jMin) * cExtent * iExtent +
    (v - vMin) * cExtent * iExtent * jExtent) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), idx)): Option[Pointer]))).rat, write))
}

predicate visOut0Pred(data0: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data0 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data0))) -
  pointer_offset(optGet2(data0)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data0), idx)): Option[Pointer]))).rat, write))
}

predicate visOut1Pred(data1: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data1 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data1))) -
  pointer_offset(optGet2(data1)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data1), idx)): Option[Pointer]))).rat, write))
}

predicate visOut2Pred(data2: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data2 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data2))) -
  pointer_offset(optGet2(data2)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data2), idx)): Option[Pointer]))).rat, write))
}

predicate visOut3Pred(data3: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data3 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data3))) -
  pointer_offset(optGet2(data3)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data3), idx)): Option[Pointer]))).rat, write))
}

predicate visOut4Pred(data4: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data4 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data4))) -
  pointer_offset(optGet2(data4)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data4), idx)): Option[Pointer]))).rat, write))
}

predicate visOut5Pred(data5: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data5 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data5))) -
  pointer_offset(optGet2(data5)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data5), idx)): Option[Pointer]))).rat, write))
}

predicate visOut6Pred(data6: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data6 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data6))) -
  pointer_offset(optGet2(data6)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data6), idx)): Option[Pointer]))).rat, write))
}

predicate visOut7Pred(data7: Option[Pointer], v: Int, vMin: Int, vExtent: Int) {
  vMin <= v && v < vMin + vExtent &&
  data7 !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  block_length(pointer_block(optGet2(data7))) -
  pointer_offset(optGet2(data7)) ==
  vExtent &&
  (let idx ==
    (v - vMin) in
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data7), idx)): Option[Pointer]))).rat, write))
}

predicate ant1PredCompl(data: Option[Pointer]) {
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  ((forall i: Int ::
    { ptrDeref(ptrAdd(optGet2(data), i)).int }
    0 <= i &&
    i <
    block_length(pointer_block(optGet2(data))) -
    pointer_offset(optGet2(data)) ==>
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), i)): Option[Pointer]))).int, write)) &&
  ((forall i: Int ::
    { ptrDeref(ptrAdd(optGet2(data), i)).int }
    0 <= i &&
    i <
    block_length(pointer_block(optGet2(data))) -
    pointer_offset(optGet2(data)) ==>
    0 <= ptrDeref(ptrAdd(optGet2(data), i)).int) &&
  (forall i: Int ::
    { ptrDeref(ptrAdd(optGet2(data), i)).int }
    0 <= i &&
    i <
    block_length(pointer_block(optGet2(data))) -
    pointer_offset(optGet2(data)) ==>
    ptrDeref(ptrAdd(optGet2(data), i)).int < 50)))
}

predicate ant2PredCompl(data: Option[Pointer]) {
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  ((forall i: Int ::
    { ptrDeref(ptrAdd(optGet2(data), i)).int }
    0 <= i &&
    i <
    block_length(pointer_block(optGet2(data))) -
    pointer_offset(optGet2(data)) ==>
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), i)): Option[Pointer]))).int, write)) &&
  ((forall i: Int ::
    { ptrDeref(ptrAdd(optGet2(data), i)).int }
    0 <= i &&
    i <
    block_length(pointer_block(optGet2(data))) -
    pointer_offset(optGet2(data)) ==>
    0 <= ptrDeref(ptrAdd(optGet2(data), i)).int) &&
  (forall i: Int ::
    { ptrDeref(ptrAdd(optGet2(data), i)).int }
    0 <= i &&
    i <
    block_length(pointer_block(optGet2(data))) -
    pointer_offset(optGet2(data)) ==>
    ptrDeref(ptrAdd(optGet2(data), i)).int < 50)))
}

predicate solutionMapPredCompl(data: Option[Pointer], solutionIndex0: Int) {
  data !=
  ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
    (none1(): Option[Pointer]) :
    (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
  ((forall i: Int ::
    { ptrDeref(ptrAdd(optGet2(data), i)).int }
    0 <= i &&
    i <
    block_length(pointer_block(optGet2(data))) -
    pointer_offset(optGet2(data)) ==>
    acc(ptrDeref(optGet2((some(ptrAdd(optGet2(data), i)): Option[Pointer]))).int, write)) &&
  ((forall i: Int ::
    { ptrDeref(ptrAdd(optGet2(data), i)).int }
    0 <= i &&
    i <
    block_length(pointer_block(optGet2(data))) -
    pointer_offset(optGet2(data)) ==>
    solutionIndex0 <= ptrDeref(ptrAdd(optGet2(data), i)).int) &&
  (forall i: Int ::
    { ptrDeref(ptrAdd(optGet2(data), i)).int }
    0 <= i &&
    i <
    block_length(pointer_block(optGet2(data))) -
    pointer_offset(optGet2(data)) ==>
    ptrDeref(ptrAdd(optGet2(data), i)).int < solutionIndex0 + 3)))
}

method unknown(tid: Int, expression: Bool) returns (res: Void)
  requires expression


method unknown39(tid: Int, format: Option[Pointer]) returns (res: Int)


method unknown40(tid: Int, size: Int) returns (res: Option[Pointer])


method unknown41(tid: Int, ptr: Option[Pointer]) returns (res: Void)


method unknown42(tid: Int, xs: Option[Pointer], _0Min: Int, _0Extent: Int)
  returns (res: Void)
  requires 0 < _0Extent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent
  requires (forall _0: Int ::
      { ant1ImPred(xs, _0, _0Min, _0Extent) }
      _0Min <= _0 && _0 < _0Min + _0Extent ==>
      acc(ant1ImPred(xs, _0, _0Min, _0Extent), write))
  ensures 0 < _0Extent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).int }
      0 <= i && i < _0Extent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).int, 1 *
      write))


method unknown43(tid: Int, xs: Option[Pointer], _0Min: Int, _0Extent: Int)
  returns (res: Void)
  requires 0 < _0Extent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).int }
      0 <= i && i < _0Extent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).int, 1 *
      write))
  ensures 0 < _0Extent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent
  ensures (forall _0: Int ::
      { ant1ImPred(xs, _0, _0Min, _0Extent) }
      _0Min <= _0 && _0 < _0Min + _0Extent ==>
      acc(ant1ImPred(xs, _0, _0Min, _0Extent), write))


method unknown44(tid: Int, xs: Option[Pointer], _0Min: Int, _0Extent: Int)
  returns (res: Void)
  requires 0 < _0Extent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent
  requires (forall _0: Int ::
      { ant2ImPred(xs, _0, _0Min, _0Extent) }
      _0Min <= _0 && _0 < _0Min + _0Extent ==>
      acc(ant2ImPred(xs, _0, _0Min, _0Extent), write))
  ensures 0 < _0Extent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).int }
      0 <= i && i < _0Extent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).int, 1 *
      write))


method unknown45(tid: Int, xs: Option[Pointer], _0Min: Int, _0Extent: Int)
  returns (res: Void)
  requires 0 < _0Extent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).int }
      0 <= i && i < _0Extent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).int, 1 *
      write))
  ensures 0 < _0Extent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent
  ensures (forall _0: Int ::
      { ant2ImPred(xs, _0, _0Min, _0Extent) }
      _0Min <= _0 && _0 < _0Min + _0Extent ==>
      acc(ant2ImPred(xs, _0, _0Min, _0Extent), write))


method unknown46(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { antenna1Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(antenna1Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).int }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).int, 1 *
      write))


method unknown47(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).int }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).int, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { antenna1Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(antenna1Pred(xs, v, vMin, vExtent), write))


method unknown48(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { antenna2Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(antenna2Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).int }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).int, 1 *
      write))


method unknown49(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).int }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).int, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { antenna2Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(antenna2Pred(xs, v, vMin, vExtent), write))


method unknown50(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { model0Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model0Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown51(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { model0Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model0Pred(xs, v, vMin, vExtent), write))


method unknown52(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { model1Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model1Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown53(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { model1Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model1Pred(xs, v, vMin, vExtent), write))


method unknown54(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { model2Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model2Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown55(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { model2Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model2Pred(xs, v, vMin, vExtent), write))


method unknown56(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { model3Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model3Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown57(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { model3Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model3Pred(xs, v, vMin, vExtent), write))


method unknown58(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { model4Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model4Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown59(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { model4Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model4Pred(xs, v, vMin, vExtent), write))


method unknown60(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { model5Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model5Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown61(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { model5Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model5Pred(xs, v, vMin, vExtent), write))


method unknown62(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { model6Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model6Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown63(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { model6Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model6Pred(xs, v, vMin, vExtent), write))


method unknown64(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { model7Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model7Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown65(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { model7Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(model7Pred(xs, v, vMin, vExtent), write))


method unknown66(tid: Int, xs: Option[Pointer], _0Min: Int, _0Extent: Int, _1Min: Int,
  _1Extent: Int, _2Min: Int, _2Extent: Int, _3Min: Int, _3Extent: Int)
  returns (res: Void)
  requires 0 < _0Extent
  requires 0 < _1Extent
  requires 0 < _2Extent
  requires 0 < _3Extent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent * _1Extent * _2Extent * _3Extent
  requires (forall _0: Int, _1: Int, _2: Int, _3: Int ::
      { modelImPred(xs, _0, _0Min, _0Extent, _1, _1Min, _1Extent, _2, _2Min,
      _2Extent, _3, _3Min, _3Extent) }
      _0Min <= _0 && _0 < _0Min + _0Extent && _1Min <= _1 &&
      _1 < _1Min + _1Extent &&
      _2Min <= _2 &&
      _2 < _2Min + _2Extent &&
      _3Min <= _3 &&
      _3 < _3Min + _3Extent ==>
      acc(modelImPred(xs, _0, _0Min, _0Extent, _1, _1Min, _1Extent, _2, _2Min,
      _2Extent, _3, _3Min, _3Extent), write))
  ensures 0 < _0Extent
  ensures 0 < _1Extent
  ensures 0 < _2Extent
  ensures 0 < _3Extent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent * _1Extent * _2Extent * _3Extent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < _0Extent * _1Extent * _2Extent * _3Extent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown67(tid: Int, xs: Option[Pointer], _0Min: Int, _0Extent: Int, _1Min: Int,
  _1Extent: Int, _2Min: Int, _2Extent: Int, _3Min: Int, _3Extent: Int)
  returns (res: Void)
  requires 0 < _0Extent
  requires 0 < _1Extent
  requires 0 < _2Extent
  requires 0 < _3Extent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent * _1Extent * _2Extent * _3Extent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < _0Extent * _1Extent * _2Extent * _3Extent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < _0Extent
  ensures 0 < _1Extent
  ensures 0 < _2Extent
  ensures 0 < _3Extent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent * _1Extent * _2Extent * _3Extent
  ensures (forall _0: Int, _1: Int, _2: Int, _3: Int ::
      { modelImPred(xs, _0, _0Min, _0Extent, _1, _1Min, _1Extent, _2, _2Min,
      _2Extent, _3, _3Min, _3Extent) }
      _0Min <= _0 && _0 < _0Min + _0Extent && _1Min <= _1 &&
      _1 < _1Min + _1Extent &&
      _2Min <= _2 &&
      _2 < _2Min + _2Extent &&
      _3Min <= _3 &&
      _3 < _3Min + _3Extent ==>
      acc(modelImPred(xs, _0, _0Min, _0Extent, _1, _1Min, _1Extent, _2, _2Min,
      _2Extent, _3, _3Min, _3Extent), write))


method unknown68(tid: Int, xs: Option[Pointer], iMin: Int, iExtent: Int, siMin: Int,
  siExtent: Int, aMin: Int, aExtent: Int)
  returns (res: Void)
  requires 0 < iExtent
  requires 0 < siExtent
  requires 0 < aExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    iExtent * siExtent * aExtent
  requires (forall i: Int, si: Int, a: Int ::
      { sol0Pred(xs, i, iMin, iExtent, si, siMin, siExtent, a, aMin, aExtent) }
      iMin <= i && i < iMin + iExtent && siMin <= si &&
      si < siMin + siExtent &&
      aMin <= a &&
      a < aMin + aExtent ==>
      acc(sol0Pred(xs, i, iMin, iExtent, si, siMin, siExtent, a, aMin, aExtent), write))
  ensures 0 < iExtent
  ensures 0 < siExtent
  ensures 0 < aExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    iExtent * siExtent * aExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < iExtent * siExtent * aExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown69(tid: Int, xs: Option[Pointer], iMin: Int, iExtent: Int, siMin: Int,
  siExtent: Int, aMin: Int, aExtent: Int)
  returns (res: Void)
  requires 0 < iExtent
  requires 0 < siExtent
  requires 0 < aExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    iExtent * siExtent * aExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < iExtent * siExtent * aExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < iExtent
  ensures 0 < siExtent
  ensures 0 < aExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    iExtent * siExtent * aExtent
  ensures (forall i: Int, si: Int, a: Int ::
      { sol0Pred(xs, i, iMin, iExtent, si, siMin, siExtent, a, aMin, aExtent) }
      iMin <= i && i < iMin + iExtent && siMin <= si &&
      si < siMin + siExtent &&
      aMin <= a &&
      a < aMin + aExtent ==>
      acc(sol0Pred(xs, i, iMin, iExtent, si, siMin, siExtent, a, aMin, aExtent), write))


method unknown70(tid: Int, xs: Option[Pointer], iMin: Int, iExtent: Int, siMin: Int,
  siExtent: Int, aMin: Int, aExtent: Int)
  returns (res: Void)
  requires 0 < iExtent
  requires 0 < siExtent
  requires 0 < aExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    iExtent * siExtent * aExtent
  requires (forall i: Int, si: Int, a: Int ::
      { sol1Pred(xs, i, iMin, iExtent, si, siMin, siExtent, a, aMin, aExtent) }
      iMin <= i && i < iMin + iExtent && siMin <= si &&
      si < siMin + siExtent &&
      aMin <= a &&
      a < aMin + aExtent ==>
      acc(sol1Pred(xs, i, iMin, iExtent, si, siMin, siExtent, a, aMin, aExtent), write))
  ensures 0 < iExtent
  ensures 0 < siExtent
  ensures 0 < aExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    iExtent * siExtent * aExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < iExtent * siExtent * aExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown71(tid: Int, xs: Option[Pointer], iMin: Int, iExtent: Int, siMin: Int,
  siExtent: Int, aMin: Int, aExtent: Int)
  returns (res: Void)
  requires 0 < iExtent
  requires 0 < siExtent
  requires 0 < aExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    iExtent * siExtent * aExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < iExtent * siExtent * aExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < iExtent
  ensures 0 < siExtent
  ensures 0 < aExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    iExtent * siExtent * aExtent
  ensures (forall i: Int, si: Int, a: Int ::
      { sol1Pred(xs, i, iMin, iExtent, si, siMin, siExtent, a, aMin, aExtent) }
      iMin <= i && i < iMin + iExtent && siMin <= si &&
      si < siMin + siExtent &&
      aMin <= a &&
      a < aMin + aExtent ==>
      acc(sol1Pred(xs, i, iMin, iExtent, si, siMin, siExtent, a, aMin, aExtent), write))


method unknown72(tid: Int, xs: Option[Pointer], _0Min: Int, _0Extent: Int, _1Min: Int,
  _1Extent: Int, _2Min: Int, _2Extent: Int, _3Min: Int, _3Extent: Int)
  returns (res: Void)
  requires 0 < _0Extent
  requires 0 < _1Extent
  requires 0 < _2Extent
  requires 0 < _3Extent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent * _1Extent * _2Extent * _3Extent
  requires (forall _0: Int, _1: Int, _2: Int, _3: Int ::
      { solImPred(xs, _0, _0Min, _0Extent, _1, _1Min, _1Extent, _2, _2Min, _2Extent,
      _3, _3Min, _3Extent) }
      _0Min <= _0 && _0 < _0Min + _0Extent && _1Min <= _1 &&
      _1 < _1Min + _1Extent &&
      _2Min <= _2 &&
      _2 < _2Min + _2Extent &&
      _3Min <= _3 &&
      _3 < _3Min + _3Extent ==>
      acc(solImPred(xs, _0, _0Min, _0Extent, _1, _1Min, _1Extent, _2, _2Min,
      _2Extent, _3, _3Min, _3Extent), write))
  ensures 0 < _0Extent
  ensures 0 < _1Extent
  ensures 0 < _2Extent
  ensures 0 < _3Extent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent * _1Extent * _2Extent * _3Extent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < _0Extent * _1Extent * _2Extent * _3Extent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown73(tid: Int, xs: Option[Pointer], _0Min: Int, _0Extent: Int, _1Min: Int,
  _1Extent: Int, _2Min: Int, _2Extent: Int, _3Min: Int, _3Extent: Int)
  returns (res: Void)
  requires 0 < _0Extent
  requires 0 < _1Extent
  requires 0 < _2Extent
  requires 0 < _3Extent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent * _1Extent * _2Extent * _3Extent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < _0Extent * _1Extent * _2Extent * _3Extent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < _0Extent
  ensures 0 < _1Extent
  ensures 0 < _2Extent
  ensures 0 < _3Extent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent * _1Extent * _2Extent * _3Extent
  ensures (forall _0: Int, _1: Int, _2: Int, _3: Int ::
      { solImPred(xs, _0, _0Min, _0Extent, _1, _1Min, _1Extent, _2, _2Min, _2Extent,
      _3, _3Min, _3Extent) }
      _0Min <= _0 && _0 < _0Min + _0Extent && _1Min <= _1 &&
      _1 < _1Min + _1Extent &&
      _2Min <= _2 &&
      _2 < _2Min + _2Extent &&
      _3Min <= _3 &&
      _3 < _3Min + _3Extent ==>
      acc(solImPred(xs, _0, _0Min, _0Extent, _1, _1Min, _1Extent, _2, _2Min,
      _2Extent, _3, _3Min, _3Extent), write))


method unknown74(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { solutionIndexPred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(solutionIndexPred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).int }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).int, 1 *
      write))


method unknown75(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).int }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).int, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { solutionIndexPred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(solutionIndexPred(xs, v, vMin, vExtent), write))


method unknown76(tid: Int, xs: Option[Pointer], _0Min: Int, _0Extent: Int)
  returns (res: Void)
  requires 0 < _0Extent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent
  requires (forall _0: Int ::
      { solutionMapImPred(xs, _0, _0Min, _0Extent) }
      _0Min <= _0 && _0 < _0Min + _0Extent ==>
      acc(solutionMapImPred(xs, _0, _0Min, _0Extent), write))
  ensures 0 < _0Extent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).int }
      0 <= i && i < _0Extent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).int, 1 *
      write))


method unknown77(tid: Int, xs: Option[Pointer], _0Min: Int, _0Extent: Int)
  returns (res: Void)
  requires 0 < _0Extent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).int }
      0 <= i && i < _0Extent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).int, 1 *
      write))
  ensures 0 < _0Extent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent
  ensures (forall _0: Int ::
      { solutionMapImPred(xs, _0, _0Min, _0Extent) }
      _0Min <= _0 && _0 < _0Min + _0Extent ==>
      acc(solutionMapImPred(xs, _0, _0Min, _0Extent), write))


method unknown78(tid: Int, xs: Option[Pointer], siMin: Int, siExtent: Int, aMin: Int,
  aExtent: Int)
  returns (res: Void)
  requires 0 < siExtent
  requires 0 < aExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  requires (forall si: Int, a: Int ::
      { solutions0Pred(xs, si, siMin, siExtent, a, aMin, aExtent) }
      siMin <= si && si < siMin + siExtent && aMin <= a &&
      a < aMin + aExtent ==>
      acc(solutions0Pred(xs, si, siMin, siExtent, a, aMin, aExtent), write))
  ensures 0 < siExtent
  ensures 0 < aExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < siExtent * aExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown79(tid: Int, xs: Option[Pointer], siMin: Int, siExtent: Int, aMin: Int,
  aExtent: Int)
  returns (res: Void)
  requires 0 < siExtent
  requires 0 < aExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < siExtent * aExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < siExtent
  ensures 0 < aExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  ensures (forall si: Int, a: Int ::
      { solutions0Pred(xs, si, siMin, siExtent, a, aMin, aExtent) }
      siMin <= si && si < siMin + siExtent && aMin <= a &&
      a < aMin + aExtent ==>
      acc(solutions0Pred(xs, si, siMin, siExtent, a, aMin, aExtent), write))


method unknown80(tid: Int, xs: Option[Pointer], siMin: Int, siExtent: Int, aMin: Int,
  aExtent: Int)
  returns (res: Void)
  requires 0 < siExtent
  requires 0 < aExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  requires (forall si: Int, a: Int ::
      { solutions1Pred(xs, si, siMin, siExtent, a, aMin, aExtent) }
      siMin <= si && si < siMin + siExtent && aMin <= a &&
      a < aMin + aExtent ==>
      acc(solutions1Pred(xs, si, siMin, siExtent, a, aMin, aExtent), write))
  ensures 0 < siExtent
  ensures 0 < aExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < siExtent * aExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown81(tid: Int, xs: Option[Pointer], siMin: Int, siExtent: Int, aMin: Int,
  aExtent: Int)
  returns (res: Void)
  requires 0 < siExtent
  requires 0 < aExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < siExtent * aExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < siExtent
  ensures 0 < aExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  ensures (forall si: Int, a: Int ::
      { solutions1Pred(xs, si, siMin, siExtent, a, aMin, aExtent) }
      siMin <= si && si < siMin + siExtent && aMin <= a &&
      a < aMin + aExtent ==>
      acc(solutions1Pred(xs, si, siMin, siExtent, a, aMin, aExtent), write))


method unknown82(tid: Int, xs: Option[Pointer], siMin: Int, siExtent: Int, aMin: Int,
  aExtent: Int)
  returns (res: Void)
  requires 0 < siExtent
  requires 0 < aExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  requires (forall si: Int, a: Int ::
      { solutions2Pred(xs, si, siMin, siExtent, a, aMin, aExtent) }
      siMin <= si && si < siMin + siExtent && aMin <= a &&
      a < aMin + aExtent ==>
      acc(solutions2Pred(xs, si, siMin, siExtent, a, aMin, aExtent), write))
  ensures 0 < siExtent
  ensures 0 < aExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < siExtent * aExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown83(tid: Int, xs: Option[Pointer], siMin: Int, siExtent: Int, aMin: Int,
  aExtent: Int)
  returns (res: Void)
  requires 0 < siExtent
  requires 0 < aExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < siExtent * aExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < siExtent
  ensures 0 < aExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  ensures (forall si: Int, a: Int ::
      { solutions2Pred(xs, si, siMin, siExtent, a, aMin, aExtent) }
      siMin <= si && si < siMin + siExtent && aMin <= a &&
      a < aMin + aExtent ==>
      acc(solutions2Pred(xs, si, siMin, siExtent, a, aMin, aExtent), write))


method unknown84(tid: Int, xs: Option[Pointer], siMin: Int, siExtent: Int, aMin: Int,
  aExtent: Int)
  returns (res: Void)
  requires 0 < siExtent
  requires 0 < aExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  requires (forall si: Int, a: Int ::
      { solutions3Pred(xs, si, siMin, siExtent, a, aMin, aExtent) }
      siMin <= si && si < siMin + siExtent && aMin <= a &&
      a < aMin + aExtent ==>
      acc(solutions3Pred(xs, si, siMin, siExtent, a, aMin, aExtent), write))
  ensures 0 < siExtent
  ensures 0 < aExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < siExtent * aExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown85(tid: Int, xs: Option[Pointer], siMin: Int, siExtent: Int, aMin: Int,
  aExtent: Int)
  returns (res: Void)
  requires 0 < siExtent
  requires 0 < aExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < siExtent * aExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < siExtent
  ensures 0 < aExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    siExtent * aExtent
  ensures (forall si: Int, a: Int ::
      { solutions3Pred(xs, si, siMin, siExtent, a, aMin, aExtent) }
      siMin <= si && si < siMin + siExtent && aMin <= a &&
      a < aMin + aExtent ==>
      acc(solutions3Pred(xs, si, siMin, siExtent, a, aMin, aExtent), write))


method unknown86(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { vRes00Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes00Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown87(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { vRes00Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes00Pred(xs, v, vMin, vExtent), write))


method unknown88(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { vRes01Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes01Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown89(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { vRes01Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes01Pred(xs, v, vMin, vExtent), write))


method unknown90(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { vRes02Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes02Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown91(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { vRes02Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes02Pred(xs, v, vMin, vExtent), write))


method unknown92(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { vRes03Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes03Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown93(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { vRes03Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes03Pred(xs, v, vMin, vExtent), write))


method unknown94(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { vRes04Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes04Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown95(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { vRes04Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes04Pred(xs, v, vMin, vExtent), write))


method unknown96(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { vRes05Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes05Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown97(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { vRes05Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes05Pred(xs, v, vMin, vExtent), write))


method unknown98(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { vRes06Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes06Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown99(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { vRes06Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes06Pred(xs, v, vMin, vExtent), write))


method unknown100(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { vRes07Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes07Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown101(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { vRes07Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(vRes07Pred(xs, v, vMin, vExtent), write))


method unknown102(tid: Int, xs: Option[Pointer], _0Min: Int, _0Extent: Int,
  _1Min: Int, _1Extent: Int, _2Min: Int, _2Extent: Int, _3Min: Int, _3Extent: Int)
  returns (res: Void)
  requires 0 < _0Extent
  requires 0 < _1Extent
  requires 0 < _2Extent
  requires 0 < _3Extent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent * _1Extent * _2Extent * _3Extent
  requires (forall _0: Int, _1: Int, _2: Int, _3: Int ::
      { vResInImPred(xs, _0, _0Min, _0Extent, _1, _1Min, _1Extent, _2, _2Min,
      _2Extent, _3, _3Min, _3Extent) }
      _0Min <= _0 && _0 < _0Min + _0Extent && _1Min <= _1 &&
      _1 < _1Min + _1Extent &&
      _2Min <= _2 &&
      _2 < _2Min + _2Extent &&
      _3Min <= _3 &&
      _3 < _3Min + _3Extent ==>
      acc(vResInImPred(xs, _0, _0Min, _0Extent, _1, _1Min, _1Extent, _2, _2Min,
      _2Extent, _3, _3Min, _3Extent), write))
  ensures 0 < _0Extent
  ensures 0 < _1Extent
  ensures 0 < _2Extent
  ensures 0 < _3Extent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent * _1Extent * _2Extent * _3Extent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < _0Extent * _1Extent * _2Extent * _3Extent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown103(tid: Int, xs: Option[Pointer], _0Min: Int, _0Extent: Int,
  _1Min: Int, _1Extent: Int, _2Min: Int, _2Extent: Int, _3Min: Int, _3Extent: Int)
  returns (res: Void)
  requires 0 < _0Extent
  requires 0 < _1Extent
  requires 0 < _2Extent
  requires 0 < _3Extent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent * _1Extent * _2Extent * _3Extent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < _0Extent * _1Extent * _2Extent * _3Extent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < _0Extent
  ensures 0 < _1Extent
  ensures 0 < _2Extent
  ensures 0 < _3Extent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    _0Extent * _1Extent * _2Extent * _3Extent
  ensures (forall _0: Int, _1: Int, _2: Int, _3: Int ::
      { vResInImPred(xs, _0, _0Min, _0Extent, _1, _1Min, _1Extent, _2, _2Min,
      _2Extent, _3, _3Min, _3Extent) }
      _0Min <= _0 && _0 < _0Min + _0Extent && _1Min <= _1 &&
      _1 < _1Min + _1Extent &&
      _2Min <= _2 &&
      _2 < _2Min + _2Extent &&
      _3Min <= _3 &&
      _3 < _3Min + _3Extent ==>
      acc(vResInImPred(xs, _0, _0Min, _0Extent, _1, _1Min, _1Extent, _2, _2Min,
      _2Extent, _3, _3Min, _3Extent), write))


method unknown104(tid: Int, xs: Option[Pointer], cMin: Int, cExtent: Int, iMin: Int,
  iExtent: Int, jMin: Int, jExtent: Int, vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < cExtent
  requires 0 < iExtent
  requires 0 < jExtent
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    cExtent * iExtent * jExtent * vExtent
  requires (forall c: Int, i: Int, j: Int, v: Int ::
      { vResOutPred(xs, c, cMin, cExtent, i, iMin, iExtent, j, jMin, jExtent,
      v, vMin, vExtent) }
      cMin <= c && c < cMin + cExtent && iMin <= i && i < iMin + iExtent &&
      jMin <= j &&
      j < jMin + jExtent &&
      vMin <= v &&
      v < vMin + vExtent ==>
      acc(vResOutPred(xs, c, cMin, cExtent, i, iMin, iExtent, j, jMin, jExtent,
      v, vMin, vExtent), write))
  ensures 0 < cExtent
  ensures 0 < iExtent
  ensures 0 < jExtent
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    cExtent * iExtent * jExtent * vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < cExtent * iExtent * jExtent * vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown105(tid: Int, xs: Option[Pointer], cMin: Int, cExtent: Int, iMin: Int,
  iExtent: Int, jMin: Int, jExtent: Int, vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < cExtent
  requires 0 < iExtent
  requires 0 < jExtent
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    cExtent * iExtent * jExtent * vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < cExtent * iExtent * jExtent * vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < cExtent
  ensures 0 < iExtent
  ensures 0 < jExtent
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    cExtent * iExtent * jExtent * vExtent
  ensures (forall c: Int, i: Int, j: Int, v: Int ::
      { vResOutPred(xs, c, cMin, cExtent, i, iMin, iExtent, j, jMin, jExtent,
      v, vMin, vExtent) }
      cMin <= c && c < cMin + cExtent && iMin <= i && i < iMin + iExtent &&
      jMin <= j &&
      j < jMin + jExtent &&
      vMin <= v &&
      v < vMin + vExtent ==>
      acc(vResOutPred(xs, c, cMin, cExtent, i, iMin, iExtent, j, jMin, jExtent,
      v, vMin, vExtent), write))


method unknown106(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { visOut0Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut0Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown107(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { visOut0Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut0Pred(xs, v, vMin, vExtent), write))


method unknown108(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { visOut1Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut1Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown109(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { visOut1Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut1Pred(xs, v, vMin, vExtent), write))


method unknown110(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { visOut2Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut2Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown111(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { visOut2Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut2Pred(xs, v, vMin, vExtent), write))


method unknown112(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { visOut3Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut3Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown113(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { visOut3Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut3Pred(xs, v, vMin, vExtent), write))


method unknown114(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { visOut4Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut4Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown115(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { visOut4Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut4Pred(xs, v, vMin, vExtent), write))


method unknown116(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { visOut5Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut5Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown117(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { visOut5Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut5Pred(xs, v, vMin, vExtent), write))


method unknown118(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { visOut6Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut6Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown119(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { visOut6Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut6Pred(xs, v, vMin, vExtent), write))


method unknown120(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall v: Int ::
      { visOut7Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut7Pred(xs, v, vMin, vExtent), write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))


method unknown121(tid: Int, xs: Option[Pointer], vMin: Int, vExtent: Int)
  returns (res: Void)
  requires 0 < vExtent
  requires xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(xs), i)).rat }
      0 <= i && i < vExtent ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(xs), i)): Option[Pointer]))).rat, 1 *
      write))
  ensures 0 < vExtent
  ensures xs !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(xs))) -
    pointer_offset(optGet2(xs)) ==
    vExtent
  ensures (forall v: Int ::
      { visOut7Pred(xs, v, vMin, vExtent) }
      vMin <= v && v < vMin + vExtent ==>
      acc(visOut7Pred(xs, v, vMin, vExtent), write))


method make_pointer_array_float32(tid: Int, size: Int)
  returns (res: Option[Pointer])
  requires 0 <= size
  ensures res !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  ensures block_length(pointer_block(optGet2(res))) == size
  ensures pointer_offset(optGet2(res)) == 0
  ensures (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(res), i)).rat }
      0 <= i && i < size ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(res), i)): Option[Pointer]))).rat, write))


method unknown122(tid: Int, p: Option[Pointer]) returns (res: Void)
  requires p !=
    ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
      (none1(): Option[Pointer]) :
      (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer]))
  requires pointer_offset(optGet2(p)) == 0
  requires (forall i: Int ::
      { ptrDeref(ptrAdd(optGet2(p), i)).rat }
      0 <= i && i < block_length(pointer_block(optGet2(p))) ==>
      acc(ptrDeref(optGet2((some(ptrAdd(optGet2(p), i)): Option[Pointer]))).rat, write))
  decreases 


method subDirection(tid: Int, solBuffer: Option[Pointer], solutionMapBuffer: Option[Pointer],
  ant1Buffer: Option[Pointer], ant2Buffer: Option[Pointer], modelBuffer: Option[Pointer],
  vResInBuffer: Option[Pointer], solutionIndex0: Int, vResOutBuffer: Option[Pointer])
  returns (res: Int)
  requires (let buf ==
      (solBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(buf))) -
          pointer_offset(optGet2(buf)) ==
          1 &&
          acc(ptrDeref(optGet2(buf)).ref, p) &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim))) -
          pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim)) ==
          nDims &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])))))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer),
    0)).ref.host))) -
    pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.host)) ==
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    3)).ref.extent *
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    3)).ref.stride
  requires (let buf ==
      (solutionMapBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (1) in
          buf !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(buf))) -
          pointer_offset(optGet2(buf)) ==
          1 &&
          acc(ptrDeref(optGet2(buf)).ref, p) &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1))) -
          pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1)) ==
          nDims &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host1, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host1 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])))))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(solutionMapBuffer), 0)).ref.dim1) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(solutionMapBuffer),
    0)).ref.host1))) -
    pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(solutionMapBuffer), 0)).ref.host1)) ==
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solutionMapBuffer), 0)).ref.dim1),
    0)).ref.extent *
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solutionMapBuffer), 0)).ref.dim1),
    0)).ref.stride
  requires (let buf ==
      (ant1Buffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (1) in
          buf !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(buf))) -
          pointer_offset(optGet2(buf)) ==
          1 &&
          acc(ptrDeref(optGet2(buf)).ref, p) &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1))) -
          pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1)) ==
          nDims &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host1, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host1 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])))))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.dim1) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(ant1Buffer),
    0)).ref.host1))) -
    pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.host1)) ==
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.dim1),
    0)).ref.extent *
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.dim1),
    0)).ref.stride
  requires (let buf ==
      (ant2Buffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (1) in
          buf !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(buf))) -
          pointer_offset(optGet2(buf)) ==
          1 &&
          acc(ptrDeref(optGet2(buf)).ref, p) &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1))) -
          pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1)) ==
          nDims &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host1, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host1 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])))))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.dim1) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(ant2Buffer),
    0)).ref.host1))) -
    pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.host1)) ==
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.dim1),
    0)).ref.extent *
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.dim1),
    0)).ref.stride
  requires (let buf ==
      (modelBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(buf))) -
          pointer_offset(optGet2(buf)) ==
          1 &&
          acc(ptrDeref(optGet2(buf)).ref, p) &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2))) -
          pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2)) ==
          nDims &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host2, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host2 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])))))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer),
    0)).ref.host2))) -
    pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.host2)) ==
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    3)).ref.extent *
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    3)).ref.stride
  requires (let buf ==
      (vResInBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(buf))) -
          pointer_offset(optGet2(buf)) ==
          1 &&
          acc(ptrDeref(optGet2(buf)).ref, p) &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2))) -
          pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2)) ==
          nDims &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host2, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host2 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])))))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer),
    0)).ref.host2))) -
    pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.host2)) ==
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    3)).ref.extent *
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    3)).ref.stride
  requires (let buf ==
      (vResOutBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(buf))) -
          pointer_offset(optGet2(buf)) ==
          1 &&
          acc(ptrDeref(optGet2(buf)).ref, p) &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2))) -
          pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2)) ==
          nDims &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host2, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host2 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])))))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  requires block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer),
    0)).ref.host2))) -
    pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.host2)) ==
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    3)).ref.extent *
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    3)).ref.stride
  requires ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.host1 !=
    ptrDeref(ptrAdd(optGet2(solutionMapBuffer), 0)).ref.host1
  requires ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.host1 !=
    ptrDeref(ptrAdd(optGet2(solutionMapBuffer), 0)).ref.host1
  requires ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.host1 !=
    ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.host1
  requires ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.host2 !=
    ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.host
  requires ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.host2 !=
    ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.host
  requires ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.host2 !=
    ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.host2
  requires ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.host2 !=
    ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.host
  requires ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.host2 !=
    ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.host2
  requires ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.host2 !=
    ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.host2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.dim1),
    0)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.dim1),
    0)).ref.extent ==
    230930
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.dim1),
    0)).ref.stride ==
    1
  requires acc(ant1PredCompl(ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.host1), scale(1 *
    write /
    2) *
    write)
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.dim1),
    0)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.dim1),
    0)).ref.extent ==
    230930
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.dim1),
    0)).ref.stride ==
    1
  requires acc(ant2PredCompl(ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.host1), scale(1 *
    write /
    2) *
    write)
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    0)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    0)).ref.extent ==
    2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    0)).ref.stride ==
    1
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    1)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    1)).ref.extent ==
    2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    1)).ref.stride ==
    2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    2)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    2)).ref.extent ==
    2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    2)).ref.stride ==
    4
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    3)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    3)).ref.extent ==
    230930
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    3)).ref.stride ==
    8
  requires acc(float32Pred(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.host2), scale(1 *
    write /
    2) *
    write)
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    0)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    0)).ref.extent ==
    2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    0)).ref.stride ==
    1
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    1)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    1)).ref.extent ==
    2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    1)).ref.stride ==
    2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    2)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    2)).ref.extent ==
    8
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    2)).ref.stride ==
    4
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    3)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    3)).ref.extent ==
    50
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    3)).ref.stride ==
    32
  requires acc(float64Pred(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.host), scale(1 *
    write /
    2) *
    write)
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solutionMapBuffer),
    0)).ref.dim1), 0)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solutionMapBuffer),
    0)).ref.dim1), 0)).ref.extent ==
    230930
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solutionMapBuffer),
    0)).ref.dim1), 0)).ref.stride ==
    1
  requires acc(solutionMapPredCompl(ptrDeref(ptrAdd(optGet2(solutionMapBuffer),
    0)).ref.host1, solutionIndex0), scale(1 * write / 2) * write)
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    0)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    0)).ref.extent ==
    2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    0)).ref.stride ==
    1
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    1)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    1)).ref.extent ==
    2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    1)).ref.stride ==
    2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    2)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    2)).ref.extent ==
    2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    2)).ref.stride ==
    4
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    3)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    3)).ref.extent ==
    230930
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    3)).ref.stride ==
    8
  requires acc(float32Pred(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.host2), scale(1 *
    write /
    2) *
    write)
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    0)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    0)).ref.extent ==
    2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    0)).ref.stride ==
    1
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    1)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    1)).ref.extent ==
    2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    1)).ref.stride ==
    2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    2)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    2)).ref.extent ==
    2
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    2)).ref.stride ==
    4
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    3)).ref.min ==
    0
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    3)).ref.extent ==
    230930
  requires ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    3)).ref.stride ==
    8
  requires (forall _0: Int, _1: Int, _2: Int, _3: Int ::
      { vResOutPred(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.host2, _0,
      0, 2, _1, 0, 2, _2, 0, 2, _3, 0, 230930) }
      0 <= _0 && _0 < 2 && 0 <= _1 && _1 < 2 && 0 <= _2 && _2 < 2 &&
      0 <= _3 &&
      _3 < 230930 ==>
      acc(vResOutPred(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.host2,
      _0, 0, 2, _1, 0, 2, _2, 0, 2, _3, 0, 230930), write))
  requires 0 <= solutionIndex0
  requires solutionIndex0 < 5 + 1
  ensures (let buf ==
      (solBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(buf))) -
          pointer_offset(optGet2(buf)) ==
          1 &&
          acc(ptrDeref(optGet2(buf)).ref, p) &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim))) -
          pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim)) ==
          nDims &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])))))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer),
    0)).ref.host))) -
    pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.host)) ==
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    3)).ref.extent *
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    3)).ref.stride
  ensures (let buf ==
      (solutionMapBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (1) in
          buf !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(buf))) -
          pointer_offset(optGet2(buf)) ==
          1 &&
          acc(ptrDeref(optGet2(buf)).ref, p) &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1))) -
          pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1)) ==
          nDims &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host1, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host1 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])))))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(solutionMapBuffer), 0)).ref.dim1) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(solutionMapBuffer),
    0)).ref.host1))) -
    pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(solutionMapBuffer), 0)).ref.host1)) ==
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solutionMapBuffer), 0)).ref.dim1),
    0)).ref.extent *
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solutionMapBuffer), 0)).ref.dim1),
    0)).ref.stride
  ensures (let buf ==
      (ant1Buffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (1) in
          buf !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(buf))) -
          pointer_offset(optGet2(buf)) ==
          1 &&
          acc(ptrDeref(optGet2(buf)).ref, p) &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1))) -
          pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1)) ==
          nDims &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host1, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host1 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])))))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.dim1) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(ant1Buffer),
    0)).ref.host1))) -
    pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.host1)) ==
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.dim1),
    0)).ref.extent *
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.dim1),
    0)).ref.stride
  ensures (let buf ==
      (ant2Buffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (1) in
          buf !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(buf))) -
          pointer_offset(optGet2(buf)) ==
          1 &&
          acc(ptrDeref(optGet2(buf)).ref, p) &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1))) -
          pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim1)) ==
          nDims &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host1, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host1 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])))))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.dim1) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(ant2Buffer),
    0)).ref.host1))) -
    pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.host1)) ==
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.dim1),
    0)).ref.extent *
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.dim1),
    0)).ref.stride
  ensures (let buf ==
      (modelBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(buf))) -
          pointer_offset(optGet2(buf)) ==
          1 &&
          acc(ptrDeref(optGet2(buf)).ref, p) &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2))) -
          pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2)) ==
          nDims &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host2, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host2 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])))))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer),
    0)).ref.host2))) -
    pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.host2)) ==
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    3)).ref.extent *
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    3)).ref.stride
  ensures (let buf ==
      (vResInBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(buf))) -
          pointer_offset(optGet2(buf)) ==
          1 &&
          acc(ptrDeref(optGet2(buf)).ref, p) &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2))) -
          pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2)) ==
          nDims &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host2, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host2 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])))))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer),
    0)).ref.host2))) -
    pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.host2)) ==
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    3)).ref.extent *
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    3)).ref.stride
  ensures (let buf ==
      (vResOutBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(buf))) -
          pointer_offset(optGet2(buf)) ==
          1 &&
          acc(ptrDeref(optGet2(buf)).ref, p) &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])) &&
          block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2))) -
          pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.dim2)) ==
          nDims &&
          acc(ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host2, p) &&
          ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host2 !=
          ((none1(): Option[Nothing]) == (none1(): Option[Nothing]) ?
            (none1(): Option[Pointer]) :
            (some(nothingAs1(optGet1((none1(): Option[Nothing])))): Option[Pointer])))))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures (let dim3 ==
      (ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(ptrDeref(optGet2((some(ptrAdd(optGet2(dim3), i)): Option[Pointer]))).ref, 1 *
          write /
          2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.min, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.stride, 1 * write / 2) &&
          acc(ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent, 1 * write / 2) &&
          0 < ptrDeref(ptrAdd(optGet2(dim3), i)).ref.extent)))
  ensures block_length(pointer_block(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer),
    0)).ref.host2))) -
    pointer_offset(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.host2)) ==
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    3)).ref.extent *
    ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    3)).ref.stride
  ensures ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.host1 !=
    ptrDeref(ptrAdd(optGet2(solutionMapBuffer), 0)).ref.host1
  ensures ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.host1 !=
    ptrDeref(ptrAdd(optGet2(solutionMapBuffer), 0)).ref.host1
  ensures ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.host1 !=
    ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.host1
  ensures ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.host2 !=
    ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.host
  ensures ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.host2 !=
    ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.host
  ensures ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.host2 !=
    ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.host2
  ensures ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.host2 !=
    ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.host
  ensures ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.host2 !=
    ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.host2
  ensures ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.host2 !=
    ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.host2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.dim1),
    0)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.dim1),
    0)).ref.extent ==
    230930
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.dim1),
    0)).ref.stride ==
    1
  ensures acc(ant1PredCompl(ptrDeref(ptrAdd(optGet2(ant1Buffer), 0)).ref.host1), scale(1 *
    write /
    2) *
    write)
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.dim1),
    0)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.dim1),
    0)).ref.extent ==
    230930
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.dim1),
    0)).ref.stride ==
    1
  ensures acc(ant2PredCompl(ptrDeref(ptrAdd(optGet2(ant2Buffer), 0)).ref.host1), scale(1 *
    write /
    2) *
    write)
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    0)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    0)).ref.extent ==
    2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    0)).ref.stride ==
    1
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    1)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    1)).ref.extent ==
    2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    1)).ref.stride ==
    2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    2)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    2)).ref.extent ==
    2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    2)).ref.stride ==
    4
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    3)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    3)).ref.extent ==
    230930
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.dim2),
    3)).ref.stride ==
    8
  ensures acc(float32Pred(ptrDeref(ptrAdd(optGet2(modelBuffer), 0)).ref.host2), scale(1 *
    write /
    2) *
    write)
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    0)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    0)).ref.extent ==
    2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    0)).ref.stride ==
    1
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    1)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    1)).ref.extent ==
    2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    1)).ref.stride ==
    2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    2)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    2)).ref.extent ==
    8
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    2)).ref.stride ==
    4
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    3)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    3)).ref.extent ==
    50
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.dim),
    3)).ref.stride ==
    32
  ensures acc(float64Pred(ptrDeref(ptrAdd(optGet2(solBuffer), 0)).ref.host), scale(1 *
    write /
    2) *
    write)
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solutionMapBuffer),
    0)).ref.dim1), 0)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solutionMapBuffer),
    0)).ref.dim1), 0)).ref.extent ==
    230930
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(solutionMapBuffer),
    0)).ref.dim1), 0)).ref.stride ==
    1
  ensures acc(solutionMapPredCompl(ptrDeref(ptrAdd(optGet2(solutionMapBuffer),
    0)).ref.host1, solutionIndex0), scale(1 * write / 2) * write)
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    0)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    0)).ref.extent ==
    2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    0)).ref.stride ==
    1
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    1)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    1)).ref.extent ==
    2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    1)).ref.stride ==
    2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    2)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    2)).ref.extent ==
    2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    2)).ref.stride ==
    4
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    3)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    3)).ref.extent ==
    230930
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.dim2),
    3)).ref.stride ==
    8
  ensures acc(float32Pred(ptrDeref(ptrAdd(optGet2(vResInBuffer), 0)).ref.host2), scale(1 *
    write /
    2) *
    write)
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    0)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    0)).ref.extent ==
    2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    0)).ref.stride ==
    1
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    1)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    1)).ref.extent ==
    2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    1)).ref.stride ==
    2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    2)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    2)).ref.extent ==
    2
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    2)).ref.stride ==
    4
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    3)).ref.min ==
    0
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    3)).ref.extent ==
    230930
  ensures ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.dim2),
    3)).ref.stride ==
    8
  ensures (forall _0: Int, _1: Int, _2: Int, _3: Int ::
      { vResOutPred(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.host2, _0,
      0, 2, _1, 0, 2, _2, 0, 2, _3, 0, 230930) }
      0 <= _0 && _0 < 2 && 0 <= _1 && _1 < 2 && 0 <= _2 && _2 < 2 &&
      0 <= _3 &&
      _3 < 230930 ==>
      acc(vResOutPred(ptrDeref(ptrAdd(optGet2(vResOutBuffer), 0)).ref.host2,
      _0, 0, 2, _1, 0, 2, _2, 0, 2, _3, 0, 230930), write))
  ensures 0 <= solutionIndex0
  ensures solutionIndex0 < 5 + 1
{
  {
    var exc: Ref
    var return: Int
    var ant1: Option[Pointer]
    var ant1Min0: Int
    var ant1Extent0: Int
    var ant1Stride0: Int
    var ant2: Option[Pointer]
    var ant2Min0: Int
    var ant2Extent0: Int
    var ant2Stride0: Int
    var model: Option[Pointer]
    var modelMin0: Int
    var modelExtent0: Int
    var modelStride0: Int
    var modelMin1: Int
    var modelExtent1: Int
    var modelStride1: Int
    var modelMin2: Int
    var modelExtent2: Int
    var modelStride2: Int
    var modelMin3: Int
    var modelExtent3: Int
    var modelStride3: Int
    var sol: Option[Pointer]
    var solMin0: Int
    var solExtent0: Int
    var solStride0: Int
    var solMin1: Int
    var solExtent1: Int
    var solStride1: Int
    var solMin2: Int
    var solExtent2: Int
    var solStride2: Int
    var solMin3: Int
    var solExtent3: Int
    var solStride3: Int
    var solutionMap: Option[Pointer]
    var solutionMapMin0: Int
    var solutionMapExtent0: Int
    var solutionMapStride0: Int
    var vResIn: Option[Pointer]
    var vResInMin0: Int
    var vResInExtent0: Int
    var vResInStride0: Int
    var vResInMin1: Int
    var vResInExtent1: Int
    var vResInStride1: Int
    var vResInMin2: Int
    var vResInExtent2: Int
    var vResInStride2: Int
    var vResInMin3: Int
    var vResInExtent3: Int
    var vResInStride3: Int
    var vResOut: Option[Pointer]
    var vResOutMin0: Int
    var vResOutExtent0: Int
    var vResOutStride0: Int
    var vResOutMin1: Int
    var vResOutExtent1: Int
    var vResOutStride1: Int
    var vResOutMin2: Int
    var vResOutExtent2: Int
    var vResOutStride2: Int
    var vResOutMin3: Int
    var vResOutExtent3: Int
    var vResOutStride3: Int
    var _212: Int
    var vRes00: Option[Pointer]
    var _213: Int
    var vRes01: Option[Pointer]
    var _214: Int
    var vRes02: Option[Pointer]
    var _215: Int
    var vRes03: Option[Pointer]
    var _216: Int
    var vRes04: Option[Pointer]
    var _217: Int
    var vRes05: Option[Pointer]
    var _218: Int
    var vRes06: Option[Pointer]
    var _219: Int
    var vRes07: Option[Pointer]
    var vRes0S0V: Int
    var _220: Perm
    var _221: Perm
    var _222: Perm
    var _223: Perm
    var _224: Perm
    var _225: Perm
    var _226: Perm
    var _227: Perm
    var vResOutS0V: Int
    var vResOutS0J: Int
    var t3679: Bool
    var t3677: Bool
    var t3680: Int
    var vResOutS0I: Int
    var t3683: Bool
    var t3681: Bool
    var t3684: Int
    var vResOutS0C: Int
    var t3640: Bool
    var t3642: Bool
    var _228: Int
    var t3644: Int
    var _229: Int
    var t3645S: Int
    var _230: Perm
    var _231: Perm
    var t3646: Perm
    var _232: Int
    var t3647S: Int
    var _233: Perm
    var _234: Perm
    var t3648: Perm
    var _235: Perm
    var t3649: Perm
    var _236: Perm
    var t3650: Perm
    var _237: Perm
    var _238: Perm
    var t3651: Perm
    var t3652: Perm
    var t3653: Perm
    var _239: Perm
    var _240: Perm
    var t3654: Perm
    var t3655: Bool
    var t3656: Bool
    var t3658: Bool
    var _241: Perm
    var _242: Perm
    var t3659: Perm
    var _243: Perm
    var t3660: Perm
    var _244: Perm
    var t3661: Perm
    var t3662: Perm
    var t3663: Perm
    var _245: Perm
    var _246: Perm
    var t3664: Perm
    var _247: Perm
    var _248: Perm
    var t3666: Perm
    var _249: Perm
    var t3667: Perm
    var _250: Perm
    var t3668: Perm
    var _251: Perm
    var _252: Perm
    var t3669: Perm
    var t3670: Perm
    var t3671: Perm
    var _253: Perm
    var t3672: Perm
    var _254: Perm
    var t3673: Perm
    var t3674: Perm
    var t3675: Perm
    var _255: Perm
    var _256: Perm
    var _257: Perm
    var _258: Perm
    var _259: Perm
    var _260: Perm
    var _261: Perm
    var _262: Perm
    var buf: Option[Pointer]
    var unknown126: Option[Pointer]
    var buf1: Option[Pointer]
    var d: Int
    var unknown127: Int
    var buf2: Option[Pointer]
    var d1: Int
    var unknown128: Int
    var buf3: Option[Pointer]
    var d2: Int
    var unknown129: Int
    var buf4: Option[Pointer]
    var unknown130: Option[Pointer]
    var buf5: Option[Pointer]
    var d3: Int
    var unknown131: Int
    var buf6: Option[Pointer]
    var d4: Int
    var unknown132: Int
    var buf7: Option[Pointer]
    var d5: Int
    var unknown133: Int
    var buf8: Option[Pointer]
    var unknown134: Option[Pointer]
    var buf9: Option[Pointer]
    var d6: Int
    var unknown135: Int
    var buf10: Option[Pointer]
    var d7: Int
    var unknown136: Int
    var buf11: Option[Pointer]
    var d8: Int
    var unknown137: Int
    var buf12: Option[Pointer]
    var d9: Int
    var unknown138: Int
    var buf13: Option[Pointer]
    var d10: Int
    var unknown139: Int
    var buf14: Option[Pointer]
    var d11: Int
    var unknown140: Int
    var buf15: Option[Pointer]
    var d12: Int
    var unknown141: Int
    var buf16: Option[Pointer]
    var d13: Int
    var unknown142: Int
    var buf17: Option[Pointer]
    var d14: Int
    var unknown143: Int
    var buf18: Option[Pointer]
    var d15: Int
    var unknown144: Int
    var buf19: Option[Pointer]
    var d16: Int
    var unknown145: Int
    var buf20: Option[Pointer]
    var d17: Int
    var unknown146: Int
    var buf21: Option[Pointer]
    var unknown147: Option[Pointer]
    var buf22: Option[Pointer]
    var d18: Int
    var unknown148: Int
    var buf23: Option[Pointer]
    var d19: Int
    var unknown149: Int
    var buf24: Option[Pointer]
    var d20: Int
    var unknown150: Int
    var buf25: Option[Pointer]
    var d21: Int
    var unknown151: Int
    var buf26: Option[Pointer]
    var d22: Int
    var unknown152: Int
    var buf27: Option[Pointer]
    var d23: Int
    var unknown153: Int
    var buf28: Option[Pointer]
    var d24: Int
    var unknown154: Int
    var buf29: Option[Pointer]
    var d25: Int
    var unknown155: Int
    var buf30: Option[Pointer]
    var d26: Int
    var unknown156: Int
    var buf31: Option[Pointer]
    var d27: Int
    var unknown157: Int
    var buf32: Option[Pointer]
    var d28: Int
    var unknown158: Int
    var buf33: Option[Pointer]
    var d29: Int
    var unknown159: Int
    var buf34: Option[Pointer]
    var unknown160: Option[Pointer]
    var buf35: Option[Pointer]
    var d30: Int
    var unknown161: Int
    var buf36: Option[Pointer]
    var d31: Int
    var unknown162: Int
    var buf37: Option[Pointer]
    var d32: Int
    var unknown163: Int
    var buf38: Option[Pointer]
    var unknown164: Option[Pointer]
    var buf39: Option[Pointer]
    var d33: Int
    var unknown165: Int
    var buf40: Option[Pointer]
    var d34: Int
    var unknown166: Int
    var buf41: Option[Pointer]
    var d35: Int
    var unknown167: Int
    var buf42: Option[Pointer]
    var d36: Int
    var unknown168: Int
    var buf43: Option[Pointer]
    var d37: Int
    var unknown169: Int
    var buf44: Option[Pointer]
    var d38: Int
    var unknown170: Int
    var buf45: Option[Pointer]
    var d39: Int
    var unknown171: Int
    var buf46: Option[Pointer]
    var d40: Int
    var unknown172: Int
    var buf47: Option[Pointer]
    var d41: Int
    var unknown173: Int
    var buf48: Option[Pointer]
    var d42: Int
    var unknown174: Int
    var buf49: Option[Pointer]
    var d43: Int
    var unknown175: Int
    var buf50: Option[Pointer]
    var d44: Int
    var unknown176: Int
    var buf51: Option[Pointer]
    var unknown177: Option[Pointer]
    var buf52: Option[Pointer]
    var d45: Int
    var unknown178: Int
    var buf53: Option[Pointer]
    var d46: Int
    var unknown179: Int
    var buf54: Option[Pointer]
    var d47: Int
    var unknown180: Int
    var buf55: Option[Pointer]
    var d48: Int
    var unknown181: Int
    var buf56: Option[Pointer]
    var d49: Int
    var unknown182: Int
    var buf57: Option[Pointer]
    var d50: Int
    var unknown183: Int
    var buf58: Option[Pointer]
    var d51: Int
    var unknown184: Int
    var buf59: Option[Pointer]
    var d52: Int
    var unknown185: Int
    var buf60: Option[Pointer]
    var d53: Int
    var unknown186: Int
    var buf61: Option[Pointer]
    var d54: Int
    var unknown187: Int
    var buf62: Option[Pointer]
    var d55: Int
    var unknown188: Int
    var buf63: Option[Pointer]
    var d56: Int
    var unknown189: Int
    var tid1: Int
    var e: Bool
    var unknown190: Void
    var tid2: Int
    var e1: Bool
    var unknown191: Void
    var tid3: Int
    var e2: Bool
    var unknown192: Void
    var tid4: Int
    var e3: Bool
    var unknown193: Void
    var tid5: Int
    var e4: Bool
    var unknown194: Void
    var tid6: Int
    var e5: Bool
    var unknown195: Void
    var tid7: Int
    var e6: Bool
    var unknown196: Void
    var tid8: Int
    var e7: Bool
    var unknown197: Void
    var tid9: Int
    var e8: Bool
    var unknown198: Void
    var tid10: Int
    var e9: Bool
    var unknown199: Void
    var tid11: Int
    var e10: Bool
    var unknown200: Void
    var tid12: Int
    var e11: Bool
    var unknown201: Void
    var tid13: Int
    var e12: Bool
    var unknown202: Void
    var tid14: Int
    var e13: Bool
    var unknown203: Void
    var tid15: Int
    var e14: Bool
    var unknown204: Void
    var tid16: Int
    var e15: Bool
    var unknown205: Void
    var tid17: Int
    var e16: Bool
    var unknown206: Void
    var tid18: Int
    var e17: Bool
    var unknown207: Void
    var tid19: Int
    var e18: Bool
    var unknown208: Void
    var tid20: Int
    var e19: Bool
    var unknown209: Void
    var tid21: Int
    var e20: Bool
    var unknown210: Void
    var tid22: Int
    var e21: Bool
    var unknown211: Void
    var tid23: Int
    var e22: Bool
    var unknown212: Void
    var tid24: Int
    var e23: Bool
    var unknown213: Void
    var tid25: Int
    var e24: Bool
    var unknown214: Void
    var tid26: Int
    var e25: Bool
    var unknown215: Void
    var tid27: Int
    var e26: Bool
    var unknown216: Void
    var tid28: Int
    var e27: Bool
    var unknown217: Void
    var tid29: Int
    var e28: Bool
    var unknown218: Void
    var tid30: Int
    var e29: Bool
    var unknown219: Void
    var tid31: Int
    var e30: Bool
    var unknown220: Void
    var tid32: Int
    var e31: Bool
    var unknown221: Void
    var tid33: Int
    var e32: Bool
    var unknown222: Void
    var tid34: Int
    var e33: Bool
    var unknown223: Void
    var tid35: Int
    var e34: Bool
    var unknown224: Void
    var tid36: Int
    var e35: Bool
    var unknown225: Void
    var tid37: Int
    var e36: Bool
    var unknown226: Void
    var tid38: Int
    var e37: Bool
    var unknown227: Void
    var tid39: Int
    var e38: Bool
    var unknown228: Void
    var tid40: Int
    var e39: Bool
    var unknown229: Void
    var tid41: Int
    var e40: Bool
    var unknown230: Void
    var tid42: Int
    var e41: Bool
    var unknown231: Void
    var tid43: Int
    var e42: Bool
    var unknown232: Void
    var tid44: Int
    var e43: Bool
    var unknown233: Void
    var tid45: Int
    var e44: Bool
    var unknown234: Void
    var tid46: Int
    var e45: Bool
    var unknown235: Void
    var tid47: Int
    var e46: Bool
    var unknown236: Void
    var tid48: Int
    var e47: Bool
    var unknown237: Void
    var tid49: Int
    var e48: Bool
    var unknown238: Void
    var tid50: Int
    var e49: Bool
    var unknown239: Void
    var tid51: Int
    var e50: Bool
    var unknown240: Void
    var tid52: Int
    var e51: Bool
    var unknown241: Void
    var tid53: Int
    var e52: Bool
    var unknown242: Void
    var tid54: Int
    var e53: Bool
    var unknown243: Void
    var tid55: Int
    var e54: Bool
    var unknown244: Void
    var tid56: Int
    var e55: Bool
    var unknown245: Void
    var tid57: Int
    var e56: Bool
    var unknown246: Void
    var flatten: Option[Pointer]
    var flatten1: Option[Pointer]
    var flatten2: Int
    var flatten3: Int
    var flatten4: Int
    var flatten5: Int
    var flatten6: Int
    var flatten7: Int
    var flatten8: Int
    var flatten9: Int
    var flatten10: Int
    var flatten11: Option[Pointer]
    var flatten12: Option[Pointer]
    var flatten13: Int
    var flatten14: Int
    var flatten15: Int
    var flatten16: Int
    var flatten17: Int
    var flatten18: Int
    var flatten19: Int
    var flatten20: Int
    var flatten21: Int
    var flatten22: Option[Pointer]
    var flatten23: Option[Pointer]
    var flatten24: Int
    var flatten25: Int
    var flatten26: Int
    var flatten27: Int
    var flatten28: Int
    var flatten29: Int
    var flatten30: Int
    var flatten31: Int
    var flatten32: Int
    var flatten33: Int
    var flatten34: Int
    var flatten35: Int
    var flatten36: Int
    var flatten37: Int
    var flatten38: Int
    var flatten39: Int
    var flatten40: Int
    var flatten41: Int
    var flatten42: Int
    var flatten43: Int
    var flatten44: Int
    var flatten45: Int
    var flatten46: Int
    var flatten47: Int
    var flatten48: Int
    var flatten49: Int
    var flatten50: Int
    var flatten51: Int
    var flatten52: Int
    var flatten53: Int
    var flatten54: Int
    var flatten55: Int
    var flatten56: Int
    var flatten57: Int
    var flatten58: Int
    var flatten59: Int
    var flatten60: Option[Pointer]
    var flatten61: Option[Pointer]
    var flatten62: Int
    var flatten63: Int
    var flatten64: Int
    var flatten65: Int
    var flatten66: Int
    var flatten67: Int
    var flatten68: Int
    var flatten69: Int
    var flatten70: Int
    var flatten71: Int
    var flatten72: Int
    var flatten73: Int
    var flatten74: Int
    var flatten75: Int
    var flatten76: Int
    var flatten77: Int
    var flatten78: Int
    var flatten79: Int
    var flatten80: Int
    var flatten81: Int
    var flatten82: Int
    var flatten83: Int
    var flatten84: Int
    var flatten85: Int
    var flatten86: Int
    var flatten87: Int
    var flatten88: Int
    var flatten89: Int
    var flatten90: Int
    var flatten91: Int
    var flatten92: Int
    var flatten93: Int
    var flatten94: Int
    var flatten95: Int
    var flatten96: Int
    var flatten97: Int
    var flatten98: Option[Pointer]
    var flatten99: Option[Pointer]
    var flatten100: Int
    var flatten101: Int
    var flatten102: Int
    var flatten103: Int
    var flatten104: Int
    var flatten105: Int
    var flatten106: Int
    var flatten107: Int
    var flatten108: Int
    var flatten109: Option[Pointer]
    var flatten110: Option[Pointer]
    var flatten111: Int
    var flatten112: Int
    var flatten113: Int
    var flatten114: Int
    var flatten115: Int
    var flatten116: Int
    var flatten117: Int
    var flatten118: Int
    var flatten119: Int
    var flatten120: Int
    var flatten121: Int
    var flatten122: Int
    var flatten123: Int
    var flatten124: Int
    var flatten125: Int
    var flatten126: Int
    var flatten127: Int
    var flatten128: Int
    var flatten129: Int
    var flatten130: Int
    var flatten131: Int
    var flatten132: Int
    var flatten133: Int
    var flatten134: Int
    var flatten135: Int
    var flatten136: Int
    var flatten137: Int
    var flatten138: Int
    var flatten139: Int
    var flatten140: Int
    var flatten141: Int
    var flatten142: Int
    var flatten143: Int
    var flatten144: Int
    var flatten145: Int
    var flatten146: Int
    var flatten147: Option[Pointer]
    var flatten148: Option[Pointer]
    var flatten149: Int
    var flatten150: Int
    var flatten151: Int
    var flatten152: Int
    var flatten153: Int
    var flatten154: Int
    var flatten155: Int
    var flatten156: Int
    var flatten157: Int
    var flatten158: Int
    var flatten159: Int
    var flatten160: Int
    var flatten161: Int
    var flatten162: Int
    var flatten163: Int
    var flatten164: Int
    var flatten165: Int
    var flatten166: Int
    var flatten167: Int
    var flatten168: Int
    var flatten169: Int
    var flatten170: Int
    var flatten171: Int
    var flatten172: Int
    var flatten173: Int
    var flatten174: Int
    var flatten175: Int
    var flatten176: Int
    var flatten177: Int
    var flatten178: Int
    var flatten179: Int
    var flatten180: Int
    var flatten181: Int
    var flatten182: Int
    var flatten183: Int
    var flatten184: Int
    var flatten185: Bool
    var flatten186: Bool
    var flatten187: Bool
    var flatten188: Bool
    var flatten189: Bool
    var flatten190: Bool
    var flatten191: Bool
    var flatten192: Bool
    var flatten193: Bool
    var flatten194: Bool
    var flatten195: Bool
    var flatten196: Bool
    var flatten197: Bool
    var flatten198: Bool
    var flatten199: Bool
    var flatten200: Bool
    var flatten201: Bool
    var flatten202: Bool
    var flatten203: Bool
    var flatten204: Bool
    var flatten205: Bool
    var flatten206: Bool
    var flatten207: Bool
    var flatten208: Bool
    var flatten209: Bool
    var flatten210: Bool
    var flatten211: Bool
    var flatten212: Bool
    var flatten213: Bool
    var flatten214: Bool
    var flatten215: Bool
    var flatten216: Bool
    var flatten217: Bool
    var flatten218: Bool
    var flatten219: Bool
    var flatten220: Bool
    var flatten221: Bool
    var flatten222: Bool
    var flatten223: Bool
    var flatten224: Bool
    var flatten225: Bool
    var flatten226: Bool
    var flatten227: Bool
    var flatten228: Bool
    var flatten229: Bool
    var flatten230: Bool
    var flatten231: Bool
    var flatten232: Bool
    var flatten233: Bool
    var flatten234: Bool
    var flatten235: Bool
    var flatten236: Bool
    var flatten237: Bool
    var flatten238: Bool
    var flatten239: Bool
    var flatten240: Bool
    var flatten241: Bool
    var flatten242: Int
    var res1: Option[Pointer]
    var flatten243: Option[Pointer]
    var res2: Void
    var flatten244: Int
    var res3: Option[Pointer]
    var flatten245: Option[Pointer]
    var res4: Void
    var flatten246: Int
    var res5: Option[Pointer]
    var flatten247: Option[Pointer]
    var res6: Void
    var flatten248: Int
    var res7: Option[Pointer]
    var flatten249: Option[Pointer]
    var res8: Void
    var flatten250: Int
    var res9: Option[Pointer]
    var flatten251: Option[Pointer]
    var res10: Void
    var flatten252: Int
    var res11: Option[Pointer]
    var flatten253: Option[Pointer]
    var res12: Void
    var flatten254: Int
    var res13: Option[Pointer]
    var flatten255: Option[Pointer]
    var res14: Void
    var flatten256: Int
    var res15: Option[Pointer]
    var flatten257: Option[Pointer]
    var res16: Void
    var flatten258: Int
    var flatten259: Int
    var flatten260: Perm
    var flatten261: Perm
    var flatten262: Perm
    var flatten263: Perm
    var flatten264: Perm
    var flatten265: Perm
    var flatten266: Perm
    var flatten267: Perm
    var flatten268: Perm
    var flatten269: Perm
    var flatten270: Perm
    var flatten271: Perm
    var flatten272: Perm
    var flatten273: Perm
    var flatten274: Perm
    var flatten275: Perm
    var flatten276: Int
    var flatten277: Int
    var flatten278: Int
    var flatten279: Int
    var flatten280: Bool
    var flatten281: Bool
    var flatten282: Int
    var flatten283: Int
    var flatten284: Int
    var flatten285: Bool
    var flatten286: Bool
    var flatten287: Int
    var flatten288: Int
    var flatten289: Int
    var flatten290: Bool
    var flatten291: Bool
    var flatten292: Int
    var flatten293: Int
    var flatten294: Int
    var flatten295: Int
    var flatten296: Perm
    var flatten297: Perm
    var flatten298: Perm
    var flatten299: Int
    var flatten300: Int
    var flatten301: Perm
    var flatten302: Perm
    var flatten303: Perm
    var flatten304: Perm
    var flatten305: Perm
    var flatten306: Perm
    var flatten307: Perm
    var flatten308: Perm
    var flatten309: Perm
    var flatten310: Perm
    var flatten311: Perm
    var flatten312: Perm
    var flatten313: Perm
    var flatten314: Perm
    var flatten315: Perm
    var flatten316: Bool
    var flatten317: Bool
    var flatten318: Bool
    var flatten319: Perm
    var flatten320: Perm
    var flatten321: Perm
    var flatten322: Perm
    var flatten323: Perm
    var flatten324: Perm
    var flatten325: Perm
    var flatten326: Perm
    var flatten327: Perm
    var flatten328: Perm
    var flatten329: Perm
    var flatten330: Perm
    var flatten331: Perm
    var flatten332: Perm
    var flatten333: Perm
    var flatten334: Perm
    var flatten335: Perm
    var flatten336: Perm
    var flatten337: Perm
    var flatten338: Perm
    var flatten339: Perm
    var flatten340: Perm
    var flatten341: Perm
    var flatten342: Perm
    var flatten343: Perm
    var flatten344: Perm
    var flatten345: Perm
    var flatten346: Perm
    var flatten347: Perm
    var flatten348: Perm
    var flatten349: Perm
    var flatten350: Perm
    var flatten351: Perm
    var flatten352: Perm
    var flatten353: Perm
    var flatten354: Perm
    var flatten355: Perm
    var flatten356: Perm
    var flatten357: Perm
    var flatten358: Perm
    var flatten359: Perm
    var flatten360: Perm
    var flatten361: Perm
    var flatten362: Perm
    var flatten363: Perm
    var flatten364: Perm
    var flatten365: Int
    var flatten366: Perm
    var res17: Void
    var res18: Void
    var res19: Void
    var res20: Void
    var res21: Void
    var res22: Void
    var res23: Void
    var res24: Void
    var res25: Void
    var res26: Void
    var res27: Void
    var res28: Void
    var res29: Void
    var res30: Void
    var res31: Void
    var res32: Void
    var flatten367: Int
    var excbeforeloop: Ref
    var excbeforeloop1: Ref
    var excbeforeloop2: Ref
    var excbeforeloop3: Ref
    var excbeforeloop4: Ref
    exc := null
    buf := ant1Buffer
    flatten := ptrDeref(ptrAdd(optGet2(buf), 0)).ref.host1
    unknown126 := flatten
    goto UNKNOWN
    label UNKNOWN
    flatten1 := unknown126
    ant1 := flatten1
    buf1 := ant1Buffer
    flatten2 := 0
    d := flatten2
    flatten3 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf1), 0)).ref.dim1),
      d)).ref.min
    unknown127 := flatten3
    goto UNKNOWN1
    label UNKNOWN1
    flatten4 := unknown127
    ant1Min0 := flatten4
    buf2 := ant1Buffer
    flatten5 := 0
    d1 := flatten5
    flatten6 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf2), 0)).ref.dim1),
      d1)).ref.extent
    unknown128 := flatten6
    goto UNKNOWN2
    label UNKNOWN2
    flatten7 := unknown128
    ant1Extent0 := flatten7
    buf3 := ant1Buffer
    flatten8 := 0
    d2 := flatten8
    flatten9 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf3), 0)).ref.dim1),
      d2)).ref.stride
    unknown129 := flatten9
    goto UNKNOWN3
    label UNKNOWN3
    flatten10 := unknown129
    ant1Stride0 := flatten10
    buf4 := ant2Buffer
    flatten11 := ptrDeref(ptrAdd(optGet2(buf4), 0)).ref.host1
    unknown130 := flatten11
    goto UNKNOWN4
    label UNKNOWN4
    flatten12 := unknown130
    ant2 := flatten12
    buf5 := ant2Buffer
    flatten13 := 0
    d3 := flatten13
    flatten14 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf5), 0)).ref.dim1),
      d3)).ref.min
    unknown131 := flatten14
    goto UNKNOWN5
    label UNKNOWN5
    flatten15 := unknown131
    ant2Min0 := flatten15
    buf6 := ant2Buffer
    flatten16 := 0
    d4 := flatten16
    flatten17 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf6), 0)).ref.dim1),
      d4)).ref.extent
    unknown132 := flatten17
    goto UNKNOWN6
    label UNKNOWN6
    flatten18 := unknown132
    ant2Extent0 := flatten18
    buf7 := ant2Buffer
    flatten19 := 0
    d5 := flatten19
    flatten20 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf7), 0)).ref.dim1),
      d5)).ref.stride
    unknown133 := flatten20
    goto UNKNOWN7
    label UNKNOWN7
    flatten21 := unknown133
    ant2Stride0 := flatten21
    buf8 := modelBuffer
    flatten22 := ptrDeref(ptrAdd(optGet2(buf8), 0)).ref.host2
    unknown134 := flatten22
    goto UNKNOWN8
    label UNKNOWN8
    flatten23 := unknown134
    model := flatten23
    buf9 := modelBuffer
    flatten24 := 0
    d6 := flatten24
    flatten25 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf9), 0)).ref.dim2),
      d6)).ref.min
    unknown135 := flatten25
    goto UNKNOWN9
    label UNKNOWN9
    flatten26 := unknown135
    modelMin0 := flatten26
    buf10 := modelBuffer
    flatten27 := 0
    d7 := flatten27
    flatten28 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf10), 0)).ref.dim2),
      d7)).ref.extent
    unknown136 := flatten28
    goto UNKNOWN10
    label UNKNOWN10
    flatten29 := unknown136
    modelExtent0 := flatten29
    buf11 := modelBuffer
    flatten30 := 0
    d8 := flatten30
    flatten31 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf11), 0)).ref.dim2),
      d8)).ref.stride
    unknown137 := flatten31
    goto UNKNOWN11
    label UNKNOWN11
    flatten32 := unknown137
    modelStride0 := flatten32
    buf12 := modelBuffer
    flatten33 := 1
    d9 := flatten33
    flatten34 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf12), 0)).ref.dim2),
      d9)).ref.min
    unknown138 := flatten34
    goto UNKNOWN12
    label UNKNOWN12
    flatten35 := unknown138
    modelMin1 := flatten35
    buf13 := modelBuffer
    flatten36 := 1
    d10 := flatten36
    flatten37 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf13), 0)).ref.dim2),
      d10)).ref.extent
    unknown139 := flatten37
    goto UNKNOWN13
    label UNKNOWN13
    flatten38 := unknown139
    modelExtent1 := flatten38
    buf14 := modelBuffer
    flatten39 := 1
    d11 := flatten39
    flatten40 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf14), 0)).ref.dim2),
      d11)).ref.stride
    unknown140 := flatten40
    goto UNKNOWN14
    label UNKNOWN14
    flatten41 := unknown140
    modelStride1 := flatten41
    buf15 := modelBuffer
    flatten42 := 2
    d12 := flatten42
    flatten43 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf15), 0)).ref.dim2),
      d12)).ref.min
    unknown141 := flatten43
    goto UNKNOWN15
    label UNKNOWN15
    flatten44 := unknown141
    modelMin2 := flatten44
    buf16 := modelBuffer
    flatten45 := 2
    d13 := flatten45
    flatten46 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf16), 0)).ref.dim2),
      d13)).ref.extent
    unknown142 := flatten46
    goto UNKNOWN16
    label UNKNOWN16
    flatten47 := unknown142
    modelExtent2 := flatten47
    buf17 := modelBuffer
    flatten48 := 2
    d14 := flatten48
    flatten49 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf17), 0)).ref.dim2),
      d14)).ref.stride
    unknown143 := flatten49
    goto UNKNOWN17
    label UNKNOWN17
    flatten50 := unknown143
    modelStride2 := flatten50
    buf18 := modelBuffer
    flatten51 := 3
    d15 := flatten51
    flatten52 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf18), 0)).ref.dim2),
      d15)).ref.min
    unknown144 := flatten52
    goto UNKNOWN18
    label UNKNOWN18
    flatten53 := unknown144
    modelMin3 := flatten53
    buf19 := modelBuffer
    flatten54 := 3
    d16 := flatten54
    flatten55 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf19), 0)).ref.dim2),
      d16)).ref.extent
    unknown145 := flatten55
    goto UNKNOWN19
    label UNKNOWN19
    flatten56 := unknown145
    modelExtent3 := flatten56
    buf20 := modelBuffer
    flatten57 := 3
    d17 := flatten57
    flatten58 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf20), 0)).ref.dim2),
      d17)).ref.stride
    unknown146 := flatten58
    goto UNKNOWN20
    label UNKNOWN20
    flatten59 := unknown146
    modelStride3 := flatten59
    buf21 := solBuffer
    flatten60 := ptrDeref(ptrAdd(optGet2(buf21), 0)).ref.host
    unknown147 := flatten60
    goto UNKNOWN21
    label UNKNOWN21
    flatten61 := unknown147
    sol := flatten61
    buf22 := solBuffer
    flatten62 := 0
    d18 := flatten62
    flatten63 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf22), 0)).ref.dim),
      d18)).ref.min
    unknown148 := flatten63
    goto UNKNOWN22
    label UNKNOWN22
    flatten64 := unknown148
    solMin0 := flatten64
    buf23 := solBuffer
    flatten65 := 0
    d19 := flatten65
    flatten66 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf23), 0)).ref.dim),
      d19)).ref.extent
    unknown149 := flatten66
    goto UNKNOWN23
    label UNKNOWN23
    flatten67 := unknown149
    solExtent0 := flatten67
    buf24 := solBuffer
    flatten68 := 0
    d20 := flatten68
    flatten69 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf24), 0)).ref.dim),
      d20)).ref.stride
    unknown150 := flatten69
    goto UNKNOWN24
    label UNKNOWN24
    flatten70 := unknown150
    solStride0 := flatten70
    buf25 := solBuffer
    flatten71 := 1
    d21 := flatten71
    flatten72 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf25), 0)).ref.dim),
      d21)).ref.min
    unknown151 := flatten72
    goto UNKNOWN25
    label UNKNOWN25
    flatten73 := unknown151
    solMin1 := flatten73
    buf26 := solBuffer
    flatten74 := 1
    d22 := flatten74
    flatten75 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf26), 0)).ref.dim),
      d22)).ref.extent
    unknown152 := flatten75
    goto UNKNOWN26
    label UNKNOWN26
    flatten76 := unknown152
    solExtent1 := flatten76
    buf27 := solBuffer
    flatten77 := 1
    d23 := flatten77
    flatten78 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf27), 0)).ref.dim),
      d23)).ref.stride
    unknown153 := flatten78
    goto UNKNOWN27
    label UNKNOWN27
    flatten79 := unknown153
    solStride1 := flatten79
    buf28 := solBuffer
    flatten80 := 2
    d24 := flatten80
    flatten81 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf28), 0)).ref.dim),
      d24)).ref.min
    unknown154 := flatten81
    goto UNKNOWN28
    label UNKNOWN28
    flatten82 := unknown154
    solMin2 := flatten82
    buf29 := solBuffer
    flatten83 := 2
    d25 := flatten83
    flatten84 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf29), 0)).ref.dim),
      d25)).ref.extent
    unknown155 := flatten84
    goto UNKNOWN29
    label UNKNOWN29
    flatten85 := unknown155
    solExtent2 := flatten85
    buf30 := solBuffer
    flatten86 := 2
    d26 := flatten86
    flatten87 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf30), 0)).ref.dim),
      d26)).ref.stride
    unknown156 := flatten87
    goto UNKNOWN30
    label UNKNOWN30
    flatten88 := unknown156
    solStride2 := flatten88
    buf31 := solBuffer
    flatten89 := 3
    d27 := flatten89
    flatten90 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf31), 0)).ref.dim),
      d27)).ref.min
    unknown157 := flatten90
    goto UNKNOWN31
    label UNKNOWN31
    flatten91 := unknown157
    solMin3 := flatten91
    buf32 := solBuffer
    flatten92 := 3
    d28 := flatten92
    flatten93 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf32), 0)).ref.dim),
      d28)).ref.extent
    unknown158 := flatten93
    goto UNKNOWN32
    label UNKNOWN32
    flatten94 := unknown158
    solExtent3 := flatten94
    buf33 := solBuffer
    flatten95 := 3
    d29 := flatten95
    flatten96 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf33), 0)).ref.dim),
      d29)).ref.stride
    unknown159 := flatten96
    goto UNKNOWN33
    label UNKNOWN33
    flatten97 := unknown159
    solStride3 := flatten97
    buf34 := solutionMapBuffer
    flatten98 := ptrDeref(ptrAdd(optGet2(buf34), 0)).ref.host1
    unknown160 := flatten98
    goto UNKNOWN34
    label UNKNOWN34
    flatten99 := unknown160
    solutionMap := flatten99
    buf35 := solutionMapBuffer
    flatten100 := 0
    d30 := flatten100
    flatten101 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf35), 0)).ref.dim1),
      d30)).ref.min
    unknown161 := flatten101
    goto UNKNOWN35
    label UNKNOWN35
    flatten102 := unknown161
    solutionMapMin0 := flatten102
    buf36 := solutionMapBuffer
    flatten103 := 0
    d31 := flatten103
    flatten104 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf36), 0)).ref.dim1),
      d31)).ref.extent
    unknown162 := flatten104
    goto UNKNOWN36
    label UNKNOWN36
    flatten105 := unknown162
    solutionMapExtent0 := flatten105
    buf37 := solutionMapBuffer
    flatten106 := 0
    d32 := flatten106
    flatten107 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf37), 0)).ref.dim1),
      d32)).ref.stride
    unknown163 := flatten107
    goto UNKNOWN37
    label UNKNOWN37
    flatten108 := unknown163
    solutionMapStride0 := flatten108
    buf38 := vResInBuffer
    flatten109 := ptrDeref(ptrAdd(optGet2(buf38), 0)).ref.host2
    unknown164 := flatten109
    goto UNKNOWN38
    label UNKNOWN38
    flatten110 := unknown164
    vResIn := flatten110
    buf39 := vResInBuffer
    flatten111 := 0
    d33 := flatten111
    flatten112 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf39), 0)).ref.dim2),
      d33)).ref.min
    unknown165 := flatten112
    goto UNKNOWN39
    label UNKNOWN39
    flatten113 := unknown165
    vResInMin0 := flatten113
    buf40 := vResInBuffer
    flatten114 := 0
    d34 := flatten114
    flatten115 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf40), 0)).ref.dim2),
      d34)).ref.extent
    unknown166 := flatten115
    goto UNKNOWN40
    label UNKNOWN40
    flatten116 := unknown166
    vResInExtent0 := flatten116
    buf41 := vResInBuffer
    flatten117 := 0
    d35 := flatten117
    flatten118 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf41), 0)).ref.dim2),
      d35)).ref.stride
    unknown167 := flatten118
    goto UNKNOWN41
    label UNKNOWN41
    flatten119 := unknown167
    vResInStride0 := flatten119
    buf42 := vResInBuffer
    flatten120 := 1
    d36 := flatten120
    flatten121 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf42), 0)).ref.dim2),
      d36)).ref.min
    unknown168 := flatten121
    goto UNKNOWN42
    label UNKNOWN42
    flatten122 := unknown168
    vResInMin1 := flatten122
    buf43 := vResInBuffer
    flatten123 := 1
    d37 := flatten123
    flatten124 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf43), 0)).ref.dim2),
      d37)).ref.extent
    unknown169 := flatten124
    goto UNKNOWN43
    label UNKNOWN43
    flatten125 := unknown169
    vResInExtent1 := flatten125
    buf44 := vResInBuffer
    flatten126 := 1
    d38 := flatten126
    flatten127 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf44), 0)).ref.dim2),
      d38)).ref.stride
    unknown170 := flatten127
    goto UNKNOWN44
    label UNKNOWN44
    flatten128 := unknown170
    vResInStride1 := flatten128
    buf45 := vResInBuffer
    flatten129 := 2
    d39 := flatten129
    flatten130 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf45), 0)).ref.dim2),
      d39)).ref.min
    unknown171 := flatten130
    goto UNKNOWN45
    label UNKNOWN45
    flatten131 := unknown171
    vResInMin2 := flatten131
    buf46 := vResInBuffer
    flatten132 := 2
    d40 := flatten132
    flatten133 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf46), 0)).ref.dim2),
      d40)).ref.extent
    unknown172 := flatten133
    goto UNKNOWN46
    label UNKNOWN46
    flatten134 := unknown172
    vResInExtent2 := flatten134
    buf47 := vResInBuffer
    flatten135 := 2
    d41 := flatten135
    flatten136 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf47), 0)).ref.dim2),
      d41)).ref.stride
    unknown173 := flatten136
    goto UNKNOWN47
    label UNKNOWN47
    flatten137 := unknown173
    vResInStride2 := flatten137
    buf48 := vResInBuffer
    flatten138 := 3
    d42 := flatten138
    flatten139 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf48), 0)).ref.dim2),
      d42)).ref.min
    unknown174 := flatten139
    goto UNKNOWN48
    label UNKNOWN48
    flatten140 := unknown174
    vResInMin3 := flatten140
    buf49 := vResInBuffer
    flatten141 := 3
    d43 := flatten141
    flatten142 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf49), 0)).ref.dim2),
      d43)).ref.extent
    unknown175 := flatten142
    goto UNKNOWN49
    label UNKNOWN49
    flatten143 := unknown175
    vResInExtent3 := flatten143
    buf50 := vResInBuffer
    flatten144 := 3
    d44 := flatten144
    flatten145 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf50), 0)).ref.dim2),
      d44)).ref.stride
    unknown176 := flatten145
    goto UNKNOWN50
    label UNKNOWN50
    flatten146 := unknown176
    vResInStride3 := flatten146
    buf51 := vResOutBuffer
    flatten147 := ptrDeref(ptrAdd(optGet2(buf51), 0)).ref.host2
    unknown177 := flatten147
    goto UNKNOWN51
    label UNKNOWN51
    flatten148 := unknown177
    vResOut := flatten148
    buf52 := vResOutBuffer
    flatten149 := 0
    d45 := flatten149
    flatten150 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf52), 0)).ref.dim2),
      d45)).ref.min
    unknown178 := flatten150
    goto UNKNOWN52
    label UNKNOWN52
    flatten151 := unknown178
    vResOutMin0 := flatten151
    buf53 := vResOutBuffer
    flatten152 := 0
    d46 := flatten152
    flatten153 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf53), 0)).ref.dim2),
      d46)).ref.extent
    unknown179 := flatten153
    goto UNKNOWN53
    label UNKNOWN53
    flatten154 := unknown179
    vResOutExtent0 := flatten154
    buf54 := vResOutBuffer
    flatten155 := 0
    d47 := flatten155
    flatten156 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf54), 0)).ref.dim2),
      d47)).ref.stride
    unknown180 := flatten156
    goto UNKNOWN54
    label UNKNOWN54
    flatten157 := unknown180
    vResOutStride0 := flatten157
    buf55 := vResOutBuffer
    flatten158 := 1
    d48 := flatten158
    flatten159 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf55), 0)).ref.dim2),
      d48)).ref.min
    unknown181 := flatten159
    goto UNKNOWN55
    label UNKNOWN55
    flatten160 := unknown181
    vResOutMin1 := flatten160
    buf56 := vResOutBuffer
    flatten161 := 1
    d49 := flatten161
    flatten162 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf56), 0)).ref.dim2),
      d49)).ref.extent
    unknown182 := flatten162
    goto UNKNOWN56
    label UNKNOWN56
    flatten163 := unknown182
    vResOutExtent1 := flatten163
    buf57 := vResOutBuffer
    flatten164 := 1
    d50 := flatten164
    flatten165 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf57), 0)).ref.dim2),
      d50)).ref.stride
    unknown183 := flatten165
    goto UNKNOWN57
    label UNKNOWN57
    flatten166 := unknown183
    vResOutStride1 := flatten166
    buf58 := vResOutBuffer
    flatten167 := 2
    d51 := flatten167
    flatten168 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf58), 0)).ref.dim2),
      d51)).ref.min
    unknown184 := flatten168
    goto UNKNOWN58
    label UNKNOWN58
    flatten169 := unknown184
    vResOutMin2 := flatten169
    buf59 := vResOutBuffer
    flatten170 := 2
    d52 := flatten170
    flatten171 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf59), 0)).ref.dim2),
      d52)).ref.extent
    unknown185 := flatten171
    goto UNKNOWN59
    label UNKNOWN59
    flatten172 := unknown185
    vResOutExtent2 := flatten172
    buf60 := vResOutBuffer
    flatten173 := 2
    d53 := flatten173
    flatten174 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf60), 0)).ref.dim2),
      d53)).ref.stride
    unknown186 := flatten174
    goto UNKNOWN60
    label UNKNOWN60
    flatten175 := unknown186
    vResOutStride2 := flatten175
    buf61 := vResOutBuffer
    flatten176 := 3
    d54 := flatten176
    flatten177 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf61), 0)).ref.dim2),
      d54)).ref.min
    unknown187 := flatten177
    goto UNKNOWN61
    label UNKNOWN61
    flatten178 := unknown187
    vResOutMin3 := flatten178
    buf62 := vResOutBuffer
    flatten179 := 3
    d55 := flatten179
    flatten180 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf62), 0)).ref.dim2),
      d55)).ref.extent
    unknown188 := flatten180
    goto UNKNOWN62
    label UNKNOWN62
    flatten181 := unknown188
    vResOutExtent3 := flatten181
    buf63 := vResOutBuffer
    flatten182 := 3
    d56 := flatten182
    flatten183 := ptrDeref(ptrAdd(optGet2(ptrDeref(ptrAdd(optGet2(buf63), 0)).ref.dim2),
      d56)).ref.stride
    unknown189 := flatten183
    goto UNKNOWN63
    label UNKNOWN63
    flatten184 := unknown189
    vResOutStride3 := flatten184
    tid1 := tid
    flatten185 := ant1Stride0 == 1
    e := flatten185
    label UNKNOWN64
    tid2 := tid
    flatten186 := ant1Min0 == 0
    e1 := flatten186
    label UNKNOWN65
    tid3 := tid
    flatten187 := ant1Extent0 == 230930
    e2 := flatten187
    label UNKNOWN66
    tid4 := tid
    flatten188 := ant2Stride0 == 1
    e3 := flatten188
    label UNKNOWN67
    tid5 := tid
    flatten189 := ant2Min0 == 0
    e4 := flatten189
    label UNKNOWN68
    tid6 := tid
    flatten190 := ant2Extent0 == 230930
    e5 := flatten190
    label UNKNOWN69
    tid7 := tid
    flatten191 := modelStride0 == 1
    e6 := flatten191
    label UNKNOWN70
    tid8 := tid
    flatten192 := modelMin0 == 0
    e7 := flatten192
    label UNKNOWN71
    tid9 := tid
    flatten193 := modelExtent0 == 2
    e8 := flatten193
    label UNKNOWN72
    tid10 := tid
    flatten194 := modelStride1 == 2
    e9 := flatten194
    label UNKNOWN73
    tid11 := tid
    flatten195 := modelMin1 == 0
    e10 := flatten195
    label UNKNOWN74
    tid12 := tid
    flatten196 := modelExtent1 == 2
    e11 := flatten196
    label UNKNOWN75
    tid13 := tid
    flatten197 := modelStride2 == 4
    e12 := flatten197
    label UNKNOWN76
    tid14 := tid
    flatten198 := modelMin2 == 0
    e13 := flatten198
    label UNKNOWN77
    tid15 := tid
    flatten199 := modelExtent2 == 2
    e14 := flatten199
    label UNKNOWN78
    tid16 := tid
    flatten200 := modelStride3 == 8
    e15 := flatten200
    label UNKNOWN79
    tid17 := tid
    flatten201 := modelMin3 == 0
    e16 := flatten201
    label UNKNOWN80
    tid18 := tid
    flatten202 := modelExtent3 == 230930
    e17 := flatten202
    label UNKNOWN81
    tid19 := tid
    flatten203 := solStride0 == 1
    e18 := flatten203
    label UNKNOWN82
    tid20 := tid
    flatten204 := solMin0 == 0
    e19 := flatten204
    label UNKNOWN83
    tid21 := tid
    flatten205 := solExtent0 == 2
    e20 := flatten205
    label UNKNOWN84
    tid22 := tid
    flatten206 := solStride1 == 2
    e21 := flatten206
    label UNKNOWN85
    tid23 := tid
    flatten207 := solMin1 == 0
    e22 := flatten207
    label UNKNOWN86
    tid24 := tid
    flatten208 := solExtent1 == 2
    e23 := flatten208
    label UNKNOWN87
    tid25 := tid
    flatten209 := solStride2 == 4
    e24 := flatten209
    label UNKNOWN88
    tid26 := tid
    flatten210 := solMin2 == 0
    e25 := flatten210
    label UNKNOWN89
    tid27 := tid
    flatten211 := solExtent2 == 8
    e26 := flatten211
    label UNKNOWN90
    tid28 := tid
    flatten212 := solStride3 == 32
    e27 := flatten212
    label UNKNOWN91
    tid29 := tid
    flatten213 := solMin3 == 0
    e28 := flatten213
    label UNKNOWN92
    tid30 := tid
    flatten214 := solExtent3 == 50
    e29 := flatten214
    label UNKNOWN93
    tid31 := tid
    flatten215 := solutionMapStride0 == 1
    e30 := flatten215
    label UNKNOWN94
    tid32 := tid
    flatten216 := solutionMapMin0 == 0
    e31 := flatten216
    label UNKNOWN95
    tid33 := tid
    flatten217 := solutionMapExtent0 == 230930
    e32 := flatten217
    label UNKNOWN96
    tid34 := tid
    flatten218 := vResInStride0 == 1
    e33 := flatten218
    label UNKNOWN97
    tid35 := tid
    flatten219 := vResInMin0 == 0
    e34 := flatten219
    label UNKNOWN98
    tid36 := tid
    flatten220 := vResInExtent0 == 2
    e35 := flatten220
    label UNKNOWN99
    tid37 := tid
    flatten221 := vResInStride1 == 2
    e36 := flatten221
    label UNKNOWN100
    tid38 := tid
    flatten222 := vResInMin1 == 0
    e37 := flatten222
    label UNKNOWN101
    tid39 := tid
    flatten223 := vResInExtent1 == 2
    e38 := flatten223
    label UNKNOWN102
    tid40 := tid
    flatten224 := vResInStride2 == 4
    e39 := flatten224
    label UNKNOWN103
    tid41 := tid
    flatten225 := vResInMin2 == 0
    e40 := flatten225
    label UNKNOWN104
    tid42 := tid
    flatten226 := vResInExtent2 == 2
    e41 := flatten226
    label UNKNOWN105
    tid43 := tid
    flatten227 := vResInStride3 == 8
    e42 := flatten227
    label UNKNOWN106
    tid44 := tid
    flatten228 := vResInMin3 == 0
    e43 := flatten228
    label UNKNOWN107
    tid45 := tid
    flatten229 := vResInExtent3 == 230930
    e44 := flatten229
    label UNKNOWN108
    tid46 := tid
    flatten230 := vResOutStride0 == 1
    e45 := flatten230
    label UNKNOWN109
    tid47 := tid
    flatten231 := vResOutMin0 == 0
    e46 := flatten231
    label UNKNOWN110
    tid48 := tid
    flatten232 := vResOutExtent0 == 2
    e47 := flatten232
    label UNKNOWN111
    tid49 := tid
    flatten233 := vResOutStride1 == 2
    e48 := flatten233
    label UNKNOWN112
    tid50 := tid
    flatten234 := vResOutMin1 == 0
    e49 := flatten234
    label UNKNOWN113
    tid51 := tid
    flatten235 := vResOutExtent1 == 2
    e50 := flatten235
    label UNKNOWN114
    tid52 := tid
    flatten236 := vResOutStride2 == 4
    e51 := flatten236
    label UNKNOWN115
    tid53 := tid
    flatten237 := vResOutMin2 == 0
    e52 := flatten237
    label UNKNOWN116
    tid54 := tid
    flatten238 := vResOutExtent2 == 2
    e53 := flatten238
    label UNKNOWN117
    tid55 := tid
    flatten239 := vResOutStride3 == 8
    e54 := flatten239
    label UNKNOWN118
    tid56 := tid
    flatten240 := vResOutMin3 == 0
    e55 := flatten240
    label UNKNOWN119
    tid57 := tid
    flatten241 := vResOutExtent3 == 230930
    e56 := flatten241
    label UNKNOWN120
    flatten242 := 230930
    _212 := flatten242
    res1 := make_pointer_array_float32(tid, _212)
    flatten243 := res1
    vRes00 := flatten243
    res2 := unknown87(tid, vRes00, 0, 230930)
    flatten244 := 230930
    _213 := flatten244
    res3 := make_pointer_array_float32(tid, _213)
    flatten245 := res3
    vRes01 := flatten245
    res4 := unknown89(tid, vRes01, 0, 230930)
    flatten246 := 230930
    _214 := flatten246
    res5 := make_pointer_array_float32(tid, _214)
    flatten247 := res5
    vRes02 := flatten247
    res6 := unknown91(tid, vRes02, 0, 230930)
    flatten248 := 230930
    _215 := flatten248
    res7 := make_pointer_array_float32(tid, _215)
    flatten249 := res7
    vRes03 := flatten249
    res8 := unknown93(tid, vRes03, 0, 230930)
    flatten250 := 230930
    _216 := flatten250
    res9 := make_pointer_array_float32(tid, _216)
    flatten251 := res9
    vRes04 := flatten251
    res10 := unknown95(tid, vRes04, 0, 230930)
    flatten252 := 230930
    _217 := flatten252
    res11 := make_pointer_array_float32(tid, _217)
    flatten253 := res11
    vRes05 := flatten253
    res12 := unknown97(tid, vRes05, 0, 230930)
    flatten254 := 230930
    _218 := flatten254
    res13 := make_pointer_array_float32(tid, _218)
    flatten255 := res13
    vRes06 := flatten255
    res14 := unknown99(tid, vRes06, 0, 230930)
    flatten256 := 230930
    _219 := flatten256
    res15 := make_pointer_array_float32(tid, _219)
    flatten257 := res15
    vRes07 := flatten257
    res16 := unknown101(tid, vRes07, 0, 230930)
    label LOOP
    excbeforeloop := exc
    flatten258 := 0
    vRes0S0V := flatten258
    while (vRes0S0V < 230930)
      invariant exc == excbeforeloop
      invariant 0 <= vRes0S0V
      invariant vRes0S0V < 230930 + 1
      invariant acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      invariant (forall vRes0S0VForall: Int ::
          { vRes00Pred(vRes00, vRes0S0VForall, 0, 230930) }
          0 <= vRes0S0VForall && vRes0S0VForall < 230930 ==>
          acc(vRes00Pred(vRes00, vRes0S0VForall, 0, 230930), write))
      invariant (forall vRes0S0VForall: Int ::
          { vRes01Pred(vRes01, vRes0S0VForall, 0, 230930) }
          0 <= vRes0S0VForall && vRes0S0VForall < 230930 ==>
          acc(vRes01Pred(vRes01, vRes0S0VForall, 0, 230930), write))
      invariant (forall vRes0S0VForall: Int ::
          { vRes02Pred(vRes02, vRes0S0VForall, 0, 230930) }
          0 <= vRes0S0VForall && vRes0S0VForall < 230930 ==>
          acc(vRes02Pred(vRes02, vRes0S0VForall, 0, 230930), write))
      invariant (forall vRes0S0VForall: Int ::
          { vRes03Pred(vRes03, vRes0S0VForall, 0, 230930) }
          0 <= vRes0S0VForall && vRes0S0VForall < 230930 ==>
          acc(vRes03Pred(vRes03, vRes0S0VForall, 0, 230930), write))
      invariant (forall vRes0S0VForall: Int ::
          { vRes04Pred(vRes04, vRes0S0VForall, 0, 230930) }
          0 <= vRes0S0VForall && vRes0S0VForall < 230930 ==>
          acc(vRes04Pred(vRes04, vRes0S0VForall, 0, 230930), write))
      invariant (forall vRes0S0VForall: Int ::
          { vRes05Pred(vRes05, vRes0S0VForall, 0, 230930) }
          0 <= vRes0S0VForall && vRes0S0VForall < 230930 ==>
          acc(vRes05Pred(vRes05, vRes0S0VForall, 0, 230930), write))
      invariant (forall vRes0S0VForall: Int ::
          { vRes06Pred(vRes06, vRes0S0VForall, 0, 230930) }
          0 <= vRes0S0VForall && vRes0S0VForall < 230930 ==>
          acc(vRes06Pred(vRes06, vRes0S0VForall, 0, 230930), write))
      invariant (forall vRes0S0VForall: Int ::
          { vRes07Pred(vRes07, vRes0S0VForall, 0, 230930) }
          0 <= vRes0S0VForall && vRes0S0VForall < 230930 ==>
          acc(vRes07Pred(vRes07, vRes0S0VForall, 0, 230930), write)) 
    {
      unfold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten260 := ptrDeref(ptrAdd(optGet2(vResIn), vRes0S0V * 8)).rat
      fold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten261 := flatten260
      _220 := flatten261
      unfold acc(vRes00Pred(vRes00, vRes0S0V, 0, 230930), write)
      ptrDeref(ptrAdd(optGet2(vRes00), vRes0S0V)).rat := _220
      fold acc(vRes00Pred(vRes00, vRes0S0V, 0, 230930), write)
      unfold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten262 := ptrDeref(ptrAdd(optGet2(vResIn), vRes0S0V * 8 + 1)).rat
      fold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten263 := flatten262
      _221 := flatten263
      unfold acc(vRes01Pred(vRes01, vRes0S0V, 0, 230930), write)
      ptrDeref(ptrAdd(optGet2(vRes01), vRes0S0V)).rat := _221
      fold acc(vRes01Pred(vRes01, vRes0S0V, 0, 230930), write)
      unfold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten264 := ptrDeref(ptrAdd(optGet2(vResIn), vRes0S0V * 8 + 2)).rat
      fold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten265 := flatten264
      _222 := flatten265
      unfold acc(vRes02Pred(vRes02, vRes0S0V, 0, 230930), write)
      ptrDeref(ptrAdd(optGet2(vRes02), vRes0S0V)).rat := _222
      fold acc(vRes02Pred(vRes02, vRes0S0V, 0, 230930), write)
      unfold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten266 := ptrDeref(ptrAdd(optGet2(vResIn), vRes0S0V * 8 + 3)).rat
      fold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten267 := flatten266
      _223 := flatten267
      unfold acc(vRes03Pred(vRes03, vRes0S0V, 0, 230930), write)
      ptrDeref(ptrAdd(optGet2(vRes03), vRes0S0V)).rat := _223
      fold acc(vRes03Pred(vRes03, vRes0S0V, 0, 230930), write)
      unfold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten268 := ptrDeref(ptrAdd(optGet2(vResIn), vRes0S0V * 8 + 4)).rat
      fold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten269 := flatten268
      _224 := flatten269
      unfold acc(vRes04Pred(vRes04, vRes0S0V, 0, 230930), write)
      ptrDeref(ptrAdd(optGet2(vRes04), vRes0S0V)).rat := _224
      fold acc(vRes04Pred(vRes04, vRes0S0V, 0, 230930), write)
      unfold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten270 := ptrDeref(ptrAdd(optGet2(vResIn), vRes0S0V * 8 + 5)).rat
      fold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten271 := flatten270
      _225 := flatten271
      unfold acc(vRes05Pred(vRes05, vRes0S0V, 0, 230930), write)
      ptrDeref(ptrAdd(optGet2(vRes05), vRes0S0V)).rat := _225
      fold acc(vRes05Pred(vRes05, vRes0S0V, 0, 230930), write)
      unfold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten272 := ptrDeref(ptrAdd(optGet2(vResIn), vRes0S0V * 8 + 6)).rat
      fold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten273 := flatten272
      _226 := flatten273
      unfold acc(vRes06Pred(vRes06, vRes0S0V, 0, 230930), write)
      ptrDeref(ptrAdd(optGet2(vRes06), vRes0S0V)).rat := _226
      fold acc(vRes06Pred(vRes06, vRes0S0V, 0, 230930), write)
      unfold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten274 := ptrDeref(ptrAdd(optGet2(vResIn), vRes0S0V * 8 + 7)).rat
      fold acc(float32Pred(vResIn), scale(1 * write / 2) * write)
      flatten275 := flatten274
      _227 := flatten275
      unfold acc(vRes07Pred(vRes07, vRes0S0V, 0, 230930), write)
      ptrDeref(ptrAdd(optGet2(vRes07), vRes0S0V)).rat := _227
      fold acc(vRes07Pred(vRes07, vRes0S0V, 0, 230930), write)
      flatten259 := vRes0S0V
      vRes0S0V := vRes0S0V + 1
    }
    label LOOP1
    excbeforeloop1 := exc
    flatten276 := 0
    vResOutS0V := flatten276
    while (vResOutS0V < 230930)
      invariant exc == excbeforeloop1
      invariant 0 <= vResOutS0V
      invariant vResOutS0V < 230930 + 1
      invariant acc(ant1PredCompl(ant1), scale(1 * write / 2) * write)
      invariant acc(ant2PredCompl(ant2), scale(1 * write / 2) * write)
      invariant acc(float32Pred(model), scale(1 * write / 2) * write)
      invariant acc(float64Pred(sol), scale(1 * write / 2) * write)
      invariant acc(solutionMapPredCompl(solutionMap, solutionIndex0), scale(1 *
        write /
        2) *
        write)
      invariant (forall v: Int ::
          { vRes00Pred(vRes00, v, 0, 230930) }
          0 <= v && v < 230930 ==>
          acc(vRes00Pred(vRes00, v, 0, 230930), scale(1 * write / 2) *
          write))
      invariant (forall v: Int ::
          { vRes01Pred(vRes01, v, 0, 230930) }
          0 <= v && v < 230930 ==>
          acc(vRes01Pred(vRes01, v, 0, 230930), scale(1 * write / 2) *
          write))
      invariant (forall v: Int ::
          { vRes02Pred(vRes02, v, 0, 230930) }
          0 <= v && v < 230930 ==>
          acc(vRes02Pred(vRes02, v, 0, 230930), scale(1 * write / 2) *
          write))
      invariant (forall v: Int ::
          { vRes03Pred(vRes03, v, 0, 230930) }
          0 <= v && v < 230930 ==>
          acc(vRes03Pred(vRes03, v, 0, 230930), scale(1 * write / 2) *
          write))
      invariant (forall v: Int ::
          { vRes04Pred(vRes04, v, 0, 230930) }
          0 <= v && v < 230930 ==>
          acc(vRes04Pred(vRes04, v, 0, 230930), scale(1 * write / 2) *
          write))
      invariant (forall v: Int ::
          { vRes05Pred(vRes05, v, 0, 230930) }
          0 <= v && v < 230930 ==>
          acc(vRes05Pred(vRes05, v, 0, 230930), scale(1 * write / 2) *
          write))
      invariant (forall v: Int ::
          { vRes06Pred(vRes06, v, 0, 230930) }
          0 <= v && v < 230930 ==>
          acc(vRes06Pred(vRes06, v, 0, 230930), scale(1 * write / 2) *
          write))
      invariant (forall v: Int ::
          { vRes07Pred(vRes07, v, 0, 230930) }
          0 <= v && v < 230930 ==>
          acc(vRes07Pred(vRes07, v, 0, 230930), scale(1 * write / 2) *
          write))
      invariant (forall vResOutS0VForall: Int, vResOutS0JForall: Int, vResOutS0IForall: Int,
        vResOutS0CForall: Int ::
          { vResOutPred(vResOut, vResOutS0CForall, 0, 2, vResOutS0IForall, 0,
          2, vResOutS0JForall, 0, 2, vResOutS0VForall, 0, 230930) }
          0 <= vResOutS0VForall && vResOutS0VForall < 230930 &&
          0 <= vResOutS0JForall &&
          vResOutS0JForall < 2 &&
          0 <= vResOutS0IForall &&
          vResOutS0IForall < 2 &&
          0 <= vResOutS0CForall &&
          vResOutS0CForall < 2 ==>
          acc(vResOutPred(vResOut, vResOutS0CForall, 0, 2, vResOutS0IForall,
          0, 2, vResOutS0JForall, 0, 2, vResOutS0VForall, 0, 230930), write)) 
    {
      label LOOP2
      excbeforeloop2 := exc
      flatten278 := 0
      vResOutS0J := flatten278
      while (vResOutS0J < 2)
        invariant exc == excbeforeloop2
        invariant 0 <= vResOutS0J
        invariant vResOutS0J < 2 + 1
        invariant acc(ant1PredCompl(ant1), scale(1 * write / 2) * write)
        invariant acc(ant2PredCompl(ant2), scale(1 * write / 2) * write)
        invariant acc(float32Pred(model), scale(1 * write / 2) * write)
        invariant acc(float64Pred(sol), scale(1 * write / 2) * write)
        invariant acc(solutionMapPredCompl(solutionMap, solutionIndex0), scale(1 *
          write /
          2) *
          write)
        invariant (forall v: Int ::
            { vRes00Pred(vRes00, v, 0, 230930) }
            0 <= v && v < 230930 ==>
            acc(vRes00Pred(vRes00, v, 0, 230930), scale(1 * write / 2) *
            write))
        invariant (forall v: Int ::
            { vRes01Pred(vRes01, v, 0, 230930) }
            0 <= v && v < 230930 ==>
            acc(vRes01Pred(vRes01, v, 0, 230930), scale(1 * write / 2) *
            write))
        invariant (forall v: Int ::
            { vRes02Pred(vRes02, v, 0, 230930) }
            0 <= v && v < 230930 ==>
            acc(vRes02Pred(vRes02, v, 0, 230930), scale(1 * write / 2) *
            write))
        invariant (forall v: Int ::
            { vRes03Pred(vRes03, v, 0, 230930) }
            0 <= v && v < 230930 ==>
            acc(vRes03Pred(vRes03, v, 0, 230930), scale(1 * write / 2) *
            write))
        invariant (forall v: Int ::
            { vRes04Pred(vRes04, v, 0, 230930) }
            0 <= v && v < 230930 ==>
            acc(vRes04Pred(vRes04, v, 0, 230930), scale(1 * write / 2) *
            write))
        invariant (forall v: Int ::
            { vRes05Pred(vRes05, v, 0, 230930) }
            0 <= v && v < 230930 ==>
            acc(vRes05Pred(vRes05, v, 0, 230930), scale(1 * write / 2) *
            write))
        invariant (forall v: Int ::
            { vRes06Pred(vRes06, v, 0, 230930) }
            0 <= v && v < 230930 ==>
            acc(vRes06Pred(vRes06, v, 0, 230930), scale(1 * write / 2) *
            write))
        invariant (forall v: Int ::
            { vRes07Pred(vRes07, v, 0, 230930) }
            0 <= v && v < 230930 ==>
            acc(vRes07Pred(vRes07, v, 0, 230930), scale(1 * write / 2) *
            write))
        invariant (forall vResOutS0JForall: Int, vResOutS0IForall: Int, vResOutS0CForall: Int ::
            { vResOutPred(vResOut, vResOutS0CForall, 0, 2, vResOutS0IForall,
            0, 2, vResOutS0JForall, 0, 2, vResOutS0V, 0, 230930) }
            0 <= vResOutS0JForall && vResOutS0JForall < 2 &&
            0 <= vResOutS0IForall &&
            vResOutS0IForall < 2 &&
            0 <= vResOutS0CForall &&
            vResOutS0CForall < 2 ==>
            acc(vResOutPred(vResOut, vResOutS0CForall, 0, 2, vResOutS0IForall,
            0, 2, vResOutS0JForall, 0, 2, vResOutS0V, 0, 230930), write)) 
      {
        flatten280 := vResOutS0J == 1
        t3679 := flatten280
        flatten281 := vResOutS0J == 0
        t3677 := flatten281
        flatten282 := (vResOutS0V * 2 + vResOutS0J) * 4
        t3680 := flatten282
        label LOOP3
        excbeforeloop3 := exc
        flatten283 := 0
        vResOutS0I := flatten283
        while (vResOutS0I < 2)
          invariant exc == excbeforeloop3
          invariant 0 <= vResOutS0I
          invariant vResOutS0I < 2 + 1
          invariant acc(ant1PredCompl(ant1), scale(1 * write / 2) * write)
          invariant acc(ant2PredCompl(ant2), scale(1 * write / 2) * write)
          invariant acc(float32Pred(model), scale(1 * write / 2) * write)
          invariant acc(float64Pred(sol), scale(1 * write / 2) * write)
          invariant acc(solutionMapPredCompl(solutionMap, solutionIndex0), scale(1 *
            write /
            2) *
            write)
          invariant (forall v: Int ::
              { vRes00Pred(vRes00, v, 0, 230930) }
              0 <= v && v < 230930 ==>
              acc(vRes00Pred(vRes00, v, 0, 230930), scale(1 * write / 2) *
              write))
          invariant (forall v: Int ::
              { vRes01Pred(vRes01, v, 0, 230930) }
              0 <= v && v < 230930 ==>
              acc(vRes01Pred(vRes01, v, 0, 230930), scale(1 * write / 2) *
              write))
          invariant (forall v: Int ::
              { vRes02Pred(vRes02, v, 0, 230930) }
              0 <= v && v < 230930 ==>
              acc(vRes02Pred(vRes02, v, 0, 230930), scale(1 * write / 2) *
              write))
          invariant (forall v: Int ::
              { vRes03Pred(vRes03, v, 0, 230930) }
              0 <= v && v < 230930 ==>
              acc(vRes03Pred(vRes03, v, 0, 230930), scale(1 * write / 2) *
              write))
          invariant (forall v: Int ::
              { vRes04Pred(vRes04, v, 0, 230930) }
              0 <= v && v < 230930 ==>
              acc(vRes04Pred(vRes04, v, 0, 230930), scale(1 * write / 2) *
              write))
          invariant (forall v: Int ::
              { vRes05Pred(vRes05, v, 0, 230930) }
              0 <= v && v < 230930 ==>
              acc(vRes05Pred(vRes05, v, 0, 230930), scale(1 * write / 2) *
              write))
          invariant (forall v: Int ::
              { vRes06Pred(vRes06, v, 0, 230930) }
              0 <= v && v < 230930 ==>
              acc(vRes06Pred(vRes06, v, 0, 230930), scale(1 * write / 2) *
              write))
          invariant (forall v: Int ::
              { vRes07Pred(vRes07, v, 0, 230930) }
              0 <= v && v < 230930 ==>
              acc(vRes07Pred(vRes07, v, 0, 230930), scale(1 * write / 2) *
              write))
          invariant (forall vResOutS0IForall: Int, vResOutS0CForall: Int ::
              { vResOutPred(vResOut, vResOutS0CForall, 0, 2, vResOutS0IForall,
              0, 2, vResOutS0J, 0, 2, vResOutS0V, 0, 230930) }
              0 <= vResOutS0IForall && vResOutS0IForall < 2 &&
              0 <= vResOutS0CForall &&
              vResOutS0CForall < 2 ==>
              acc(vResOutPred(vResOut, vResOutS0CForall, 0, 2, vResOutS0IForall,
              0, 2, vResOutS0J, 0, 2, vResOutS0V, 0, 230930), write)) 
        {
          flatten285 := vResOutS0I == 1
          t3683 := flatten285
          flatten286 := vResOutS0I == 0
          t3681 := flatten286
          flatten287 := vResOutS0I * 2 + t3680
          t3684 := flatten287
          label LOOP4
          excbeforeloop4 := exc
          flatten288 := 0
          vResOutS0C := flatten288
          while (vResOutS0C < 2)
            invariant exc == excbeforeloop4
            invariant 0 <= vResOutS0C
            invariant vResOutS0C < 2 + 1
            invariant acc(ant1PredCompl(ant1), scale(1 * write / 2) * write)
            invariant acc(ant2PredCompl(ant2), scale(1 * write / 2) * write)
            invariant acc(float32Pred(model), scale(1 * write / 2) * write)
            invariant acc(float64Pred(sol), scale(1 * write / 2) * write)
            invariant acc(solutionMapPredCompl(solutionMap, solutionIndex0), scale(1 *
              write /
              2) *
              write)
            invariant (forall v: Int ::
                { vRes00Pred(vRes00, v, 0, 230930) }
                0 <= v && v < 230930 ==>
                acc(vRes00Pred(vRes00, v, 0, 230930), scale(1 * write / 2) *
                write))
            invariant (forall v: Int ::
                { vRes01Pred(vRes01, v, 0, 230930) }
                0 <= v && v < 230930 ==>
                acc(vRes01Pred(vRes01, v, 0, 230930), scale(1 * write / 2) *
                write))
            invariant (forall v: Int ::
                { vRes02Pred(vRes02, v, 0, 230930) }
                0 <= v && v < 230930 ==>
                acc(vRes02Pred(vRes02, v, 0, 230930), scale(1 * write / 2) *
                write))
            invariant (forall v: Int ::
                { vRes03Pred(vRes03, v, 0, 230930) }
                0 <= v && v < 230930 ==>
                acc(vRes03Pred(vRes03, v, 0, 230930), scale(1 * write / 2) *
                write))
            invariant (forall v: Int ::
                { vRes04Pred(vRes04, v, 0, 230930) }
                0 <= v && v < 230930 ==>
                acc(vRes04Pred(vRes04, v, 0, 230930), scale(1 * write / 2) *
                write))
            invariant (forall v: Int ::
                { vRes05Pred(vRes05, v, 0, 230930) }
                0 <= v && v < 230930 ==>
                acc(vRes05Pred(vRes05, v, 0, 230930), scale(1 * write / 2) *
                write))
            invariant (forall v: Int ::
                { vRes06Pred(vRes06, v, 0, 230930) }
                0 <= v && v < 230930 ==>
                acc(vRes06Pred(vRes06, v, 0, 230930), scale(1 * write / 2) *
                write))
            invariant (forall v: Int ::
                { vRes07Pred(vRes07, v, 0, 230930) }
                0 <= v && v < 230930 ==>
                acc(vRes07Pred(vRes07, v, 0, 230930), scale(1 * write / 2) *
                write))
            invariant (forall vResOutS0CForall: Int ::
                { vResOutPred(vResOut, vResOutS0CForall, 0, 2, vResOutS0I, 0,
                2, vResOutS0J, 0, 2, vResOutS0V, 0, 230930) }
                0 <= vResOutS0CForall && vResOutS0CForall < 2 ==>
                acc(vResOutPred(vResOut, vResOutS0CForall, 0, 2, vResOutS0I,
                0, 2, vResOutS0J, 0, 2, vResOutS0V, 0, 230930), write)) 
          {
            flatten290 := vResOutS0C == 0
            t3640 := flatten290
            flatten291 := t3640 && t3681
            t3642 := flatten291
            unfold acc(solutionMapPredCompl(solutionMap, solutionIndex0), scale(1 *
              write /
              2) *
              write)
            flatten292 := ptrDeref(ptrAdd(optGet2(solutionMap), vResOutS0V)).int
            fold acc(solutionMapPredCompl(solutionMap, solutionIndex0), scale(1 *
              write /
              2) *
              write)
            flatten293 := flatten292
            _228 := flatten293
            t3644 := _228
            unfold acc(ant2PredCompl(ant2), scale(1 * write / 2) * write)
            flatten294 := ptrDeref(ptrAdd(optGet2(ant2), vResOutS0V)).int
            fold acc(ant2PredCompl(ant2), scale(1 * write / 2) * write)
            flatten295 := flatten294
            _229 := flatten295
            t3645S := _229
            unfold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten296 := ptrDeref(ptrAdd(optGet2(sol), (t3645S * 8 + t3644) *
              4 +
              1)).rat
            fold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten297 := flatten296
            _230 := flatten297
            flatten298 := _230
            _231 := flatten298
            t3646 := _231
            unfold acc(ant1PredCompl(ant1), scale(1 * write / 2) * write)
            flatten299 := ptrDeref(ptrAdd(optGet2(ant1), vResOutS0V)).int
            fold acc(ant1PredCompl(ant1), scale(1 * write / 2) * write)
            flatten300 := flatten299
            _232 := flatten300
            t3647S := _232
            unfold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten301 := ptrDeref(ptrAdd(optGet2(sol), (t3647S * 8 + t3644) *
              4)).rat
            fold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten302 := flatten301
            _233 := flatten302
            flatten303 := _233
            _234 := flatten303
            t3648 := _234
            unfold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten304 := ptrDeref(ptrAdd(optGet2(model), vResOutS0V * 8 +
              1)).rat
            fold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten305 := flatten304
            _235 := flatten305
            t3649 := _235
            unfold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten306 := ptrDeref(ptrAdd(optGet2(model), vResOutS0V * 8)).rat
            fold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten307 := flatten306
            _236 := flatten307
            t3650 := _236
            unfold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten308 := ptrDeref(ptrAdd(optGet2(sol), (t3647S * 8 + t3644) *
              4 +
              1)).rat
            fold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten309 := flatten308
            _237 := flatten309
            flatten310 := _237
            _238 := flatten310
            t3651 := _238
            flatten311 := t3648 * t3649 + t3650 * t3651
            t3652 := flatten311
            flatten312 := t3648 * t3650 - t3649 * t3651
            t3653 := flatten312
            unfold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten313 := ptrDeref(ptrAdd(optGet2(sol), (t3645S * 8 + t3644) *
              4)).rat
            fold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten314 := flatten313
            _239 := flatten314
            flatten315 := _239
            _240 := flatten315
            t3654 := _240
            flatten316 := vResOutS0C == 1
            t3655 := flatten316
            flatten317 := t3655 && t3681
            t3656 := flatten317
            flatten318 := t3640 && t3683
            t3658 := flatten318
            unfold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten319 := ptrDeref(ptrAdd(optGet2(sol), (t3645S * 8 + t3644) *
              4 +
              3)).rat
            fold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten320 := flatten319
            _241 := flatten320
            flatten321 := _241
            _242 := flatten321
            t3659 := _242
            unfold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten322 := ptrDeref(ptrAdd(optGet2(model), vResOutS0V * 8 +
              3)).rat
            fold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten323 := flatten322
            _243 := flatten323
            t3660 := _243
            unfold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten324 := ptrDeref(ptrAdd(optGet2(model), vResOutS0V * 8 +
              2)).rat
            fold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten325 := flatten324
            _244 := flatten325
            t3661 := _244
            flatten326 := t3648 * t3660 + t3651 * t3661
            t3662 := flatten326
            flatten327 := t3648 * t3661 - t3651 * t3660
            t3663 := flatten327
            unfold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten328 := ptrDeref(ptrAdd(optGet2(sol), (t3645S * 8 + t3644) *
              4 +
              2)).rat
            fold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten329 := flatten328
            _245 := flatten329
            flatten330 := _245
            _246 := flatten330
            t3664 := _246
            unfold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten331 := ptrDeref(ptrAdd(optGet2(sol), (t3647S * 8 + t3644) *
              4 +
              2)).rat
            fold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten332 := flatten331
            _247 := flatten332
            flatten333 := _247
            _248 := flatten333
            t3666 := _248
            unfold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten334 := ptrDeref(ptrAdd(optGet2(model), vResOutS0V * 8 +
              5)).rat
            fold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten335 := flatten334
            _249 := flatten335
            t3667 := _249
            unfold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten336 := ptrDeref(ptrAdd(optGet2(model), vResOutS0V * 8 +
              4)).rat
            fold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten337 := flatten336
            _250 := flatten337
            t3668 := _250
            unfold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten338 := ptrDeref(ptrAdd(optGet2(sol), (t3647S * 8 + t3644) *
              4 +
              3)).rat
            fold acc(float64Pred(sol), scale(1 * write / 2) * write)
            flatten339 := flatten338
            _251 := flatten339
            flatten340 := _251
            _252 := flatten340
            t3669 := _252
            flatten341 := t3666 * t3667 + t3668 * t3669
            t3670 := flatten341
            flatten342 := t3666 * t3668 - t3667 * t3669
            t3671 := flatten342
            unfold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten343 := ptrDeref(ptrAdd(optGet2(model), vResOutS0V * 8 +
              7)).rat
            fold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten344 := flatten343
            _253 := flatten344
            t3672 := _253
            unfold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten345 := ptrDeref(ptrAdd(optGet2(model), vResOutS0V * 8 +
              6)).rat
            fold acc(float32Pred(model), scale(1 * write / 2) * write)
            flatten346 := flatten345
            _254 := flatten346
            t3673 := _254
            flatten347 := t3666 * t3672 + t3669 * t3673
            t3674 := flatten347
            flatten348 := t3666 * t3673 - t3669 * t3672
            t3675 := flatten348
            unfold acc(vRes00Pred(vRes00, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten349 := ptrDeref(ptrAdd(optGet2(vRes00), vResOutS0V)).rat
            fold acc(vRes00Pred(vRes00, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten350 := flatten349
            _255 := flatten350
            unfold acc(vRes01Pred(vRes01, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten351 := ptrDeref(ptrAdd(optGet2(vRes01), vResOutS0V)).rat
            fold acc(vRes01Pred(vRes01, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten352 := flatten351
            _256 := flatten352
            unfold acc(vRes02Pred(vRes02, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten353 := ptrDeref(ptrAdd(optGet2(vRes02), vResOutS0V)).rat
            fold acc(vRes02Pred(vRes02, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten354 := flatten353
            _257 := flatten354
            unfold acc(vRes03Pred(vRes03, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten355 := ptrDeref(ptrAdd(optGet2(vRes03), vResOutS0V)).rat
            fold acc(vRes03Pred(vRes03, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten356 := flatten355
            _258 := flatten356
            unfold acc(vRes04Pred(vRes04, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten357 := ptrDeref(ptrAdd(optGet2(vRes04), vResOutS0V)).rat
            fold acc(vRes04Pred(vRes04, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten358 := flatten357
            _259 := flatten358
            unfold acc(vRes05Pred(vRes05, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten359 := ptrDeref(ptrAdd(optGet2(vRes05), vResOutS0V)).rat
            fold acc(vRes05Pred(vRes05, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten360 := flatten359
            _260 := flatten360
            unfold acc(vRes06Pred(vRes06, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten361 := ptrDeref(ptrAdd(optGet2(vRes06), vResOutS0V)).rat
            fold acc(vRes06Pred(vRes06, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten362 := flatten361
            _261 := flatten362
            unfold acc(vRes07Pred(vRes07, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten363 := ptrDeref(ptrAdd(optGet2(vRes07), vResOutS0V)).rat
            fold acc(vRes07Pred(vRes07, vResOutS0V, 0, 230930), scale(1 *
              write /
              2) *
              write)
            flatten364 := flatten363
            _262 := flatten364
            unfold acc(vResOutPred(vResOut, vResOutS0C, 0, 2, vResOutS0I, 0,
              2, vResOutS0J, 0, 2, vResOutS0V, 0, 230930), write)
            flatten365 := t3684 + vResOutS0C
            flatten366 := (t3642 && t3677 ?
                _255 + ((0 * write / 1 - t3646) * t3652 - t3653 * t3654) :
                (t3656 && t3677 ?
                  _256 - ((0 * write / 1 - t3646) * t3653 + t3652 * t3654) :
                  (t3658 && t3677 ?
                    _257 +
                    ((0 * write / 1 - t3659) * t3662 - t3663 * t3664) :
                    (t3655 && t3683 && t3677 ?
                      _258 -
                      ((0 * write / 1 - t3659) * t3663 + t3662 * t3664) :
                      (t3642 && t3679 ?
                        _259 +
                        ((0 * write / 1 - t3646) * t3670 - t3654 * t3671) :
                        (t3656 && t3679 ?
                          _260 -
                          ((0 * write / 1 - t3646) * t3671 + t3654 * t3670) :
                          (t3658 && t3679 ?
                            _261 +
                            ((0 * write / 1 - t3659) * t3674 -
                            t3664 * t3675) :
                            _262 -
                            ((0 * write / 1 - t3659) * t3675 +
                            t3664 * t3674))))))))
            ptrDeref(ptrAdd(optGet2(vResOut), flatten365)).rat := flatten366
            fold acc(vResOutPred(vResOut, vResOutS0C, 0, 2, vResOutS0I, 0, 2,
              vResOutS0J, 0, 2, vResOutS0V, 0, 230930), write)
            flatten289 := vResOutS0C
            vResOutS0C := vResOutS0C + 1
          }
          flatten284 := vResOutS0I
          vResOutS0I := vResOutS0I + 1
        }
        flatten279 := vResOutS0J
        vResOutS0J := vResOutS0J + 1
      }
      flatten277 := vResOutS0V
      vResOutS0V := vResOutS0V + 1
    }
    res17 := unknown86(tid, vRes00, 0, 230930)
    res18 := unknown122(tid, vRes00)
    res19 := unknown88(tid, vRes01, 0, 230930)
    res20 := unknown122(tid, vRes01)
    res21 := unknown90(tid, vRes02, 0, 230930)
    res22 := unknown122(tid, vRes02)
    res23 := unknown92(tid, vRes03, 0, 230930)
    res24 := unknown122(tid, vRes03)
    res25 := unknown94(tid, vRes04, 0, 230930)
    res26 := unknown122(tid, vRes04)
    res27 := unknown96(tid, vRes05, 0, 230930)
    res28 := unknown122(tid, vRes05)
    res29 := unknown98(tid, vRes06, 0, 230930)
    res30 := unknown122(tid, vRes06)
    res31 := unknown100(tid, vRes07, 0, 230930)
    res32 := unknown122(tid, vRes07)
    flatten367 := 0
    return := flatten367
    goto END
    label END
    res := return
    label BUBBLE
    assert exc == null
  }
}