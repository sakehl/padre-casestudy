
resource hide_perm(int[] data, int i, int n) = data != null ** data.length == n ** (\forall* int i; 0<=i && i< data.length; Perm(data[i], write));

  context_everywhere n > 0;
  context_everywhere hide_perm(x0, 0, n);
  context_everywhere hide_perm(x1, 1, n);
  context_everywhere hide_perm(x2, 2, n);
  context_everywhere hide_perm(x3, 3, n);
  context_everywhere hide_perm(x4, 4, n);
  context_everywhere hide_perm(x5, 5, n);
  context_everywhere hide_perm(x6, 6, n);
  context_everywhere hide_perm(x7, 7, n);
  context_everywhere hide_perm(x8, 8, n);
  context_everywhere hide_perm(x9, 9, n);
  context_everywhere hide_perm(x10, 10, n);
  context_everywhere hide_perm(x11, 11, n);
  context_everywhere hide_perm(x12, 12, n);
  context_everywhere hide_perm(x13, 13, n);
  context_everywhere hide_perm(x14, 14, n);
  context_everywhere hide_perm(x15, 15, n);
int main(int n, int[n] x0, int[n] x1, int[n] x2, int[n] x3, int[n] x4, int[n] x5, int[n] x6, int[n] x7, int[n] x8, int[n] x9, int[n] x10, int[n] x11, int[n] x12, int[n] x13, int[n] x14, int[n] x15){
    loop_invariant 0 <= i && i<= n;
    loop_invariant (\forall int j=0..i; (\unfolding hide_perm(x0, 0, n) \in x0[j]) == 0+ (\unfolding hide_perm(x1, 1, n) \in x1[j])+ (\unfolding hide_perm(x2, 2, n) \in x2[j])+ (\unfolding hide_perm(x3, 3, n) \in x3[j])+ (\unfolding hide_perm(x4, 4, n) \in x4[j])+ (\unfolding hide_perm(x5, 5, n) \in x5[j])+ (\unfolding hide_perm(x6, 6, n) \in x6[j])+ (\unfolding hide_perm(x7, 7, n) \in x7[j])+ (\unfolding hide_perm(x8, 8, n) \in x8[j])+ (\unfolding hide_perm(x9, 9, n) \in x9[j])+ (\unfolding hide_perm(x10, 10, n) \in x10[j])+ (\unfolding hide_perm(x11, 11, n) \in x11[j])+ (\unfolding hide_perm(x12, 12, n) \in x12[j])+ (\unfolding hide_perm(x13, 13, n) \in x13[j])+ (\unfolding hide_perm(x14, 14, n) \in x14[j])+ (\unfolding hide_perm(x15, 15, n) \in x15[j]));
  for(int i=0; i<n;i++){
    unfold hide_perm(x1, 1, n);
    int a1 = x1[i];
    fold hide_perm(x1, 1, n);
    unfold hide_perm(x2, 2, n);
    int a2 = x2[i];
    fold hide_perm(x2, 2, n);
    unfold hide_perm(x3, 3, n);
    int a3 = x3[i];
    fold hide_perm(x3, 3, n);
    unfold hide_perm(x4, 4, n);
    int a4 = x4[i];
    fold hide_perm(x4, 4, n);
    unfold hide_perm(x5, 5, n);
    int a5 = x5[i];
    fold hide_perm(x5, 5, n);
    unfold hide_perm(x6, 6, n);
    int a6 = x6[i];
    fold hide_perm(x6, 6, n);
    unfold hide_perm(x7, 7, n);
    int a7 = x7[i];
    fold hide_perm(x7, 7, n);
    unfold hide_perm(x8, 8, n);
    int a8 = x8[i];
    fold hide_perm(x8, 8, n);
    unfold hide_perm(x9, 9, n);
    int a9 = x9[i];
    fold hide_perm(x9, 9, n);
    unfold hide_perm(x10, 10, n);
    int a10 = x10[i];
    fold hide_perm(x10, 10, n);
    unfold hide_perm(x11, 11, n);
    int a11 = x11[i];
    fold hide_perm(x11, 11, n);
    unfold hide_perm(x12, 12, n);
    int a12 = x12[i];
    fold hide_perm(x12, 12, n);
    unfold hide_perm(x13, 13, n);
    int a13 = x13[i];
    fold hide_perm(x13, 13, n);
    unfold hide_perm(x14, 14, n);
    int a14 = x14[i];
    fold hide_perm(x14, 14, n);
    unfold hide_perm(x15, 15, n);
    int a15 = x15[i];
    fold hide_perm(x15, 15, n);
    
    unfold hide_perm(x0, 0, n);
    x0[i] = 0+ a1+ a2+ a3+ a4+ a5+ a6+ a7+ a8+ a9+ a10+ a11+ a12+ a13+ a14+ a15;
    fold hide_perm(x0, 0, n);
  }
}
