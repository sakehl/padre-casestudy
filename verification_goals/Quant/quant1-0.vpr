domain WellFoundedOrder[T]  {
  
  function bounded(v: T): Bool 
  
  function decreasing(v1: T, v2: T): Bool 
}

domain IntOrder  {
  
  axiom {
    (forall i: Int ::0 <= i == (bounded(i): Bool))
  }
  
  axiom {
    (forall i: Int ::(forall j: Int ::i < j == (decreasing(i, j): Bool)))
  }
}

domain Array  {
  
  function array_loc(a: Array, i: Int): Ref 
  
  function alen(a: Array): Int 
  
  function loc_inv_1(loc: Ref): Array 
  
  function loc_inv_2(loc: Ref): Int 
  
  axiom {
    (forall a: Array, i: Int ::
      { array_loc(a, i) }
      loc_inv_1(array_loc(a, i)) == a && loc_inv_2(array_loc(a, i)) == i)
  }
  
  axiom {
    (forall a: Array :: { alen(a) } alen(a) >= 0)
  }
}

domain Any  {
  
  
}

domain Option[T1]  {
  
  function none1(): Option[T1] 
  
  function some(x: T1): Option[T1] 
  
  function option_get(opt: Option[T1]): T1 
  
  axiom {
    (forall x: T1 ::
      { (some(x): Option[T1]) }
      (none1(): Option[T1]) != (some(x): Option[T1]))
  }
  
  axiom {
    (forall x: T1 ::
      { (some(x): Option[T1]) }
      (option_get((some(x): Option[T1])): T1) == x)
  }
  
  axiom {
    (forall opt: Option[T1] ::
      { (some((option_get(opt): T1)): Option[T1]) }
      (some((option_get(opt): T1)): Option[T1]) == opt)
  }
}

field int: Int

function aloc(a: Array, i: Int): Ref
  requires 0 <= i
  requires i < alen(a)
  decreases 
  ensures loc_inv_1(result) == a
  ensures loc_inv_2(result) == i
{
  array_loc(a, i)
}

function anyAs(t: Any): Any
  decreases 


function asAny(t: Any): Any
  decreases 
  ensures anyAs(result) == t


function optGet(opt: Option[Any]): Any
  requires opt != (none1(): Option[Any])
  decreases 
  ensures (some(result): Option[Any]) == opt
{
  (option_get(opt): Any)
}

function optOrElse(opt: Option[Any], alt: Any): Any
  decreases 
  ensures opt == (none1(): Option[Any]) ==> result == alt
  ensures opt != (none1(): Option[Any]) ==> result == optGet(opt)
{
  (opt == (none1(): Option[Any]) ? alt : optGet(opt))
}

function optGet1(opt: Option[Array]): Array
  requires opt != (none1(): Option[Array])
  decreases 
  ensures (some(result): Option[Array]) == opt
{
  (option_get(opt): Array)
}

function type(type1: Ref): Int
  decreases 
  ensures result >= 0
  ensures result <= 0
  ensures type1 == null ==> result == 0
  ensures type1 != null ==> result != 0


function subtype(subtype1: Int, subtype2: Int): Bool
  requires subtype1 >= 0
  requires subtype1 <= 0
  requires subtype2 >= 0
  requires subtype2 <= 0
  decreases 
{
  (subtype1 == 0 ==> true) && true
}

method main(tid: Int, n: Int, x0: Option[Array], x1: Option[Array], x2: Option[Array])
  returns (res: Int)
  requires 0 < n
  requires x0 != (none1(): Option[Array])
  requires alen(optGet1(x0)) == n
  requires (forall i: Int ::
      { aloc(optGet1(x0), i) }
      0 <= i && i < alen(optGet1(x0)) ==>
      acc(aloc(optGet1(x0), i).int, write))
  requires x1 != (none1(): Option[Array])
  requires alen(optGet1(x1)) == n
  requires (forall i: Int ::
      { aloc(optGet1(x1), i) }
      0 <= i && i < alen(optGet1(x1)) ==>
      acc(aloc(optGet1(x1), i).int, 1 * write / 2))
  requires x2 != (none1(): Option[Array])
  requires alen(optGet1(x2)) == n
  requires (forall i: Int ::
      { aloc(optGet1(x2), i) }
      0 <= i && i < alen(optGet1(x2)) ==>
      acc(aloc(optGet1(x2), i).int, 1 * write / 2))
  ensures 0 < n
  ensures x0 != (none1(): Option[Array])
  ensures alen(optGet1(x0)) == n
  ensures (forall i: Int ::
      { aloc(optGet1(x0), i) }
      0 <= i && i < alen(optGet1(x0)) ==>
      acc(aloc(optGet1(x0), i).int, write))
  ensures x1 != (none1(): Option[Array])
  ensures alen(optGet1(x1)) == n
  ensures (forall i: Int ::
      { aloc(optGet1(x1), i) }
      0 <= i && i < alen(optGet1(x1)) ==>
      acc(aloc(optGet1(x1), i).int, 1 * write / 2))
  ensures x2 != (none1(): Option[Array])
  ensures alen(optGet1(x2)) == n
  ensures (forall i: Int ::
      { aloc(optGet1(x2), i) }
      0 <= i && i < alen(optGet1(x2)) ==>
      acc(aloc(optGet1(x2), i).int, 1 * write / 2))
{
  {
    var exc: Ref
    var return: Int
    var i: Int
    var flatten: Int
    var flatten1: Int
    var flatten2: Int
    var excbeforeloop: Ref
    exc := null
    label LOOP
    excbeforeloop := exc
    flatten := 0
    i := flatten
    while (i < n)
      invariant exc == excbeforeloop
      invariant 0 < n
      invariant x0 != (none1(): Option[Array])
      invariant alen(optGet1(x0)) == n
      invariant (forall i1: Int ::
          { aloc(optGet1(x0), i1) }
          0 <= i1 && i1 < alen(optGet1(x0)) ==>
          acc(aloc(optGet1(x0), i1).int, write))
      invariant x1 != (none1(): Option[Array])
      invariant alen(optGet1(x1)) == n
      invariant (forall i1: Int ::
          { aloc(optGet1(x1), i1) }
          0 <= i1 && i1 < alen(optGet1(x1)) ==>
          acc(aloc(optGet1(x1), i1).int, 1 * write / 2))
      invariant x2 != (none1(): Option[Array])
      invariant alen(optGet1(x2)) == n
      invariant (forall i1: Int ::
          { aloc(optGet1(x2), i1) }
          0 <= i1 && i1 < alen(optGet1(x2)) ==>
          acc(aloc(optGet1(x2), i1).int, 1 * write / 2))
      invariant 0 <= i
      invariant i < n + 1 
    {
      flatten2 := aloc(optGet1(x1), i).int + aloc(optGet1(x2), i).int
      aloc(optGet1(x0), i).int := flatten2
      flatten1 := i
      i := i + 1
    }
    label END
    res := return
    label BUBBLE
    assert exc == null
  }
}