domain WellFoundedOrder[T]  {
  
  function bounded(v: T): Bool 
  
  function decreasing(v1: T, v2: T): Bool 
}

domain IntOrder  {
  
  axiom {
    (forall i: Int ::0 <= i == (bounded(i): Bool))
  }
  
  axiom {
    (forall i: Int ::(forall j: Int ::i < j == (decreasing(i, j): Bool)))
  }
}

domain Void  {
  
  function unit(): Void 
  
  axiom {
    (forall v: Void ::true ==> unit() == v)
  }
}

domain $domain$unknown1  {
  
  function unknown1(unknown12: Perm): Bool interpretation "is_int"
}

domain $domain$to_int  {
  
  function to_int(to_int1: Perm): Int interpretation "to_int"
}

domain $domain$unknown5  {
  
  function unknown5(unknown13: Perm, unknown14: Perm): Perm interpretation "^"
}

domain Array  {
  
  function array_loc(a: Array, i: Int): Ref 
  
  function alen(a: Array): Int 
  
  function loc_inv_1(loc: Ref): Array 
  
  function loc_inv_2(loc: Ref): Int 
  
  axiom {
    (forall a: Array, i: Int ::
      { array_loc(a, i) }
      loc_inv_1(array_loc(a, i)) == a && loc_inv_2(array_loc(a, i)) == i)
  }
  
  axiom {
    (forall a: Array :: { alen(a) } alen(a) >= 0)
  }
}

domain Any  {
  
  
}

domain Option[T1]  {
  
  function none1(): Option[T1] 
  
  function some(x: T1): Option[T1] 
  
  function option_get(opt: Option[T1]): T1 
  
  axiom {
    (forall x: T1 ::
      { (some(x): Option[T1]) }
      (none1(): Option[T1]) != (some(x): Option[T1]))
  }
  
  axiom {
    (forall x: T1 ::
      { (some(x): Option[T1]) }
      (option_get((some(x): Option[T1])): T1) == x)
  }
  
  axiom {
    (forall opt: Option[T1] ::
      { (some((option_get(opt): T1)): Option[T1]) }
      (some((option_get(opt): T1)): Option[T1]) == opt)
  }
}

field dimensions: Int

field host2: Option[Array]

field min: Int

field extent: Int

field int: Int

field rat: Perm

field dimensions1: Int

field dim2: Option[Array]

field host1: Option[Array]

field dimensions2: Int

field ref: Ref

field host: Option[Array]

field dim1: Option[Array]

field dim: Option[Array]

field stride: Int

function unknown2(x: Perm): Perm
  decreases 
  ensures result == (unknown1(x) ? x : (to_int(x) + 1) * write / 1)


function unknown3(x: Perm): Perm
  decreases 
  ensures result == (0 * write / 1 <= x ? x : -x * write)


function unknown4(x: Perm): Perm
  decreases 
  ensures result == to_int(x) * write / 1


function unknown6(x: Perm, y: Perm): Perm
  decreases 
  ensures result == unknown5(x, y)


function unknown7(x: Perm): Perm
  decreases 
  ensures result == unknown5(x, 5 * write / 10)


function unknown8(x: Perm): Perm
  decreases 
  ensures !(x < 0 * write / 1 && unknown1(x - 5 * write / 10)) ==>
    result == to_int(x + 5 * write / 10) * write / 1
  ensures x < 0 * write / 1 && unknown1(x - 5 * write / 10) ==>
    result == x - 5 * write / 10


function aloc(a: Array, i: Int): Ref
  requires 0 <= i
  requires i < alen(a)
  decreases 
  ensures loc_inv_1(result) == a
  ensures loc_inv_2(result) == i
{
  array_loc(a, i)
}

function anyAs(t: Any): Any
  decreases 


function asAny(t: Any): Any
  decreases 
  ensures anyAs(result) == t


function optGet(opt: Option[Any]): Any
  requires opt != (none1(): Option[Any])
  decreases 
  ensures (some(result): Option[Any]) == opt
{
  (option_get(opt): Any)
}

function optOrElse(opt: Option[Any], alt: Any): Any
  decreases 
  ensures opt == (none1(): Option[Any]) ==> result == alt
  ensures opt != (none1(): Option[Any]) ==> result == optGet(opt)
{
  (opt == (none1(): Option[Any]) ? alt : optGet(opt))
}

function max(x: Int, y: Int): Int
{
  (y < x ? x : y)
}

function min1(x: Int, y: Int): Int
{
  (y < x ? y : x)
}

function max1(x: Perm, y: Perm): Perm
{
  (y < x ? x : y)
}

function min2(x: Perm, y: Perm): Perm
{
  (y < x ? y : x)
}

function abs(x: Int): Int
{
  (0 <= x ? x : -x)
}

function abs1(x: Perm): Perm
{
  (0 * write / 1 <= x ? x : -x * write)
}

function hdiv(x: Int, y: Int): Int
{
  (y == 0 ? 0 : x / y)
}

function hmod(x: Int, y: Int): Int
{
  (y == 0 ? 0 : x % y)
}

function truncdiv(a: Int, b: Int): Int
  requires b != 0
  decreases 
{
  (let i ==
    (a / b) in
    (let i1 ==
      (a % b) in
      (0 <= a || i1 == 0 ? i : i + (0 < b ? 1 : -1))))
}

function truncmod(a: Int, b: Int): Int
  requires b != 0
  decreases 
{
  (let i ==
    (a % b) in
    (0 <= a || i == 0 ? i : i - (0 < b ? b : -b)))
}

function pureSol(x: Int): Perm


function pureSolutionMap(x: Int): Int


function pureAnt1(x: Int): Int


function pureAnt2(x: Int): Int


function pureModel(x: Int): Perm


function pureVResIn(x: Int): Perm


function pureVResOut(x: Int): Perm


function optGet1(opt: Option[Array]): Array
  requires opt != (none1(): Option[Array])
  decreases 
  ensures (some(result): Option[Array]) == opt
{
  (option_get(opt): Array)
}

function type(type1: Ref): Int
  decreases 
  ensures result >= 0
  ensures result <= 4
  ensures type1 == null ==> result == 0
  ensures type1 != null ==> result != 0


function subtype(subtype1: Int, subtype2: Int): Bool
  requires subtype1 >= 0
  requires subtype1 <= 4
  requires subtype2 >= 0
  requires subtype2 <= 4
  decreases 
{
  (subtype1 == 0 ==> true) &&
  ((subtype1 == 4 ==> subtype2 == 4) && (subtype1 == 1 ==> subtype2 == 1) &&
  (subtype1 == 2 ==> subtype2 == 2) &&
  (subtype1 == 3 ==> subtype2 == 3))
}

method unknown(tid: Int, expression: Bool) returns (res: Void)
  requires expression


method unknown9(tid: Int, format: Option[Array]) returns (res: Int)


method unknown10(tid: Int, size: Int) returns (res: Option[Array])


method unknown11(tid: Int, ptr: Option[Array]) returns (res: Void)


method lemmaNonlinear(tid: Int, a: Int, b: Int, maxA: Int)
  returns (res: Void)
  requires 0 <= a
  requires 0 < b
  requires a < maxA
  decreases b
  ensures a * b <= (maxA - 1) * b
{
  {
    var exc: Ref
    var return: Void
    var res1: Void
    exc := null
    if (1 < b) {
      res1 := lemmaNonlinear(tid, a, b - 1, maxA)
      assert a * (b - 1) <= maxA * (b - 1)
    }
    label END
    res := return
    label BUBBLE
    assert exc == null
  }
}

method lemma4dAccess(tid: Int, a: Int, b: Int, c: Int, d: Int, strideA: Int,
  strideB: Int, strideC: Int, strideD: Int, extentA: Int, extentB: Int, extentC: Int,
  extentD: Int)
  returns (res: Void)
  requires 0 <= a
  requires a < extentA
  requires 0 <= b
  requires b < extentB
  requires 0 <= c
  requires c < extentC
  requires 0 <= d
  requires d < extentD
  requires 0 < strideA
  requires extentA * strideA <= strideB
  requires extentB * strideB <= strideC
  requires extentC * strideC <= strideD
  ensures a * strideA + b * strideB < strideB * extentB
  ensures a * strideA + b * strideB + c * strideC < strideC * extentC
  ensures a * strideA + b * strideB + c * strideC + d * strideD <
    strideD * extentD
{
  {
    var exc: Ref
    var return: Void
    var res1: Void
    var res2: Void
    var res3: Void
    var res4: Void
    exc := null
    res1 := lemmaNonlinear(tid, a, strideA, extentA)
    res2 := lemmaNonlinear(tid, b, strideB, extentB)
    res3 := lemmaNonlinear(tid, c, strideC, extentC)
    res4 := lemmaNonlinear(tid, d, strideD, extentD)
    label END
    res := return
    label BUBBLE
    assert exc == null
  }
}

method subDirection(tid: Int, solBuffer: Option[Array], solutionMapBuffer: Option[Array],
  ant1Buffer: Option[Array], ant2Buffer: Option[Array], modelBuffer: Option[Array],
  vResInBuffer: Option[Array], solutionIndex0: Int, nDirSol: Int, nVis: Int,
  nSolutions: Int, nAntennas: Int, vResOutBuffer: Option[Array])
  returns (res: Int)
  requires 0 <= solutionIndex0
  requires 0 <= nDirSol
  requires solutionIndex0 + nDirSol <= nSolutions
  requires (forall _0: Int ::
      { pureSolutionMap(_0) }
      0 <= _0 && _0 < nVis ==> solutionIndex0 <= pureSolutionMap(_0))
  requires (forall _0: Int ::
      { pureSolutionMap(_0) }
      0 <= _0 && _0 < nVis ==>
      pureSolutionMap(_0) < solutionIndex0 + nDirSol)
  requires (forall _0: Int ::
      { pureAnt1(_0) }
      0 <= _0 && _0 < nVis ==> 0 <= pureAnt1(_0))
  requires (forall _0: Int ::
      { pureAnt1(_0) }
      0 <= _0 && _0 < nVis ==> pureAnt1(_0) < nAntennas)
  requires (forall _0: Int ::
      { pureAnt2(_0) }
      0 <= _0 && _0 < nVis ==> 0 <= pureAnt2(_0))
  requires (forall _0: Int ::
      { pureAnt2(_0) }
      0 <= _0 && _0 < nVis ==> pureAnt2(_0) < nAntennas)
  requires (let buf ==
      (solBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf != (none1(): Option[Array]) && alen(optGet1(buf)) == 1 &&
          acc(aloc(optGet1(buf), 0).ref, p) &&
          acc(aloc(optGet1(buf), 0).ref.dim, p) &&
          aloc(optGet1(buf), 0).ref.dim != (none1(): Option[Array]) &&
          alen(optGet1(aloc(optGet1(buf), 0).ref.dim)) == nDims &&
          acc(aloc(optGet1(buf), 0).ref.host, p) &&
          aloc(optGet1(buf), 0).ref.host != (none1(): Option[Array]))))
  requires (let dim3 ==
      (aloc(optGet1(solBuffer), 0).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires (let dim3 ==
      (aloc(optGet1(solBuffer), 0).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires (let dim3 ==
      (aloc(optGet1(solBuffer), 0).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires (let dim3 ==
      (aloc(optGet1(solBuffer), 0).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires alen(optGet1(aloc(optGet1(solBuffer), 0).ref.host)) ==
    aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 0).ref.extent *
    aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 1).ref.extent *
    aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 2).ref.extent *
    aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 3).ref.extent
  requires (let buf ==
      (solutionMapBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (1) in
          buf != (none1(): Option[Array]) && alen(optGet1(buf)) == 1 &&
          acc(aloc(optGet1(buf), 0).ref, p) &&
          acc(aloc(optGet1(buf), 0).ref.dim1, p) &&
          aloc(optGet1(buf), 0).ref.dim1 != (none1(): Option[Array]) &&
          alen(optGet1(aloc(optGet1(buf), 0).ref.dim1)) == nDims &&
          acc(aloc(optGet1(buf), 0).ref.host1, p) &&
          aloc(optGet1(buf), 0).ref.host1 != (none1(): Option[Array]))))
  requires (let dim3 ==
      (aloc(optGet1(solutionMapBuffer), 0).ref.dim1) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires alen(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.host1)) ==
    aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.dim1), 0).ref.extent
  requires (let buf ==
      (ant1Buffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (1) in
          buf != (none1(): Option[Array]) && alen(optGet1(buf)) == 1 &&
          acc(aloc(optGet1(buf), 0).ref, p) &&
          acc(aloc(optGet1(buf), 0).ref.dim1, p) &&
          aloc(optGet1(buf), 0).ref.dim1 != (none1(): Option[Array]) &&
          alen(optGet1(aloc(optGet1(buf), 0).ref.dim1)) == nDims &&
          acc(aloc(optGet1(buf), 0).ref.host1, p) &&
          aloc(optGet1(buf), 0).ref.host1 != (none1(): Option[Array]))))
  requires (let dim3 ==
      (aloc(optGet1(ant1Buffer), 0).ref.dim1) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires alen(optGet1(aloc(optGet1(ant1Buffer), 0).ref.host1)) ==
    aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.dim1), 0).ref.extent
  requires (let buf ==
      (ant2Buffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (1) in
          buf != (none1(): Option[Array]) && alen(optGet1(buf)) == 1 &&
          acc(aloc(optGet1(buf), 0).ref, p) &&
          acc(aloc(optGet1(buf), 0).ref.dim1, p) &&
          aloc(optGet1(buf), 0).ref.dim1 != (none1(): Option[Array]) &&
          alen(optGet1(aloc(optGet1(buf), 0).ref.dim1)) == nDims &&
          acc(aloc(optGet1(buf), 0).ref.host1, p) &&
          aloc(optGet1(buf), 0).ref.host1 != (none1(): Option[Array]))))
  requires (let dim3 ==
      (aloc(optGet1(ant2Buffer), 0).ref.dim1) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires alen(optGet1(aloc(optGet1(ant2Buffer), 0).ref.host1)) ==
    aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.dim1), 0).ref.extent
  requires (let buf ==
      (modelBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf != (none1(): Option[Array]) && alen(optGet1(buf)) == 1 &&
          acc(aloc(optGet1(buf), 0).ref, p) &&
          acc(aloc(optGet1(buf), 0).ref.dim2, p) &&
          aloc(optGet1(buf), 0).ref.dim2 != (none1(): Option[Array]) &&
          alen(optGet1(aloc(optGet1(buf), 0).ref.dim2)) == nDims &&
          acc(aloc(optGet1(buf), 0).ref.host2, p) &&
          aloc(optGet1(buf), 0).ref.host2 != (none1(): Option[Array]))))
  requires (let dim3 ==
      (aloc(optGet1(modelBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires (let dim3 ==
      (aloc(optGet1(modelBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires (let dim3 ==
      (aloc(optGet1(modelBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires (let dim3 ==
      (aloc(optGet1(modelBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires alen(optGet1(aloc(optGet1(modelBuffer), 0).ref.host2)) ==
    aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 0).ref.extent *
    aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 1).ref.extent *
    aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 2).ref.extent *
    aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 3).ref.extent
  requires (let buf ==
      (vResInBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf != (none1(): Option[Array]) && alen(optGet1(buf)) == 1 &&
          acc(aloc(optGet1(buf), 0).ref, p) &&
          acc(aloc(optGet1(buf), 0).ref.dim2, p) &&
          aloc(optGet1(buf), 0).ref.dim2 != (none1(): Option[Array]) &&
          alen(optGet1(aloc(optGet1(buf), 0).ref.dim2)) == nDims &&
          acc(aloc(optGet1(buf), 0).ref.host2, p) &&
          aloc(optGet1(buf), 0).ref.host2 != (none1(): Option[Array]))))
  requires (let dim3 ==
      (aloc(optGet1(vResInBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires (let dim3 ==
      (aloc(optGet1(vResInBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires (let dim3 ==
      (aloc(optGet1(vResInBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires (let dim3 ==
      (aloc(optGet1(vResInBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires alen(optGet1(aloc(optGet1(vResInBuffer), 0).ref.host2)) ==
    aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 0).ref.extent *
    aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 1).ref.extent *
    aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 2).ref.extent *
    aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 3).ref.extent
  requires (let buf ==
      (vResOutBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf != (none1(): Option[Array]) && alen(optGet1(buf)) == 1 &&
          acc(aloc(optGet1(buf), 0).ref, p) &&
          acc(aloc(optGet1(buf), 0).ref.dim2, p) &&
          aloc(optGet1(buf), 0).ref.dim2 != (none1(): Option[Array]) &&
          alen(optGet1(aloc(optGet1(buf), 0).ref.dim2)) == nDims &&
          acc(aloc(optGet1(buf), 0).ref.host2, p) &&
          aloc(optGet1(buf), 0).ref.host2 != (none1(): Option[Array]))))
  requires (let dim3 ==
      (aloc(optGet1(vResOutBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires (let dim3 ==
      (aloc(optGet1(vResOutBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires (let dim3 ==
      (aloc(optGet1(vResOutBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires (let dim3 ==
      (aloc(optGet1(vResOutBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  requires alen(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.host2)) ==
    aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 0).ref.extent *
    aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 1).ref.extent *
    aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 2).ref.extent *
    aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 3).ref.extent
  requires aloc(optGet1(ant1Buffer), 0).ref.host1 !=
    aloc(optGet1(solutionMapBuffer), 0).ref.host1
  requires aloc(optGet1(ant2Buffer), 0).ref.host1 !=
    aloc(optGet1(solutionMapBuffer), 0).ref.host1
  requires aloc(optGet1(ant2Buffer), 0).ref.host1 !=
    aloc(optGet1(ant1Buffer), 0).ref.host1
  requires aloc(optGet1(modelBuffer), 0).ref.host2 !=
    aloc(optGet1(solBuffer), 0).ref.host
  requires aloc(optGet1(vResInBuffer), 0).ref.host2 !=
    aloc(optGet1(solBuffer), 0).ref.host
  requires aloc(optGet1(vResInBuffer), 0).ref.host2 !=
    aloc(optGet1(modelBuffer), 0).ref.host2
  requires aloc(optGet1(vResOutBuffer), 0).ref.host2 !=
    aloc(optGet1(solBuffer), 0).ref.host
  requires aloc(optGet1(vResOutBuffer), 0).ref.host2 !=
    aloc(optGet1(modelBuffer), 0).ref.host2
  requires aloc(optGet1(vResOutBuffer), 0).ref.host2 !=
    aloc(optGet1(vResInBuffer), 0).ref.host2
  requires aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.dim1), 0).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.dim1), 0).ref.extent ==
    nVis
  requires aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.dim1), 0).ref.stride ==
    1
  requires (forall preferred_arrayseq___0__: Int ::
      { aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.host1), preferred_arrayseq___0__).int }
      0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
      acc(aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.host1), preferred_arrayseq___0__).int, 1 *
      write /
      2))
  requires (forall preferred_arrayseq___0__: Int ::
      { aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.host1), preferred_arrayseq___0__).int }
      0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
      aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.host1), preferred_arrayseq___0__).int ==
      pureAnt1(preferred_arrayseq___0__))
  requires aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.dim1), 0).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.dim1), 0).ref.extent ==
    nVis
  requires aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.dim1), 0).ref.stride ==
    1
  requires (forall preferred_arrayseq___0__: Int ::
      { aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.host1), preferred_arrayseq___0__).int }
      0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
      acc(aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.host1), preferred_arrayseq___0__).int, 1 *
      write /
      2))
  requires (forall preferred_arrayseq___0__: Int ::
      { aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.host1), preferred_arrayseq___0__).int }
      0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
      aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.host1), preferred_arrayseq___0__).int ==
      pureAnt2(preferred_arrayseq___0__))
  requires aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 0).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 0).ref.extent ==
    2
  requires aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 0).ref.stride ==
    1
  requires aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 1).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 1).ref.extent ==
    2
  requires aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 1).ref.stride ==
    2
  requires aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 2).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 2).ref.extent ==
    2
  requires aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 2).ref.stride ==
    4
  requires aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 3).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 3).ref.extent ==
    nVis
  requires aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 3).ref.stride ==
    8
  requires (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
      { aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
      0 <=
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
      8 * nVis ==>
      acc(aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
      write /
      2))
  requires (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
      { aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
      0 <=
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
      8 * nVis ==>
      aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
      pureModel(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
  requires aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 0).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 0).ref.extent ==
    2
  requires aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 0).ref.stride ==
    1
  requires aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 1).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 1).ref.extent ==
    2
  requires aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 1).ref.stride ==
    2
  requires aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 2).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 2).ref.extent ==
    nSolutions
  requires aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 2).ref.stride ==
    4
  requires aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 3).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 3).ref.extent ==
    nAntennas
  requires aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 3).ref.stride ==
    nSolutions * 4
  requires (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
      { aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.host), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
      0 <=
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
      4 * nSolutions * nAntennas ==>
      acc(aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.host), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
      write /
      2))
  requires (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
      { aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.host), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
      0 <=
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
      4 * nSolutions * nAntennas ==>
      aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.host), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
      pureSol(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
  requires aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.dim1), 0).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.dim1), 0).ref.extent ==
    nVis
  requires aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.dim1), 0).ref.stride ==
    1
  requires (forall preferred_arrayseq___0__: Int ::
      { aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.host1), preferred_arrayseq___0__).int }
      0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
      acc(aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.host1), preferred_arrayseq___0__).int, 1 *
      write /
      2))
  requires (forall preferred_arrayseq___0__: Int ::
      { aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.host1), preferred_arrayseq___0__).int }
      0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
      aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.host1), preferred_arrayseq___0__).int ==
      pureSolutionMap(preferred_arrayseq___0__))
  requires aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 0).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 0).ref.extent ==
    2
  requires aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 0).ref.stride ==
    1
  requires aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 1).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 1).ref.extent ==
    2
  requires aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 1).ref.stride ==
    2
  requires aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 2).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 2).ref.extent ==
    2
  requires aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 2).ref.stride ==
    4
  requires aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 3).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 3).ref.extent ==
    nVis
  requires aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 3).ref.stride ==
    8
  requires (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
      { aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
      0 <=
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
      8 * nVis ==>
      acc(aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
      write /
      2))
  requires (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
      { aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
      0 <=
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
      8 * nVis ==>
      aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
      pureVResIn(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
  requires aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 0).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 0).ref.extent ==
    2
  requires aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 0).ref.stride ==
    1
  requires aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 1).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 1).ref.extent ==
    2
  requires aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 1).ref.stride ==
    2
  requires aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 2).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 2).ref.extent ==
    2
  requires aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 2).ref.stride ==
    4
  requires aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 3).ref.min ==
    0
  requires aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 3).ref.extent ==
    nVis
  requires aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 3).ref.stride ==
    8
  requires (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
      { aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
      0 <=
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
      8 * nVis ==>
      acc(aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
      write))
  ensures 0 <= solutionIndex0
  ensures 0 <= nDirSol
  ensures solutionIndex0 + nDirSol <= nSolutions
  ensures (forall _0: Int ::
      { pureSolutionMap(_0) }
      0 <= _0 && _0 < nVis ==> solutionIndex0 <= pureSolutionMap(_0))
  ensures (forall _0: Int ::
      { pureSolutionMap(_0) }
      0 <= _0 && _0 < nVis ==>
      pureSolutionMap(_0) < solutionIndex0 + nDirSol)
  ensures (forall _0: Int ::
      { pureAnt1(_0) }
      0 <= _0 && _0 < nVis ==> 0 <= pureAnt1(_0))
  ensures (forall _0: Int ::
      { pureAnt1(_0) }
      0 <= _0 && _0 < nVis ==> pureAnt1(_0) < nAntennas)
  ensures (forall _0: Int ::
      { pureAnt2(_0) }
      0 <= _0 && _0 < nVis ==> 0 <= pureAnt2(_0))
  ensures (forall _0: Int ::
      { pureAnt2(_0) }
      0 <= _0 && _0 < nVis ==> pureAnt2(_0) < nAntennas)
  ensures (let buf ==
      (solBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf != (none1(): Option[Array]) && alen(optGet1(buf)) == 1 &&
          acc(aloc(optGet1(buf), 0).ref, p) &&
          acc(aloc(optGet1(buf), 0).ref.dim, p) &&
          aloc(optGet1(buf), 0).ref.dim != (none1(): Option[Array]) &&
          alen(optGet1(aloc(optGet1(buf), 0).ref.dim)) == nDims &&
          acc(aloc(optGet1(buf), 0).ref.host, p) &&
          aloc(optGet1(buf), 0).ref.host != (none1(): Option[Array]))))
  ensures (let dim3 ==
      (aloc(optGet1(solBuffer), 0).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures (let dim3 ==
      (aloc(optGet1(solBuffer), 0).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures (let dim3 ==
      (aloc(optGet1(solBuffer), 0).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures (let dim3 ==
      (aloc(optGet1(solBuffer), 0).ref.dim) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures alen(optGet1(aloc(optGet1(solBuffer), 0).ref.host)) ==
    aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 0).ref.extent *
    aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 1).ref.extent *
    aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 2).ref.extent *
    aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 3).ref.extent
  ensures (let buf ==
      (solutionMapBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (1) in
          buf != (none1(): Option[Array]) && alen(optGet1(buf)) == 1 &&
          acc(aloc(optGet1(buf), 0).ref, p) &&
          acc(aloc(optGet1(buf), 0).ref.dim1, p) &&
          aloc(optGet1(buf), 0).ref.dim1 != (none1(): Option[Array]) &&
          alen(optGet1(aloc(optGet1(buf), 0).ref.dim1)) == nDims &&
          acc(aloc(optGet1(buf), 0).ref.host1, p) &&
          aloc(optGet1(buf), 0).ref.host1 != (none1(): Option[Array]))))
  ensures (let dim3 ==
      (aloc(optGet1(solutionMapBuffer), 0).ref.dim1) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures alen(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.host1)) ==
    aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.dim1), 0).ref.extent
  ensures (let buf ==
      (ant1Buffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (1) in
          buf != (none1(): Option[Array]) && alen(optGet1(buf)) == 1 &&
          acc(aloc(optGet1(buf), 0).ref, p) &&
          acc(aloc(optGet1(buf), 0).ref.dim1, p) &&
          aloc(optGet1(buf), 0).ref.dim1 != (none1(): Option[Array]) &&
          alen(optGet1(aloc(optGet1(buf), 0).ref.dim1)) == nDims &&
          acc(aloc(optGet1(buf), 0).ref.host1, p) &&
          aloc(optGet1(buf), 0).ref.host1 != (none1(): Option[Array]))))
  ensures (let dim3 ==
      (aloc(optGet1(ant1Buffer), 0).ref.dim1) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures alen(optGet1(aloc(optGet1(ant1Buffer), 0).ref.host1)) ==
    aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.dim1), 0).ref.extent
  ensures (let buf ==
      (ant2Buffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (1) in
          buf != (none1(): Option[Array]) && alen(optGet1(buf)) == 1 &&
          acc(aloc(optGet1(buf), 0).ref, p) &&
          acc(aloc(optGet1(buf), 0).ref.dim1, p) &&
          aloc(optGet1(buf), 0).ref.dim1 != (none1(): Option[Array]) &&
          alen(optGet1(aloc(optGet1(buf), 0).ref.dim1)) == nDims &&
          acc(aloc(optGet1(buf), 0).ref.host1, p) &&
          aloc(optGet1(buf), 0).ref.host1 != (none1(): Option[Array]))))
  ensures (let dim3 ==
      (aloc(optGet1(ant2Buffer), 0).ref.dim1) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures alen(optGet1(aloc(optGet1(ant2Buffer), 0).ref.host1)) ==
    aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.dim1), 0).ref.extent
  ensures (let buf ==
      (modelBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf != (none1(): Option[Array]) && alen(optGet1(buf)) == 1 &&
          acc(aloc(optGet1(buf), 0).ref, p) &&
          acc(aloc(optGet1(buf), 0).ref.dim2, p) &&
          aloc(optGet1(buf), 0).ref.dim2 != (none1(): Option[Array]) &&
          alen(optGet1(aloc(optGet1(buf), 0).ref.dim2)) == nDims &&
          acc(aloc(optGet1(buf), 0).ref.host2, p) &&
          aloc(optGet1(buf), 0).ref.host2 != (none1(): Option[Array]))))
  ensures (let dim3 ==
      (aloc(optGet1(modelBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures (let dim3 ==
      (aloc(optGet1(modelBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures (let dim3 ==
      (aloc(optGet1(modelBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures (let dim3 ==
      (aloc(optGet1(modelBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures alen(optGet1(aloc(optGet1(modelBuffer), 0).ref.host2)) ==
    aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 0).ref.extent *
    aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 1).ref.extent *
    aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 2).ref.extent *
    aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 3).ref.extent
  ensures (let buf ==
      (vResInBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf != (none1(): Option[Array]) && alen(optGet1(buf)) == 1 &&
          acc(aloc(optGet1(buf), 0).ref, p) &&
          acc(aloc(optGet1(buf), 0).ref.dim2, p) &&
          aloc(optGet1(buf), 0).ref.dim2 != (none1(): Option[Array]) &&
          alen(optGet1(aloc(optGet1(buf), 0).ref.dim2)) == nDims &&
          acc(aloc(optGet1(buf), 0).ref.host2, p) &&
          aloc(optGet1(buf), 0).ref.host2 != (none1(): Option[Array]))))
  ensures (let dim3 ==
      (aloc(optGet1(vResInBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures (let dim3 ==
      (aloc(optGet1(vResInBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures (let dim3 ==
      (aloc(optGet1(vResInBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures (let dim3 ==
      (aloc(optGet1(vResInBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures alen(optGet1(aloc(optGet1(vResInBuffer), 0).ref.host2)) ==
    aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 0).ref.extent *
    aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 1).ref.extent *
    aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 2).ref.extent *
    aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 3).ref.extent
  ensures (let buf ==
      (vResOutBuffer) in
      (let p ==
        (1 * write / 2) in
        (let nDims ==
          (4) in
          buf != (none1(): Option[Array]) && alen(optGet1(buf)) == 1 &&
          acc(aloc(optGet1(buf), 0).ref, p) &&
          acc(aloc(optGet1(buf), 0).ref.dim2, p) &&
          aloc(optGet1(buf), 0).ref.dim2 != (none1(): Option[Array]) &&
          alen(optGet1(aloc(optGet1(buf), 0).ref.dim2)) == nDims &&
          acc(aloc(optGet1(buf), 0).ref.host2, p) &&
          aloc(optGet1(buf), 0).ref.host2 != (none1(): Option[Array]))))
  ensures (let dim3 ==
      (aloc(optGet1(vResOutBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (0) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures (let dim3 ==
      (aloc(optGet1(vResOutBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (1) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures (let dim3 ==
      (aloc(optGet1(vResOutBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (2) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures (let dim3 ==
      (aloc(optGet1(vResOutBuffer), 0).ref.dim2) in
      (let p ==
        (1 * write / 2) in
        (let i ==
          (3) in
          acc(aloc(optGet1(dim3), i).ref, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.min, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.stride, 1 * write / 2) &&
          acc(aloc(optGet1(dim3), i).ref.extent, 1 * write / 2))))
  ensures alen(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.host2)) ==
    aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 0).ref.extent *
    aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 1).ref.extent *
    aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 2).ref.extent *
    aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 3).ref.extent
  ensures aloc(optGet1(ant1Buffer), 0).ref.host1 !=
    aloc(optGet1(solutionMapBuffer), 0).ref.host1
  ensures aloc(optGet1(ant2Buffer), 0).ref.host1 !=
    aloc(optGet1(solutionMapBuffer), 0).ref.host1
  ensures aloc(optGet1(ant2Buffer), 0).ref.host1 !=
    aloc(optGet1(ant1Buffer), 0).ref.host1
  ensures aloc(optGet1(modelBuffer), 0).ref.host2 !=
    aloc(optGet1(solBuffer), 0).ref.host
  ensures aloc(optGet1(vResInBuffer), 0).ref.host2 !=
    aloc(optGet1(solBuffer), 0).ref.host
  ensures aloc(optGet1(vResInBuffer), 0).ref.host2 !=
    aloc(optGet1(modelBuffer), 0).ref.host2
  ensures aloc(optGet1(vResOutBuffer), 0).ref.host2 !=
    aloc(optGet1(solBuffer), 0).ref.host
  ensures aloc(optGet1(vResOutBuffer), 0).ref.host2 !=
    aloc(optGet1(modelBuffer), 0).ref.host2
  ensures aloc(optGet1(vResOutBuffer), 0).ref.host2 !=
    aloc(optGet1(vResInBuffer), 0).ref.host2
  ensures aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.dim1), 0).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.dim1), 0).ref.extent ==
    nVis
  ensures aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.dim1), 0).ref.stride ==
    1
  ensures (forall preferred_arrayseq___0__: Int ::
      { aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.host1), preferred_arrayseq___0__).int }
      0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
      acc(aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.host1), preferred_arrayseq___0__).int, 1 *
      write /
      2))
  ensures (forall preferred_arrayseq___0__: Int ::
      { aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.host1), preferred_arrayseq___0__).int }
      0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
      aloc(optGet1(aloc(optGet1(ant1Buffer), 0).ref.host1), preferred_arrayseq___0__).int ==
      pureAnt1(preferred_arrayseq___0__))
  ensures aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.dim1), 0).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.dim1), 0).ref.extent ==
    nVis
  ensures aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.dim1), 0).ref.stride ==
    1
  ensures (forall preferred_arrayseq___0__: Int ::
      { aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.host1), preferred_arrayseq___0__).int }
      0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
      acc(aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.host1), preferred_arrayseq___0__).int, 1 *
      write /
      2))
  ensures (forall preferred_arrayseq___0__: Int ::
      { aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.host1), preferred_arrayseq___0__).int }
      0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
      aloc(optGet1(aloc(optGet1(ant2Buffer), 0).ref.host1), preferred_arrayseq___0__).int ==
      pureAnt2(preferred_arrayseq___0__))
  ensures aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 0).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 0).ref.extent ==
    2
  ensures aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 0).ref.stride ==
    1
  ensures aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 1).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 1).ref.extent ==
    2
  ensures aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 1).ref.stride ==
    2
  ensures aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 2).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 2).ref.extent ==
    2
  ensures aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 2).ref.stride ==
    4
  ensures aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 3).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 3).ref.extent ==
    nVis
  ensures aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.dim2), 3).ref.stride ==
    8
  ensures (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
      { aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
      0 <=
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
      8 * nVis ==>
      acc(aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
      write /
      2))
  ensures (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
      { aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
      0 <=
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
      8 * nVis ==>
      aloc(optGet1(aloc(optGet1(modelBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
      pureModel(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
  ensures aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 0).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 0).ref.extent ==
    2
  ensures aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 0).ref.stride ==
    1
  ensures aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 1).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 1).ref.extent ==
    2
  ensures aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 1).ref.stride ==
    2
  ensures aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 2).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 2).ref.extent ==
    nSolutions
  ensures aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 2).ref.stride ==
    4
  ensures aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 3).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 3).ref.extent ==
    nAntennas
  ensures aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.dim), 3).ref.stride ==
    nSolutions * 4
  ensures (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
      { aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.host), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
      0 <=
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
      4 * nSolutions * nAntennas ==>
      acc(aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.host), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
      write /
      2))
  ensures (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
      { aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.host), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
      0 <=
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
      4 * nSolutions * nAntennas ==>
      aloc(optGet1(aloc(optGet1(solBuffer), 0).ref.host), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
      pureSol(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
  ensures aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.dim1), 0).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.dim1), 0).ref.extent ==
    nVis
  ensures aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.dim1), 0).ref.stride ==
    1
  ensures (forall preferred_arrayseq___0__: Int ::
      { aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.host1), preferred_arrayseq___0__).int }
      0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
      acc(aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.host1), preferred_arrayseq___0__).int, 1 *
      write /
      2))
  ensures (forall preferred_arrayseq___0__: Int ::
      { aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.host1), preferred_arrayseq___0__).int }
      0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
      aloc(optGet1(aloc(optGet1(solutionMapBuffer), 0).ref.host1), preferred_arrayseq___0__).int ==
      pureSolutionMap(preferred_arrayseq___0__))
  ensures aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 0).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 0).ref.extent ==
    2
  ensures aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 0).ref.stride ==
    1
  ensures aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 1).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 1).ref.extent ==
    2
  ensures aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 1).ref.stride ==
    2
  ensures aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 2).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 2).ref.extent ==
    2
  ensures aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 2).ref.stride ==
    4
  ensures aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 3).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 3).ref.extent ==
    nVis
  ensures aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.dim2), 3).ref.stride ==
    8
  ensures (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
      { aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
      0 <=
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
      8 * nVis ==>
      acc(aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
      write /
      2))
  ensures (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
      { aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
      0 <=
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
      8 * nVis ==>
      aloc(optGet1(aloc(optGet1(vResInBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
      pureVResIn(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
  ensures aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 0).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 0).ref.extent ==
    2
  ensures aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 0).ref.stride ==
    1
  ensures aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 1).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 1).ref.extent ==
    2
  ensures aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 1).ref.stride ==
    2
  ensures aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 2).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 2).ref.extent ==
    2
  ensures aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 2).ref.stride ==
    4
  ensures aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 3).ref.min ==
    0
  ensures aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 3).ref.extent ==
    nVis
  ensures aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.dim2), 3).ref.stride ==
    8
  ensures (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
      { aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
      0 <=
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
      preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
      8 * nVis ==>
      acc(aloc(optGet1(aloc(optGet1(vResOutBuffer), 0).ref.host2), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
      write))
{
  {
    var exc: Ref
    var return: Int
    var ant1: Option[Array]
    var ant1Min0: Int
    var ant1Extent0: Int
    var ant1Stride0: Int
    var ant2: Option[Array]
    var ant2Min0: Int
    var ant2Extent0: Int
    var ant2Stride0: Int
    var model: Option[Array]
    var modelMin0: Int
    var modelExtent0: Int
    var modelStride0: Int
    var modelMin1: Int
    var modelExtent1: Int
    var modelStride1: Int
    var modelMin2: Int
    var modelExtent2: Int
    var modelStride2: Int
    var modelMin3: Int
    var modelExtent3: Int
    var modelStride3: Int
    var sol: Option[Array]
    var solMin0: Int
    var solExtent0: Int
    var solStride0: Int
    var solMin1: Int
    var solExtent1: Int
    var solStride1: Int
    var solMin2: Int
    var solExtent2: Int
    var solStride2: Int
    var solMin3: Int
    var solExtent3: Int
    var solStride3: Int
    var solutionMap: Option[Array]
    var solutionMapMin0: Int
    var solutionMapExtent0: Int
    var solutionMapStride0: Int
    var vResIn: Option[Array]
    var vResInMin0: Int
    var vResInExtent0: Int
    var vResInStride0: Int
    var vResInMin1: Int
    var vResInExtent1: Int
    var vResInStride1: Int
    var vResInMin2: Int
    var vResInExtent2: Int
    var vResInStride2: Int
    var vResInMin3: Int
    var vResInExtent3: Int
    var vResInStride3: Int
    var vResOut: Option[Array]
    var vResOutMin0: Int
    var vResOutExtent0: Int
    var vResOutStride0: Int
    var vResOutMin1: Int
    var vResOutExtent1: Int
    var vResOutStride1: Int
    var vResOutMin2: Int
    var vResOutExtent2: Int
    var vResOutStride2: Int
    var vResOutMin3: Int
    var vResOutExtent3: Int
    var vResOutStride3: Int
    var vResOutS0Vis: Int
    var vResOutS0J: Int
    var t5755: Bool
    var t5753: Bool
    var t5756: Int
    var vResOutS0I: Int
    var t5759: Bool
    var t5757: Bool
    var t5760: Int
    var vResOutS0C: Int
    var t5714: Bool
    var t5716: Bool
    var _101: Int
    var t5718: Int
    var _102: Int
    var t5719: Int
    var _103: Perm
    var t5721: Perm
    var _104: Int
    var t5722: Int
    var _105: Perm
    var t5723: Perm
    var t5724: Perm
    var t5725: Perm
    var _106: Perm
    var t5727: Perm
    var t5728: Perm
    var t5729: Perm
    var _107: Perm
    var t5730: Perm
    var t5731: Bool
    var t5732: Bool
    var t5734: Bool
    var _108: Perm
    var t5735: Perm
    var t5736: Perm
    var t5737: Perm
    var t5738: Perm
    var t5739: Perm
    var _109: Perm
    var t5740: Perm
    var _110: Perm
    var t5742: Perm
    var t5743: Perm
    var t5744: Perm
    var _111: Perm
    var t5745: Perm
    var t5746: Perm
    var t5747: Perm
    var t5748: Perm
    var t5749: Perm
    var t5750: Perm
    var t5751: Perm
    var buf: Option[Array]
    var unknown15: Option[Array]
    var buf1: Option[Array]
    var d: Int
    var unknown16: Int
    var buf2: Option[Array]
    var d1: Int
    var unknown17: Int
    var buf3: Option[Array]
    var d2: Int
    var unknown18: Int
    var buf4: Option[Array]
    var unknown19: Option[Array]
    var buf5: Option[Array]
    var d3: Int
    var unknown20: Int
    var buf6: Option[Array]
    var d4: Int
    var unknown21: Int
    var buf7: Option[Array]
    var d5: Int
    var unknown22: Int
    var buf8: Option[Array]
    var unknown23: Option[Array]
    var buf9: Option[Array]
    var d6: Int
    var unknown24: Int
    var buf10: Option[Array]
    var d7: Int
    var unknown25: Int
    var buf11: Option[Array]
    var d8: Int
    var unknown26: Int
    var buf12: Option[Array]
    var d9: Int
    var unknown27: Int
    var buf13: Option[Array]
    var d10: Int
    var unknown28: Int
    var buf14: Option[Array]
    var d11: Int
    var unknown29: Int
    var buf15: Option[Array]
    var d12: Int
    var unknown30: Int
    var buf16: Option[Array]
    var d13: Int
    var unknown31: Int
    var buf17: Option[Array]
    var d14: Int
    var unknown32: Int
    var buf18: Option[Array]
    var d15: Int
    var unknown33: Int
    var buf19: Option[Array]
    var d16: Int
    var unknown34: Int
    var buf20: Option[Array]
    var d17: Int
    var unknown35: Int
    var buf21: Option[Array]
    var unknown36: Option[Array]
    var buf22: Option[Array]
    var d18: Int
    var unknown37: Int
    var buf23: Option[Array]
    var d19: Int
    var unknown38: Int
    var buf24: Option[Array]
    var d20: Int
    var unknown39: Int
    var buf25: Option[Array]
    var d21: Int
    var unknown40: Int
    var buf26: Option[Array]
    var d22: Int
    var unknown41: Int
    var buf27: Option[Array]
    var d23: Int
    var unknown42: Int
    var buf28: Option[Array]
    var d24: Int
    var unknown43: Int
    var buf29: Option[Array]
    var d25: Int
    var unknown44: Int
    var buf30: Option[Array]
    var d26: Int
    var unknown45: Int
    var buf31: Option[Array]
    var d27: Int
    var unknown46: Int
    var buf32: Option[Array]
    var d28: Int
    var unknown47: Int
    var buf33: Option[Array]
    var d29: Int
    var unknown48: Int
    var buf34: Option[Array]
    var unknown49: Option[Array]
    var buf35: Option[Array]
    var d30: Int
    var unknown50: Int
    var buf36: Option[Array]
    var d31: Int
    var unknown51: Int
    var buf37: Option[Array]
    var d32: Int
    var unknown52: Int
    var buf38: Option[Array]
    var unknown53: Option[Array]
    var buf39: Option[Array]
    var d33: Int
    var unknown54: Int
    var buf40: Option[Array]
    var d34: Int
    var unknown55: Int
    var buf41: Option[Array]
    var d35: Int
    var unknown56: Int
    var buf42: Option[Array]
    var d36: Int
    var unknown57: Int
    var buf43: Option[Array]
    var d37: Int
    var unknown58: Int
    var buf44: Option[Array]
    var d38: Int
    var unknown59: Int
    var buf45: Option[Array]
    var d39: Int
    var unknown60: Int
    var buf46: Option[Array]
    var d40: Int
    var unknown61: Int
    var buf47: Option[Array]
    var d41: Int
    var unknown62: Int
    var buf48: Option[Array]
    var d42: Int
    var unknown63: Int
    var buf49: Option[Array]
    var d43: Int
    var unknown64: Int
    var buf50: Option[Array]
    var d44: Int
    var unknown65: Int
    var buf51: Option[Array]
    var unknown66: Option[Array]
    var buf52: Option[Array]
    var d45: Int
    var unknown67: Int
    var buf53: Option[Array]
    var d46: Int
    var unknown68: Int
    var buf54: Option[Array]
    var d47: Int
    var unknown69: Int
    var buf55: Option[Array]
    var d48: Int
    var unknown70: Int
    var buf56: Option[Array]
    var d49: Int
    var unknown71: Int
    var buf57: Option[Array]
    var d50: Int
    var unknown72: Int
    var buf58: Option[Array]
    var d51: Int
    var unknown73: Int
    var buf59: Option[Array]
    var d52: Int
    var unknown74: Int
    var buf60: Option[Array]
    var d53: Int
    var unknown75: Int
    var buf61: Option[Array]
    var d54: Int
    var unknown76: Int
    var buf62: Option[Array]
    var d55: Int
    var unknown77: Int
    var buf63: Option[Array]
    var d56: Int
    var unknown78: Int
    var tid1: Int
    var e: Bool
    var unknown79: Void
    var tid2: Int
    var e1: Bool
    var unknown80: Void
    var tid3: Int
    var e2: Bool
    var unknown81: Void
    var tid4: Int
    var e3: Bool
    var unknown82: Void
    var tid5: Int
    var e4: Bool
    var unknown83: Void
    var tid6: Int
    var e5: Bool
    var unknown84: Void
    var tid7: Int
    var e6: Bool
    var unknown85: Void
    var tid8: Int
    var e7: Bool
    var unknown86: Void
    var tid9: Int
    var e8: Bool
    var unknown87: Void
    var tid10: Int
    var e9: Bool
    var unknown88: Void
    var tid11: Int
    var e10: Bool
    var unknown89: Void
    var tid12: Int
    var e11: Bool
    var unknown90: Void
    var tid13: Int
    var e12: Bool
    var unknown91: Void
    var tid14: Int
    var e13: Bool
    var unknown92: Void
    var tid15: Int
    var e14: Bool
    var unknown93: Void
    var tid16: Int
    var e15: Bool
    var unknown94: Void
    var tid17: Int
    var e16: Bool
    var unknown95: Void
    var tid18: Int
    var e17: Bool
    var unknown96: Void
    var tid19: Int
    var e18: Bool
    var unknown97: Void
    var tid20: Int
    var e19: Bool
    var unknown98: Void
    var tid21: Int
    var e20: Bool
    var unknown99: Void
    var tid22: Int
    var e21: Bool
    var unknown100: Void
    var tid23: Int
    var e22: Bool
    var unknown101: Void
    var tid24: Int
    var e23: Bool
    var unknown102: Void
    var tid25: Int
    var e24: Bool
    var unknown103: Void
    var tid26: Int
    var e25: Bool
    var unknown104: Void
    var tid27: Int
    var e26: Bool
    var unknown105: Void
    var tid28: Int
    var e27: Bool
    var unknown106: Void
    var tid29: Int
    var e28: Bool
    var unknown107: Void
    var tid30: Int
    var e29: Bool
    var unknown108: Void
    var tid31: Int
    var e30: Bool
    var unknown109: Void
    var tid32: Int
    var e31: Bool
    var unknown110: Void
    var tid33: Int
    var e32: Bool
    var unknown111: Void
    var tid34: Int
    var e33: Bool
    var unknown112: Void
    var tid35: Int
    var e34: Bool
    var unknown113: Void
    var tid36: Int
    var e35: Bool
    var unknown114: Void
    var tid37: Int
    var e36: Bool
    var unknown115: Void
    var tid38: Int
    var e37: Bool
    var unknown116: Void
    var tid39: Int
    var e38: Bool
    var unknown117: Void
    var tid40: Int
    var e39: Bool
    var unknown118: Void
    var tid41: Int
    var e40: Bool
    var unknown119: Void
    var tid42: Int
    var e41: Bool
    var unknown120: Void
    var tid43: Int
    var e42: Bool
    var unknown121: Void
    var tid44: Int
    var e43: Bool
    var unknown122: Void
    var tid45: Int
    var e44: Bool
    var unknown123: Void
    var tid46: Int
    var e45: Bool
    var unknown124: Void
    var tid47: Int
    var e46: Bool
    var unknown125: Void
    var tid48: Int
    var e47: Bool
    var unknown126: Void
    var tid49: Int
    var e48: Bool
    var unknown127: Void
    var tid50: Int
    var e49: Bool
    var unknown128: Void
    var tid51: Int
    var e50: Bool
    var unknown129: Void
    var tid52: Int
    var e51: Bool
    var unknown130: Void
    var tid53: Int
    var e52: Bool
    var unknown131: Void
    var tid54: Int
    var e53: Bool
    var unknown132: Void
    var tid55: Int
    var e54: Bool
    var unknown133: Void
    var tid56: Int
    var e55: Bool
    var unknown134: Void
    var tid57: Int
    var e56: Bool
    var unknown135: Void
    var flatten: Option[Array]
    var flatten1: Option[Array]
    var flatten2: Int
    var flatten3: Int
    var flatten4: Int
    var flatten5: Int
    var flatten6: Int
    var flatten7: Int
    var flatten8: Int
    var flatten9: Int
    var flatten10: Int
    var flatten11: Option[Array]
    var flatten12: Option[Array]
    var flatten13: Int
    var flatten14: Int
    var flatten15: Int
    var flatten16: Int
    var flatten17: Int
    var flatten18: Int
    var flatten19: Int
    var flatten20: Int
    var flatten21: Int
    var flatten22: Option[Array]
    var flatten23: Option[Array]
    var flatten24: Int
    var flatten25: Int
    var flatten26: Int
    var flatten27: Int
    var flatten28: Int
    var flatten29: Int
    var flatten30: Int
    var flatten31: Int
    var flatten32: Int
    var flatten33: Int
    var flatten34: Int
    var flatten35: Int
    var flatten36: Int
    var flatten37: Int
    var flatten38: Int
    var flatten39: Int
    var flatten40: Int
    var flatten41: Int
    var flatten42: Int
    var flatten43: Int
    var flatten44: Int
    var flatten45: Int
    var flatten46: Int
    var flatten47: Int
    var flatten48: Int
    var flatten49: Int
    var flatten50: Int
    var flatten51: Int
    var flatten52: Int
    var flatten53: Int
    var flatten54: Int
    var flatten55: Int
    var flatten56: Int
    var flatten57: Int
    var flatten58: Int
    var flatten59: Int
    var flatten60: Option[Array]
    var flatten61: Option[Array]
    var flatten62: Int
    var flatten63: Int
    var flatten64: Int
    var flatten65: Int
    var flatten66: Int
    var flatten67: Int
    var flatten68: Int
    var flatten69: Int
    var flatten70: Int
    var flatten71: Int
    var flatten72: Int
    var flatten73: Int
    var flatten74: Int
    var flatten75: Int
    var flatten76: Int
    var flatten77: Int
    var flatten78: Int
    var flatten79: Int
    var flatten80: Int
    var flatten81: Int
    var flatten82: Int
    var flatten83: Int
    var flatten84: Int
    var flatten85: Int
    var flatten86: Int
    var flatten87: Int
    var flatten88: Int
    var flatten89: Int
    var flatten90: Int
    var flatten91: Int
    var flatten92: Int
    var flatten93: Int
    var flatten94: Int
    var flatten95: Int
    var flatten96: Int
    var flatten97: Int
    var flatten98: Option[Array]
    var flatten99: Option[Array]
    var flatten100: Int
    var flatten101: Int
    var flatten102: Int
    var flatten103: Int
    var flatten104: Int
    var flatten105: Int
    var flatten106: Int
    var flatten107: Int
    var flatten108: Int
    var flatten109: Option[Array]
    var flatten110: Option[Array]
    var flatten111: Int
    var flatten112: Int
    var flatten113: Int
    var flatten114: Int
    var flatten115: Int
    var flatten116: Int
    var flatten117: Int
    var flatten118: Int
    var flatten119: Int
    var flatten120: Int
    var flatten121: Int
    var flatten122: Int
    var flatten123: Int
    var flatten124: Int
    var flatten125: Int
    var flatten126: Int
    var flatten127: Int
    var flatten128: Int
    var flatten129: Int
    var flatten130: Int
    var flatten131: Int
    var flatten132: Int
    var flatten133: Int
    var flatten134: Int
    var flatten135: Int
    var flatten136: Int
    var flatten137: Int
    var flatten138: Int
    var flatten139: Int
    var flatten140: Int
    var flatten141: Int
    var flatten142: Int
    var flatten143: Int
    var flatten144: Int
    var flatten145: Int
    var flatten146: Int
    var flatten147: Option[Array]
    var flatten148: Option[Array]
    var flatten149: Int
    var flatten150: Int
    var flatten151: Int
    var flatten152: Int
    var flatten153: Int
    var flatten154: Int
    var flatten155: Int
    var flatten156: Int
    var flatten157: Int
    var flatten158: Int
    var flatten159: Int
    var flatten160: Int
    var flatten161: Int
    var flatten162: Int
    var flatten163: Int
    var flatten164: Int
    var flatten165: Int
    var flatten166: Int
    var flatten167: Int
    var flatten168: Int
    var flatten169: Int
    var flatten170: Int
    var flatten171: Int
    var flatten172: Int
    var flatten173: Int
    var flatten174: Int
    var flatten175: Int
    var flatten176: Int
    var flatten177: Int
    var flatten178: Int
    var flatten179: Int
    var flatten180: Int
    var flatten181: Int
    var flatten182: Int
    var flatten183: Int
    var flatten184: Int
    var flatten185: Bool
    var flatten186: Bool
    var flatten187: Bool
    var flatten188: Bool
    var flatten189: Bool
    var flatten190: Bool
    var flatten191: Bool
    var flatten192: Bool
    var flatten193: Bool
    var flatten194: Bool
    var flatten195: Bool
    var flatten196: Bool
    var flatten197: Bool
    var flatten198: Bool
    var flatten199: Bool
    var flatten200: Bool
    var flatten201: Bool
    var flatten202: Bool
    var flatten203: Bool
    var flatten204: Bool
    var flatten205: Bool
    var flatten206: Bool
    var flatten207: Bool
    var flatten208: Bool
    var flatten209: Bool
    var flatten210: Bool
    var flatten211: Bool
    var flatten212: Bool
    var flatten213: Bool
    var flatten214: Bool
    var flatten215: Bool
    var flatten216: Bool
    var flatten217: Bool
    var flatten218: Bool
    var flatten219: Bool
    var flatten220: Bool
    var flatten221: Bool
    var flatten222: Bool
    var flatten223: Bool
    var flatten224: Bool
    var flatten225: Bool
    var flatten226: Bool
    var flatten227: Bool
    var flatten228: Bool
    var flatten229: Bool
    var flatten230: Bool
    var flatten231: Bool
    var flatten232: Bool
    var flatten233: Bool
    var flatten234: Bool
    var flatten235: Bool
    var flatten236: Bool
    var flatten237: Bool
    var flatten238: Bool
    var flatten239: Bool
    var flatten240: Bool
    var flatten241: Bool
    var flatten242: Int
    var flatten243: Int
    var flatten244: Int
    var flatten245: Int
    var flatten246: Bool
    var flatten247: Bool
    var flatten248: Int
    var flatten249: Int
    var flatten250: Int
    var flatten251: Bool
    var flatten252: Bool
    var flatten253: Int
    var flatten254: Int
    var flatten255: Int
    var flatten256: Bool
    var flatten257: Bool
    var flatten258: Int
    var flatten259: Int
    var flatten260: Int
    var res1: Void
    var flatten261: Perm
    var flatten262: Int
    var flatten263: Int
    var res2: Void
    var flatten264: Perm
    var flatten265: Perm
    var flatten266: Perm
    var res3: Void
    var flatten267: Perm
    var flatten268: Perm
    var flatten269: Perm
    var res4: Void
    var flatten270: Perm
    var flatten271: Bool
    var flatten272: Bool
    var flatten273: Bool
    var res5: Void
    var flatten274: Perm
    var flatten275: Perm
    var flatten276: Perm
    var flatten277: Perm
    var flatten278: Perm
    var res6: Void
    var flatten279: Perm
    var res7: Void
    var flatten280: Perm
    var flatten281: Perm
    var flatten282: Perm
    var res8: Void
    var flatten283: Perm
    var flatten284: Perm
    var flatten285: Perm
    var flatten286: Perm
    var flatten287: Perm
    var flatten288: Perm
    var flatten289: Perm
    var flatten290: Int
    var flatten291: Perm
    var flatten292: Int
    var excbeforeloop: Ref
    var excbeforeloop1: Ref
    var excbeforeloop2: Ref
    var excbeforeloop3: Ref
    exc := null
    buf := ant1Buffer
    flatten := aloc(optGet1(buf), 0).ref.host1
    unknown15 := flatten
    goto UNKNOWN
    label UNKNOWN
    flatten1 := unknown15
    ant1 := flatten1
    buf1 := ant1Buffer
    flatten2 := 0
    d := flatten2
    flatten3 := aloc(optGet1(aloc(optGet1(buf1), 0).ref.dim1), d).ref.min
    unknown16 := flatten3
    goto UNKNOWN1
    label UNKNOWN1
    flatten4 := unknown16
    ant1Min0 := flatten4
    buf2 := ant1Buffer
    flatten5 := 0
    d1 := flatten5
    flatten6 := aloc(optGet1(aloc(optGet1(buf2), 0).ref.dim1), d1).ref.extent
    unknown17 := flatten6
    goto UNKNOWN2
    label UNKNOWN2
    flatten7 := unknown17
    ant1Extent0 := flatten7
    buf3 := ant1Buffer
    flatten8 := 0
    d2 := flatten8
    flatten9 := aloc(optGet1(aloc(optGet1(buf3), 0).ref.dim1), d2).ref.stride
    unknown18 := flatten9
    goto UNKNOWN3
    label UNKNOWN3
    flatten10 := unknown18
    ant1Stride0 := flatten10
    buf4 := ant2Buffer
    flatten11 := aloc(optGet1(buf4), 0).ref.host1
    unknown19 := flatten11
    goto UNKNOWN4
    label UNKNOWN4
    flatten12 := unknown19
    ant2 := flatten12
    buf5 := ant2Buffer
    flatten13 := 0
    d3 := flatten13
    flatten14 := aloc(optGet1(aloc(optGet1(buf5), 0).ref.dim1), d3).ref.min
    unknown20 := flatten14
    goto UNKNOWN5
    label UNKNOWN5
    flatten15 := unknown20
    ant2Min0 := flatten15
    buf6 := ant2Buffer
    flatten16 := 0
    d4 := flatten16
    flatten17 := aloc(optGet1(aloc(optGet1(buf6), 0).ref.dim1), d4).ref.extent
    unknown21 := flatten17
    goto UNKNOWN6
    label UNKNOWN6
    flatten18 := unknown21
    ant2Extent0 := flatten18
    buf7 := ant2Buffer
    flatten19 := 0
    d5 := flatten19
    flatten20 := aloc(optGet1(aloc(optGet1(buf7), 0).ref.dim1), d5).ref.stride
    unknown22 := flatten20
    goto UNKNOWN7
    label UNKNOWN7
    flatten21 := unknown22
    ant2Stride0 := flatten21
    buf8 := modelBuffer
    flatten22 := aloc(optGet1(buf8), 0).ref.host2
    unknown23 := flatten22
    goto UNKNOWN8
    label UNKNOWN8
    flatten23 := unknown23
    model := flatten23
    buf9 := modelBuffer
    flatten24 := 0
    d6 := flatten24
    flatten25 := aloc(optGet1(aloc(optGet1(buf9), 0).ref.dim2), d6).ref.min
    unknown24 := flatten25
    goto UNKNOWN9
    label UNKNOWN9
    flatten26 := unknown24
    modelMin0 := flatten26
    buf10 := modelBuffer
    flatten27 := 0
    d7 := flatten27
    flatten28 := aloc(optGet1(aloc(optGet1(buf10), 0).ref.dim2), d7).ref.extent
    unknown25 := flatten28
    goto UNKNOWN10
    label UNKNOWN10
    flatten29 := unknown25
    modelExtent0 := flatten29
    buf11 := modelBuffer
    flatten30 := 0
    d8 := flatten30
    flatten31 := aloc(optGet1(aloc(optGet1(buf11), 0).ref.dim2), d8).ref.stride
    unknown26 := flatten31
    goto UNKNOWN11
    label UNKNOWN11
    flatten32 := unknown26
    modelStride0 := flatten32
    buf12 := modelBuffer
    flatten33 := 1
    d9 := flatten33
    flatten34 := aloc(optGet1(aloc(optGet1(buf12), 0).ref.dim2), d9).ref.min
    unknown27 := flatten34
    goto UNKNOWN12
    label UNKNOWN12
    flatten35 := unknown27
    modelMin1 := flatten35
    buf13 := modelBuffer
    flatten36 := 1
    d10 := flatten36
    flatten37 := aloc(optGet1(aloc(optGet1(buf13), 0).ref.dim2), d10).ref.extent
    unknown28 := flatten37
    goto UNKNOWN13
    label UNKNOWN13
    flatten38 := unknown28
    modelExtent1 := flatten38
    buf14 := modelBuffer
    flatten39 := 1
    d11 := flatten39
    flatten40 := aloc(optGet1(aloc(optGet1(buf14), 0).ref.dim2), d11).ref.stride
    unknown29 := flatten40
    goto UNKNOWN14
    label UNKNOWN14
    flatten41 := unknown29
    modelStride1 := flatten41
    buf15 := modelBuffer
    flatten42 := 2
    d12 := flatten42
    flatten43 := aloc(optGet1(aloc(optGet1(buf15), 0).ref.dim2), d12).ref.min
    unknown30 := flatten43
    goto UNKNOWN15
    label UNKNOWN15
    flatten44 := unknown30
    modelMin2 := flatten44
    buf16 := modelBuffer
    flatten45 := 2
    d13 := flatten45
    flatten46 := aloc(optGet1(aloc(optGet1(buf16), 0).ref.dim2), d13).ref.extent
    unknown31 := flatten46
    goto UNKNOWN16
    label UNKNOWN16
    flatten47 := unknown31
    modelExtent2 := flatten47
    buf17 := modelBuffer
    flatten48 := 2
    d14 := flatten48
    flatten49 := aloc(optGet1(aloc(optGet1(buf17), 0).ref.dim2), d14).ref.stride
    unknown32 := flatten49
    goto UNKNOWN17
    label UNKNOWN17
    flatten50 := unknown32
    modelStride2 := flatten50
    buf18 := modelBuffer
    flatten51 := 3
    d15 := flatten51
    flatten52 := aloc(optGet1(aloc(optGet1(buf18), 0).ref.dim2), d15).ref.min
    unknown33 := flatten52
    goto UNKNOWN18
    label UNKNOWN18
    flatten53 := unknown33
    modelMin3 := flatten53
    buf19 := modelBuffer
    flatten54 := 3
    d16 := flatten54
    flatten55 := aloc(optGet1(aloc(optGet1(buf19), 0).ref.dim2), d16).ref.extent
    unknown34 := flatten55
    goto UNKNOWN19
    label UNKNOWN19
    flatten56 := unknown34
    modelExtent3 := flatten56
    buf20 := modelBuffer
    flatten57 := 3
    d17 := flatten57
    flatten58 := aloc(optGet1(aloc(optGet1(buf20), 0).ref.dim2), d17).ref.stride
    unknown35 := flatten58
    goto UNKNOWN20
    label UNKNOWN20
    flatten59 := unknown35
    modelStride3 := flatten59
    buf21 := solBuffer
    flatten60 := aloc(optGet1(buf21), 0).ref.host
    unknown36 := flatten60
    goto UNKNOWN21
    label UNKNOWN21
    flatten61 := unknown36
    sol := flatten61
    buf22 := solBuffer
    flatten62 := 0
    d18 := flatten62
    flatten63 := aloc(optGet1(aloc(optGet1(buf22), 0).ref.dim), d18).ref.min
    unknown37 := flatten63
    goto UNKNOWN22
    label UNKNOWN22
    flatten64 := unknown37
    solMin0 := flatten64
    buf23 := solBuffer
    flatten65 := 0
    d19 := flatten65
    flatten66 := aloc(optGet1(aloc(optGet1(buf23), 0).ref.dim), d19).ref.extent
    unknown38 := flatten66
    goto UNKNOWN23
    label UNKNOWN23
    flatten67 := unknown38
    solExtent0 := flatten67
    buf24 := solBuffer
    flatten68 := 0
    d20 := flatten68
    flatten69 := aloc(optGet1(aloc(optGet1(buf24), 0).ref.dim), d20).ref.stride
    unknown39 := flatten69
    goto UNKNOWN24
    label UNKNOWN24
    flatten70 := unknown39
    solStride0 := flatten70
    buf25 := solBuffer
    flatten71 := 1
    d21 := flatten71
    flatten72 := aloc(optGet1(aloc(optGet1(buf25), 0).ref.dim), d21).ref.min
    unknown40 := flatten72
    goto UNKNOWN25
    label UNKNOWN25
    flatten73 := unknown40
    solMin1 := flatten73
    buf26 := solBuffer
    flatten74 := 1
    d22 := flatten74
    flatten75 := aloc(optGet1(aloc(optGet1(buf26), 0).ref.dim), d22).ref.extent
    unknown41 := flatten75
    goto UNKNOWN26
    label UNKNOWN26
    flatten76 := unknown41
    solExtent1 := flatten76
    buf27 := solBuffer
    flatten77 := 1
    d23 := flatten77
    flatten78 := aloc(optGet1(aloc(optGet1(buf27), 0).ref.dim), d23).ref.stride
    unknown42 := flatten78
    goto UNKNOWN27
    label UNKNOWN27
    flatten79 := unknown42
    solStride1 := flatten79
    buf28 := solBuffer
    flatten80 := 2
    d24 := flatten80
    flatten81 := aloc(optGet1(aloc(optGet1(buf28), 0).ref.dim), d24).ref.min
    unknown43 := flatten81
    goto UNKNOWN28
    label UNKNOWN28
    flatten82 := unknown43
    solMin2 := flatten82
    buf29 := solBuffer
    flatten83 := 2
    d25 := flatten83
    flatten84 := aloc(optGet1(aloc(optGet1(buf29), 0).ref.dim), d25).ref.extent
    unknown44 := flatten84
    goto UNKNOWN29
    label UNKNOWN29
    flatten85 := unknown44
    solExtent2 := flatten85
    buf30 := solBuffer
    flatten86 := 2
    d26 := flatten86
    flatten87 := aloc(optGet1(aloc(optGet1(buf30), 0).ref.dim), d26).ref.stride
    unknown45 := flatten87
    goto UNKNOWN30
    label UNKNOWN30
    flatten88 := unknown45
    solStride2 := flatten88
    buf31 := solBuffer
    flatten89 := 3
    d27 := flatten89
    flatten90 := aloc(optGet1(aloc(optGet1(buf31), 0).ref.dim), d27).ref.min
    unknown46 := flatten90
    goto UNKNOWN31
    label UNKNOWN31
    flatten91 := unknown46
    solMin3 := flatten91
    buf32 := solBuffer
    flatten92 := 3
    d28 := flatten92
    flatten93 := aloc(optGet1(aloc(optGet1(buf32), 0).ref.dim), d28).ref.extent
    unknown47 := flatten93
    goto UNKNOWN32
    label UNKNOWN32
    flatten94 := unknown47
    solExtent3 := flatten94
    buf33 := solBuffer
    flatten95 := 3
    d29 := flatten95
    flatten96 := aloc(optGet1(aloc(optGet1(buf33), 0).ref.dim), d29).ref.stride
    unknown48 := flatten96
    goto UNKNOWN33
    label UNKNOWN33
    flatten97 := unknown48
    solStride3 := flatten97
    buf34 := solutionMapBuffer
    flatten98 := aloc(optGet1(buf34), 0).ref.host1
    unknown49 := flatten98
    goto UNKNOWN34
    label UNKNOWN34
    flatten99 := unknown49
    solutionMap := flatten99
    buf35 := solutionMapBuffer
    flatten100 := 0
    d30 := flatten100
    flatten101 := aloc(optGet1(aloc(optGet1(buf35), 0).ref.dim1), d30).ref.min
    unknown50 := flatten101
    goto UNKNOWN35
    label UNKNOWN35
    flatten102 := unknown50
    solutionMapMin0 := flatten102
    buf36 := solutionMapBuffer
    flatten103 := 0
    d31 := flatten103
    flatten104 := aloc(optGet1(aloc(optGet1(buf36), 0).ref.dim1), d31).ref.extent
    unknown51 := flatten104
    goto UNKNOWN36
    label UNKNOWN36
    flatten105 := unknown51
    solutionMapExtent0 := flatten105
    buf37 := solutionMapBuffer
    flatten106 := 0
    d32 := flatten106
    flatten107 := aloc(optGet1(aloc(optGet1(buf37), 0).ref.dim1), d32).ref.stride
    unknown52 := flatten107
    goto UNKNOWN37
    label UNKNOWN37
    flatten108 := unknown52
    solutionMapStride0 := flatten108
    buf38 := vResInBuffer
    flatten109 := aloc(optGet1(buf38), 0).ref.host2
    unknown53 := flatten109
    goto UNKNOWN38
    label UNKNOWN38
    flatten110 := unknown53
    vResIn := flatten110
    buf39 := vResInBuffer
    flatten111 := 0
    d33 := flatten111
    flatten112 := aloc(optGet1(aloc(optGet1(buf39), 0).ref.dim2), d33).ref.min
    unknown54 := flatten112
    goto UNKNOWN39
    label UNKNOWN39
    flatten113 := unknown54
    vResInMin0 := flatten113
    buf40 := vResInBuffer
    flatten114 := 0
    d34 := flatten114
    flatten115 := aloc(optGet1(aloc(optGet1(buf40), 0).ref.dim2), d34).ref.extent
    unknown55 := flatten115
    goto UNKNOWN40
    label UNKNOWN40
    flatten116 := unknown55
    vResInExtent0 := flatten116
    buf41 := vResInBuffer
    flatten117 := 0
    d35 := flatten117
    flatten118 := aloc(optGet1(aloc(optGet1(buf41), 0).ref.dim2), d35).ref.stride
    unknown56 := flatten118
    goto UNKNOWN41
    label UNKNOWN41
    flatten119 := unknown56
    vResInStride0 := flatten119
    buf42 := vResInBuffer
    flatten120 := 1
    d36 := flatten120
    flatten121 := aloc(optGet1(aloc(optGet1(buf42), 0).ref.dim2), d36).ref.min
    unknown57 := flatten121
    goto UNKNOWN42
    label UNKNOWN42
    flatten122 := unknown57
    vResInMin1 := flatten122
    buf43 := vResInBuffer
    flatten123 := 1
    d37 := flatten123
    flatten124 := aloc(optGet1(aloc(optGet1(buf43), 0).ref.dim2), d37).ref.extent
    unknown58 := flatten124
    goto UNKNOWN43
    label UNKNOWN43
    flatten125 := unknown58
    vResInExtent1 := flatten125
    buf44 := vResInBuffer
    flatten126 := 1
    d38 := flatten126
    flatten127 := aloc(optGet1(aloc(optGet1(buf44), 0).ref.dim2), d38).ref.stride
    unknown59 := flatten127
    goto UNKNOWN44
    label UNKNOWN44
    flatten128 := unknown59
    vResInStride1 := flatten128
    buf45 := vResInBuffer
    flatten129 := 2
    d39 := flatten129
    flatten130 := aloc(optGet1(aloc(optGet1(buf45), 0).ref.dim2), d39).ref.min
    unknown60 := flatten130
    goto UNKNOWN45
    label UNKNOWN45
    flatten131 := unknown60
    vResInMin2 := flatten131
    buf46 := vResInBuffer
    flatten132 := 2
    d40 := flatten132
    flatten133 := aloc(optGet1(aloc(optGet1(buf46), 0).ref.dim2), d40).ref.extent
    unknown61 := flatten133
    goto UNKNOWN46
    label UNKNOWN46
    flatten134 := unknown61
    vResInExtent2 := flatten134
    buf47 := vResInBuffer
    flatten135 := 2
    d41 := flatten135
    flatten136 := aloc(optGet1(aloc(optGet1(buf47), 0).ref.dim2), d41).ref.stride
    unknown62 := flatten136
    goto UNKNOWN47
    label UNKNOWN47
    flatten137 := unknown62
    vResInStride2 := flatten137
    buf48 := vResInBuffer
    flatten138 := 3
    d42 := flatten138
    flatten139 := aloc(optGet1(aloc(optGet1(buf48), 0).ref.dim2), d42).ref.min
    unknown63 := flatten139
    goto UNKNOWN48
    label UNKNOWN48
    flatten140 := unknown63
    vResInMin3 := flatten140
    buf49 := vResInBuffer
    flatten141 := 3
    d43 := flatten141
    flatten142 := aloc(optGet1(aloc(optGet1(buf49), 0).ref.dim2), d43).ref.extent
    unknown64 := flatten142
    goto UNKNOWN49
    label UNKNOWN49
    flatten143 := unknown64
    vResInExtent3 := flatten143
    buf50 := vResInBuffer
    flatten144 := 3
    d44 := flatten144
    flatten145 := aloc(optGet1(aloc(optGet1(buf50), 0).ref.dim2), d44).ref.stride
    unknown65 := flatten145
    goto UNKNOWN50
    label UNKNOWN50
    flatten146 := unknown65
    vResInStride3 := flatten146
    buf51 := vResOutBuffer
    flatten147 := aloc(optGet1(buf51), 0).ref.host2
    unknown66 := flatten147
    goto UNKNOWN51
    label UNKNOWN51
    flatten148 := unknown66
    vResOut := flatten148
    buf52 := vResOutBuffer
    flatten149 := 0
    d45 := flatten149
    flatten150 := aloc(optGet1(aloc(optGet1(buf52), 0).ref.dim2), d45).ref.min
    unknown67 := flatten150
    goto UNKNOWN52
    label UNKNOWN52
    flatten151 := unknown67
    vResOutMin0 := flatten151
    buf53 := vResOutBuffer
    flatten152 := 0
    d46 := flatten152
    flatten153 := aloc(optGet1(aloc(optGet1(buf53), 0).ref.dim2), d46).ref.extent
    unknown68 := flatten153
    goto UNKNOWN53
    label UNKNOWN53
    flatten154 := unknown68
    vResOutExtent0 := flatten154
    buf54 := vResOutBuffer
    flatten155 := 0
    d47 := flatten155
    flatten156 := aloc(optGet1(aloc(optGet1(buf54), 0).ref.dim2), d47).ref.stride
    unknown69 := flatten156
    goto UNKNOWN54
    label UNKNOWN54
    flatten157 := unknown69
    vResOutStride0 := flatten157
    buf55 := vResOutBuffer
    flatten158 := 1
    d48 := flatten158
    flatten159 := aloc(optGet1(aloc(optGet1(buf55), 0).ref.dim2), d48).ref.min
    unknown70 := flatten159
    goto UNKNOWN55
    label UNKNOWN55
    flatten160 := unknown70
    vResOutMin1 := flatten160
    buf56 := vResOutBuffer
    flatten161 := 1
    d49 := flatten161
    flatten162 := aloc(optGet1(aloc(optGet1(buf56), 0).ref.dim2), d49).ref.extent
    unknown71 := flatten162
    goto UNKNOWN56
    label UNKNOWN56
    flatten163 := unknown71
    vResOutExtent1 := flatten163
    buf57 := vResOutBuffer
    flatten164 := 1
    d50 := flatten164
    flatten165 := aloc(optGet1(aloc(optGet1(buf57), 0).ref.dim2), d50).ref.stride
    unknown72 := flatten165
    goto UNKNOWN57
    label UNKNOWN57
    flatten166 := unknown72
    vResOutStride1 := flatten166
    buf58 := vResOutBuffer
    flatten167 := 2
    d51 := flatten167
    flatten168 := aloc(optGet1(aloc(optGet1(buf58), 0).ref.dim2), d51).ref.min
    unknown73 := flatten168
    goto UNKNOWN58
    label UNKNOWN58
    flatten169 := unknown73
    vResOutMin2 := flatten169
    buf59 := vResOutBuffer
    flatten170 := 2
    d52 := flatten170
    flatten171 := aloc(optGet1(aloc(optGet1(buf59), 0).ref.dim2), d52).ref.extent
    unknown74 := flatten171
    goto UNKNOWN59
    label UNKNOWN59
    flatten172 := unknown74
    vResOutExtent2 := flatten172
    buf60 := vResOutBuffer
    flatten173 := 2
    d53 := flatten173
    flatten174 := aloc(optGet1(aloc(optGet1(buf60), 0).ref.dim2), d53).ref.stride
    unknown75 := flatten174
    goto UNKNOWN60
    label UNKNOWN60
    flatten175 := unknown75
    vResOutStride2 := flatten175
    buf61 := vResOutBuffer
    flatten176 := 3
    d54 := flatten176
    flatten177 := aloc(optGet1(aloc(optGet1(buf61), 0).ref.dim2), d54).ref.min
    unknown76 := flatten177
    goto UNKNOWN61
    label UNKNOWN61
    flatten178 := unknown76
    vResOutMin3 := flatten178
    buf62 := vResOutBuffer
    flatten179 := 3
    d55 := flatten179
    flatten180 := aloc(optGet1(aloc(optGet1(buf62), 0).ref.dim2), d55).ref.extent
    unknown77 := flatten180
    goto UNKNOWN62
    label UNKNOWN62
    flatten181 := unknown77
    vResOutExtent3 := flatten181
    buf63 := vResOutBuffer
    flatten182 := 3
    d56 := flatten182
    flatten183 := aloc(optGet1(aloc(optGet1(buf63), 0).ref.dim2), d56).ref.stride
    unknown78 := flatten183
    goto UNKNOWN63
    label UNKNOWN63
    flatten184 := unknown78
    vResOutStride3 := flatten184
    tid1 := tid
    flatten185 := ant1Stride0 == 1
    e := flatten185
    label UNKNOWN64
    tid2 := tid
    flatten186 := ant1Min0 == 0
    e1 := flatten186
    label UNKNOWN65
    tid3 := tid
    flatten187 := ant1Extent0 == nVis
    e2 := flatten187
    label UNKNOWN66
    tid4 := tid
    flatten188 := ant2Stride0 == 1
    e3 := flatten188
    label UNKNOWN67
    tid5 := tid
    flatten189 := ant2Min0 == 0
    e4 := flatten189
    label UNKNOWN68
    tid6 := tid
    flatten190 := ant2Extent0 == nVis
    e5 := flatten190
    label UNKNOWN69
    tid7 := tid
    flatten191 := modelStride0 == 1
    e6 := flatten191
    label UNKNOWN70
    tid8 := tid
    flatten192 := modelMin0 == 0
    e7 := flatten192
    label UNKNOWN71
    tid9 := tid
    flatten193 := modelExtent0 == 2
    e8 := flatten193
    label UNKNOWN72
    tid10 := tid
    flatten194 := modelStride1 == 2
    e9 := flatten194
    label UNKNOWN73
    tid11 := tid
    flatten195 := modelMin1 == 0
    e10 := flatten195
    label UNKNOWN74
    tid12 := tid
    flatten196 := modelExtent1 == 2
    e11 := flatten196
    label UNKNOWN75
    tid13 := tid
    flatten197 := modelStride2 == 4
    e12 := flatten197
    label UNKNOWN76
    tid14 := tid
    flatten198 := modelMin2 == 0
    e13 := flatten198
    label UNKNOWN77
    tid15 := tid
    flatten199 := modelExtent2 == 2
    e14 := flatten199
    label UNKNOWN78
    tid16 := tid
    flatten200 := modelStride3 == 8
    e15 := flatten200
    label UNKNOWN79
    tid17 := tid
    flatten201 := modelMin3 == 0
    e16 := flatten201
    label UNKNOWN80
    tid18 := tid
    flatten202 := modelExtent3 == nVis
    e17 := flatten202
    label UNKNOWN81
    tid19 := tid
    flatten203 := solStride0 == 1
    e18 := flatten203
    label UNKNOWN82
    tid20 := tid
    flatten204 := solMin0 == 0
    e19 := flatten204
    label UNKNOWN83
    tid21 := tid
    flatten205 := solExtent0 == 2
    e20 := flatten205
    label UNKNOWN84
    tid22 := tid
    flatten206 := solStride1 == 2
    e21 := flatten206
    label UNKNOWN85
    tid23 := tid
    flatten207 := solMin1 == 0
    e22 := flatten207
    label UNKNOWN86
    tid24 := tid
    flatten208 := solExtent1 == 2
    e23 := flatten208
    label UNKNOWN87
    tid25 := tid
    flatten209 := solStride2 == 4
    e24 := flatten209
    label UNKNOWN88
    tid26 := tid
    flatten210 := solMin2 == 0
    e25 := flatten210
    label UNKNOWN89
    tid27 := tid
    flatten211 := solExtent2 == nSolutions
    e26 := flatten211
    label UNKNOWN90
    tid28 := tid
    flatten212 := solStride3 == nSolutions * 4
    e27 := flatten212
    label UNKNOWN91
    tid29 := tid
    flatten213 := solMin3 == 0
    e28 := flatten213
    label UNKNOWN92
    tid30 := tid
    flatten214 := solExtent3 == nAntennas
    e29 := flatten214
    label UNKNOWN93
    tid31 := tid
    flatten215 := solutionMapStride0 == 1
    e30 := flatten215
    label UNKNOWN94
    tid32 := tid
    flatten216 := solutionMapMin0 == 0
    e31 := flatten216
    label UNKNOWN95
    tid33 := tid
    flatten217 := solutionMapExtent0 == nVis
    e32 := flatten217
    label UNKNOWN96
    tid34 := tid
    flatten218 := vResInStride0 == 1
    e33 := flatten218
    label UNKNOWN97
    tid35 := tid
    flatten219 := vResInMin0 == 0
    e34 := flatten219
    label UNKNOWN98
    tid36 := tid
    flatten220 := vResInExtent0 == 2
    e35 := flatten220
    label UNKNOWN99
    tid37 := tid
    flatten221 := vResInStride1 == 2
    e36 := flatten221
    label UNKNOWN100
    tid38 := tid
    flatten222 := vResInMin1 == 0
    e37 := flatten222
    label UNKNOWN101
    tid39 := tid
    flatten223 := vResInExtent1 == 2
    e38 := flatten223
    label UNKNOWN102
    tid40 := tid
    flatten224 := vResInStride2 == 4
    e39 := flatten224
    label UNKNOWN103
    tid41 := tid
    flatten225 := vResInMin2 == 0
    e40 := flatten225
    label UNKNOWN104
    tid42 := tid
    flatten226 := vResInExtent2 == 2
    e41 := flatten226
    label UNKNOWN105
    tid43 := tid
    flatten227 := vResInStride3 == 8
    e42 := flatten227
    label UNKNOWN106
    tid44 := tid
    flatten228 := vResInMin3 == 0
    e43 := flatten228
    label UNKNOWN107
    tid45 := tid
    flatten229 := vResInExtent3 == nVis
    e44 := flatten229
    label UNKNOWN108
    tid46 := tid
    flatten230 := vResOutStride0 == 1
    e45 := flatten230
    label UNKNOWN109
    tid47 := tid
    flatten231 := vResOutMin0 == 0
    e46 := flatten231
    label UNKNOWN110
    tid48 := tid
    flatten232 := vResOutExtent0 == 2
    e47 := flatten232
    label UNKNOWN111
    tid49 := tid
    flatten233 := vResOutStride1 == 2
    e48 := flatten233
    label UNKNOWN112
    tid50 := tid
    flatten234 := vResOutMin1 == 0
    e49 := flatten234
    label UNKNOWN113
    tid51 := tid
    flatten235 := vResOutExtent1 == 2
    e50 := flatten235
    label UNKNOWN114
    tid52 := tid
    flatten236 := vResOutStride2 == 4
    e51 := flatten236
    label UNKNOWN115
    tid53 := tid
    flatten237 := vResOutMin2 == 0
    e52 := flatten237
    label UNKNOWN116
    tid54 := tid
    flatten238 := vResOutExtent2 == 2
    e53 := flatten238
    label UNKNOWN117
    tid55 := tid
    flatten239 := vResOutStride3 == 8
    e54 := flatten239
    label UNKNOWN118
    tid56 := tid
    flatten240 := vResOutMin3 == 0
    e55 := flatten240
    label UNKNOWN119
    tid57 := tid
    flatten241 := vResOutExtent3 == nVis
    e56 := flatten241
    label UNKNOWN120
    label LOOP
    excbeforeloop := exc
    flatten242 := 0
    vResOutS0Vis := flatten242
    while (vResOutS0Vis < nVis)
      invariant exc == excbeforeloop
      invariant 0 <= solutionIndex0
      invariant 0 <= nDirSol
      invariant solutionIndex0 + nDirSol <= nSolutions
      invariant (forall _0: Int ::
          { pureSolutionMap(_0) }
          0 <= _0 && _0 < nVis ==> solutionIndex0 <= pureSolutionMap(_0))
      invariant (forall _0: Int ::
          { pureSolutionMap(_0) }
          0 <= _0 && _0 < nVis ==>
          pureSolutionMap(_0) < solutionIndex0 + nDirSol)
      invariant (forall _0: Int ::
          { pureAnt1(_0) }
          0 <= _0 && _0 < nVis ==> 0 <= pureAnt1(_0))
      invariant (forall _0: Int ::
          { pureAnt1(_0) }
          0 <= _0 && _0 < nVis ==> pureAnt1(_0) < nAntennas)
      invariant (forall _0: Int ::
          { pureAnt2(_0) }
          0 <= _0 && _0 < nVis ==> 0 <= pureAnt2(_0))
      invariant (forall _0: Int ::
          { pureAnt2(_0) }
          0 <= _0 && _0 < nVis ==> pureAnt2(_0) < nAntennas)
      invariant 0 <= vResOutS0Vis
      invariant vResOutS0Vis < nVis + 1
      invariant (forall preferred_arrayseq___0__: Int ::
          { aloc(optGet1(ant1), preferred_arrayseq___0__).int }
          0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
          acc(aloc(optGet1(ant1), preferred_arrayseq___0__).int, 1 * write /
          2))
      invariant (forall preferred_arrayseq___0__: Int ::
          { aloc(optGet1(ant1), preferred_arrayseq___0__).int }
          0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
          aloc(optGet1(ant1), preferred_arrayseq___0__).int ==
          pureAnt1(preferred_arrayseq___0__))
      invariant (forall preferred_arrayseq___0__: Int ::
          { aloc(optGet1(ant2), preferred_arrayseq___0__).int }
          0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
          acc(aloc(optGet1(ant2), preferred_arrayseq___0__).int, 1 * write /
          2))
      invariant (forall preferred_arrayseq___0__: Int ::
          { aloc(optGet1(ant2), preferred_arrayseq___0__).int }
          0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
          aloc(optGet1(ant2), preferred_arrayseq___0__).int ==
          pureAnt2(preferred_arrayseq___0__))
      invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
          { aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
          0 <=
          preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
          preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
          2 * 2 * 2 * nVis ==>
          acc(aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
          write /
          2))
      invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
          { aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
          0 <=
          preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
          preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
          2 * 2 * 2 * nVis ==>
          aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
          pureModel(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
      invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
          { aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
          0 <=
          preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
          preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
          2 * 2 * nSolutions * nAntennas ==>
          acc(aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
          write /
          2))
      invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
          { aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
          0 <=
          preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
          preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
          2 * 2 * nSolutions * nAntennas ==>
          aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
          pureSol(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
      invariant (forall preferred_arrayseq___0__: Int ::
          { aloc(optGet1(solutionMap), preferred_arrayseq___0__).int }
          0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
          acc(aloc(optGet1(solutionMap), preferred_arrayseq___0__).int, 1 *
          write /
          2))
      invariant (forall preferred_arrayseq___0__: Int ::
          { aloc(optGet1(solutionMap), preferred_arrayseq___0__).int }
          0 <= preferred_arrayseq___0__ && preferred_arrayseq___0__ < nVis ==>
          aloc(optGet1(solutionMap), preferred_arrayseq___0__).int ==
          pureSolutionMap(preferred_arrayseq___0__))
      invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
          { aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
          0 <=
          preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
          preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
          2 * 2 * 2 * nVis ==>
          acc(aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
          write /
          2))
      invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
          { aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
          0 <=
          preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
          preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
          2 * 2 * 2 * nVis ==>
          aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
          pureVResIn(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
      invariant (forall preferred_arrayseq_v__res__out__s__0__c__forall___preferred_arrayseq_v__res__out__s__0__i__forall___preferred_arrayseq_v__res__out__s__0__j__forall___preferred_arrayseq_v__res__out__s__0__vis__forall__: Int ::
          { aloc(optGet1(vResOut), preferred_arrayseq_v__res__out__s__0__c__forall___preferred_arrayseq_v__res__out__s__0__i__forall___preferred_arrayseq_v__res__out__s__0__j__forall___preferred_arrayseq_v__res__out__s__0__vis__forall__).rat }
          0 <=
          preferred_arrayseq_v__res__out__s__0__c__forall___preferred_arrayseq_v__res__out__s__0__i__forall___preferred_arrayseq_v__res__out__s__0__j__forall___preferred_arrayseq_v__res__out__s__0__vis__forall__ &&
          preferred_arrayseq_v__res__out__s__0__c__forall___preferred_arrayseq_v__res__out__s__0__i__forall___preferred_arrayseq_v__res__out__s__0__j__forall___preferred_arrayseq_v__res__out__s__0__vis__forall__ <
          2 * 2 * 2 * nVis ==>
          acc(aloc(optGet1(vResOut), preferred_arrayseq_v__res__out__s__0__c__forall___preferred_arrayseq_v__res__out__s__0__i__forall___preferred_arrayseq_v__res__out__s__0__j__forall___preferred_arrayseq_v__res__out__s__0__vis__forall__).rat, 1 *
          write)) 
    {
      label LOOP1
      excbeforeloop1 := exc
      flatten244 := 0
      vResOutS0J := flatten244
      while (vResOutS0J < 2)
        invariant exc == excbeforeloop1
        invariant 0 <= solutionIndex0
        invariant 0 <= nDirSol
        invariant solutionIndex0 + nDirSol <= nSolutions
        invariant (forall _0: Int ::
            { pureSolutionMap(_0) }
            0 <= _0 && _0 < nVis ==> solutionIndex0 <= pureSolutionMap(_0))
        invariant (forall _0: Int ::
            { pureSolutionMap(_0) }
            0 <= _0 && _0 < nVis ==>
            pureSolutionMap(_0) < solutionIndex0 + nDirSol)
        invariant (forall _0: Int ::
            { pureAnt1(_0) }
            0 <= _0 && _0 < nVis ==> 0 <= pureAnt1(_0))
        invariant (forall _0: Int ::
            { pureAnt1(_0) }
            0 <= _0 && _0 < nVis ==> pureAnt1(_0) < nAntennas)
        invariant (forall _0: Int ::
            { pureAnt2(_0) }
            0 <= _0 && _0 < nVis ==> 0 <= pureAnt2(_0))
        invariant (forall _0: Int ::
            { pureAnt2(_0) }
            0 <= _0 && _0 < nVis ==> pureAnt2(_0) < nAntennas)
        invariant 0 <= vResOutS0J
        invariant vResOutS0J < 2 + 1
        invariant (forall preferred_arrayseq___0__: Int ::
            { aloc(optGet1(ant1), preferred_arrayseq___0__).int }
            0 <= preferred_arrayseq___0__ &&
            preferred_arrayseq___0__ < nVis ==>
            acc(aloc(optGet1(ant1), preferred_arrayseq___0__).int, 1 *
            write /
            2))
        invariant (forall preferred_arrayseq___0__: Int ::
            { aloc(optGet1(ant1), preferred_arrayseq___0__).int }
            0 <= preferred_arrayseq___0__ &&
            preferred_arrayseq___0__ < nVis ==>
            aloc(optGet1(ant1), preferred_arrayseq___0__).int ==
            pureAnt1(preferred_arrayseq___0__))
        invariant (forall preferred_arrayseq___0__: Int ::
            { aloc(optGet1(ant2), preferred_arrayseq___0__).int }
            0 <= preferred_arrayseq___0__ &&
            preferred_arrayseq___0__ < nVis ==>
            acc(aloc(optGet1(ant2), preferred_arrayseq___0__).int, 1 *
            write /
            2))
        invariant (forall preferred_arrayseq___0__: Int ::
            { aloc(optGet1(ant2), preferred_arrayseq___0__).int }
            0 <= preferred_arrayseq___0__ &&
            preferred_arrayseq___0__ < nVis ==>
            aloc(optGet1(ant2), preferred_arrayseq___0__).int ==
            pureAnt2(preferred_arrayseq___0__))
        invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
            { aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
            0 <=
            preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
            preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
            2 * 2 * 2 * nVis ==>
            acc(aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
            write /
            2))
        invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
            { aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
            0 <=
            preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
            preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
            2 * 2 * 2 * nVis ==>
            aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
            pureModel(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
        invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
            { aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
            0 <=
            preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
            preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
            2 * 2 * nSolutions * nAntennas ==>
            acc(aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
            write /
            2))
        invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
            { aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
            0 <=
            preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
            preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
            2 * 2 * nSolutions * nAntennas ==>
            aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
            pureSol(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
        invariant (forall preferred_arrayseq___0__: Int ::
            { aloc(optGet1(solutionMap), preferred_arrayseq___0__).int }
            0 <= preferred_arrayseq___0__ &&
            preferred_arrayseq___0__ < nVis ==>
            acc(aloc(optGet1(solutionMap), preferred_arrayseq___0__).int, 1 *
            write /
            2))
        invariant (forall preferred_arrayseq___0__: Int ::
            { aloc(optGet1(solutionMap), preferred_arrayseq___0__).int }
            0 <= preferred_arrayseq___0__ &&
            preferred_arrayseq___0__ < nVis ==>
            aloc(optGet1(solutionMap), preferred_arrayseq___0__).int ==
            pureSolutionMap(preferred_arrayseq___0__))
        invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
            { aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
            0 <=
            preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
            preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
            2 * 2 * 2 * nVis ==>
            acc(aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
            write /
            2))
        invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
            { aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
            0 <=
            preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
            preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
            2 * 2 * 2 * nVis ==>
            aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
            pureVResIn(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
        invariant (forall preferred_arrayseq_v__res__out__s__0__c__forall___preferred_arrayseq_v__res__out__s__0__i__forall___preferred_arrayseq_v__res__out__s__0__j__forall__: Int ::
            { aloc(optGet1(vResOut), preferred_arrayseq_v__res__out__s__0__c__forall___preferred_arrayseq_v__res__out__s__0__i__forall___preferred_arrayseq_v__res__out__s__0__j__forall__).rat }
            0 <=
            preferred_arrayseq_v__res__out__s__0__c__forall___preferred_arrayseq_v__res__out__s__0__i__forall___preferred_arrayseq_v__res__out__s__0__j__forall__ -
            vResOutS0Vis * 8 &&
            preferred_arrayseq_v__res__out__s__0__c__forall___preferred_arrayseq_v__res__out__s__0__i__forall___preferred_arrayseq_v__res__out__s__0__j__forall__ -
            vResOutS0Vis * 8 <
            2 * 2 * 2 ==>
            acc(aloc(optGet1(vResOut), preferred_arrayseq_v__res__out__s__0__c__forall___preferred_arrayseq_v__res__out__s__0__i__forall___preferred_arrayseq_v__res__out__s__0__j__forall__).rat, 1 *
            write)) 
      {
        flatten246 := vResOutS0J == 1
        t5755 := flatten246
        flatten247 := vResOutS0J == 0
        t5753 := flatten247
        flatten248 := (vResOutS0Vis * 2 + vResOutS0J) * 4
        t5756 := flatten248
        label LOOP2
        excbeforeloop2 := exc
        flatten249 := 0
        vResOutS0I := flatten249
        while (vResOutS0I < 2)
          invariant exc == excbeforeloop2
          invariant 0 <= solutionIndex0
          invariant 0 <= nDirSol
          invariant solutionIndex0 + nDirSol <= nSolutions
          invariant (forall _0: Int ::
              { pureSolutionMap(_0) }
              0 <= _0 && _0 < nVis ==>
              solutionIndex0 <= pureSolutionMap(_0))
          invariant (forall _0: Int ::
              { pureSolutionMap(_0) }
              0 <= _0 && _0 < nVis ==>
              pureSolutionMap(_0) < solutionIndex0 + nDirSol)
          invariant (forall _0: Int ::
              { pureAnt1(_0) }
              0 <= _0 && _0 < nVis ==> 0 <= pureAnt1(_0))
          invariant (forall _0: Int ::
              { pureAnt1(_0) }
              0 <= _0 && _0 < nVis ==> pureAnt1(_0) < nAntennas)
          invariant (forall _0: Int ::
              { pureAnt2(_0) }
              0 <= _0 && _0 < nVis ==> 0 <= pureAnt2(_0))
          invariant (forall _0: Int ::
              { pureAnt2(_0) }
              0 <= _0 && _0 < nVis ==> pureAnt2(_0) < nAntennas)
          invariant 0 <= vResOutS0I
          invariant vResOutS0I < 2 + 1
          invariant (forall preferred_arrayseq___0__: Int ::
              { aloc(optGet1(ant1), preferred_arrayseq___0__).int }
              0 <= preferred_arrayseq___0__ &&
              preferred_arrayseq___0__ < nVis ==>
              acc(aloc(optGet1(ant1), preferred_arrayseq___0__).int, 1 *
              write /
              2))
          invariant (forall preferred_arrayseq___0__: Int ::
              { aloc(optGet1(ant1), preferred_arrayseq___0__).int }
              0 <= preferred_arrayseq___0__ &&
              preferred_arrayseq___0__ < nVis ==>
              aloc(optGet1(ant1), preferred_arrayseq___0__).int ==
              pureAnt1(preferred_arrayseq___0__))
          invariant (forall preferred_arrayseq___0__: Int ::
              { aloc(optGet1(ant2), preferred_arrayseq___0__).int }
              0 <= preferred_arrayseq___0__ &&
              preferred_arrayseq___0__ < nVis ==>
              acc(aloc(optGet1(ant2), preferred_arrayseq___0__).int, 1 *
              write /
              2))
          invariant (forall preferred_arrayseq___0__: Int ::
              { aloc(optGet1(ant2), preferred_arrayseq___0__).int }
              0 <= preferred_arrayseq___0__ &&
              preferred_arrayseq___0__ < nVis ==>
              aloc(optGet1(ant2), preferred_arrayseq___0__).int ==
              pureAnt2(preferred_arrayseq___0__))
          invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
              { aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
              0 <=
              preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
              preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
              2 * 2 * 2 * nVis ==>
              acc(aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
              write /
              2))
          invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
              { aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
              0 <=
              preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
              preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
              2 * 2 * 2 * nVis ==>
              aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
              pureModel(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
          invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
              { aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
              0 <=
              preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
              preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
              2 * 2 * nSolutions * nAntennas ==>
              acc(aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
              write /
              2))
          invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
              { aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
              0 <=
              preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
              preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
              2 * 2 * nSolutions * nAntennas ==>
              aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
              pureSol(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
          invariant (forall preferred_arrayseq___0__: Int ::
              { aloc(optGet1(solutionMap), preferred_arrayseq___0__).int }
              0 <= preferred_arrayseq___0__ &&
              preferred_arrayseq___0__ < nVis ==>
              acc(aloc(optGet1(solutionMap), preferred_arrayseq___0__).int, 1 *
              write /
              2))
          invariant (forall preferred_arrayseq___0__: Int ::
              { aloc(optGet1(solutionMap), preferred_arrayseq___0__).int }
              0 <= preferred_arrayseq___0__ &&
              preferred_arrayseq___0__ < nVis ==>
              aloc(optGet1(solutionMap), preferred_arrayseq___0__).int ==
              pureSolutionMap(preferred_arrayseq___0__))
          invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
              { aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
              0 <=
              preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
              preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
              2 * 2 * 2 * nVis ==>
              acc(aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
              write /
              2))
          invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
              { aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
              0 <=
              preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
              preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
              2 * 2 * 2 * nVis ==>
              aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
              pureVResIn(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
          invariant (forall preferred_arrayseq_v__res__out__s__0__c__forall___preferred_arrayseq_v__res__out__s__0__i__forall__: Int ::
              { aloc(optGet1(vResOut), preferred_arrayseq_v__res__out__s__0__c__forall___preferred_arrayseq_v__res__out__s__0__i__forall__).rat }
              0 <=
              preferred_arrayseq_v__res__out__s__0__c__forall___preferred_arrayseq_v__res__out__s__0__i__forall__ -
              (vResOutS0J * 4 + vResOutS0Vis * 8) &&
              preferred_arrayseq_v__res__out__s__0__c__forall___preferred_arrayseq_v__res__out__s__0__i__forall__ -
              (vResOutS0J * 4 + vResOutS0Vis * 8) <
              2 * 2 ==>
              acc(aloc(optGet1(vResOut), preferred_arrayseq_v__res__out__s__0__c__forall___preferred_arrayseq_v__res__out__s__0__i__forall__).rat, 1 *
              write)) 
        {
          flatten251 := vResOutS0I == 1
          t5759 := flatten251
          flatten252 := vResOutS0I == 0
          t5757 := flatten252
          flatten253 := vResOutS0I * 2 + t5756
          t5760 := flatten253
          label LOOP3
          excbeforeloop3 := exc
          flatten254 := 0
          vResOutS0C := flatten254
          while (vResOutS0C < 2)
            invariant exc == excbeforeloop3
            invariant 0 <= solutionIndex0
            invariant 0 <= nDirSol
            invariant solutionIndex0 + nDirSol <= nSolutions
            invariant (forall _0: Int ::
                { pureSolutionMap(_0) }
                0 <= _0 && _0 < nVis ==>
                solutionIndex0 <= pureSolutionMap(_0))
            invariant (forall _0: Int ::
                { pureSolutionMap(_0) }
                0 <= _0 && _0 < nVis ==>
                pureSolutionMap(_0) < solutionIndex0 + nDirSol)
            invariant (forall _0: Int ::
                { pureAnt1(_0) }
                0 <= _0 && _0 < nVis ==> 0 <= pureAnt1(_0))
            invariant (forall _0: Int ::
                { pureAnt1(_0) }
                0 <= _0 && _0 < nVis ==> pureAnt1(_0) < nAntennas)
            invariant (forall _0: Int ::
                { pureAnt2(_0) }
                0 <= _0 && _0 < nVis ==> 0 <= pureAnt2(_0))
            invariant (forall _0: Int ::
                { pureAnt2(_0) }
                0 <= _0 && _0 < nVis ==> pureAnt2(_0) < nAntennas)
            invariant 0 <= vResOutS0C
            invariant vResOutS0C < 2 + 1
            invariant (forall preferred_arrayseq___0__: Int ::
                { aloc(optGet1(ant1), preferred_arrayseq___0__).int }
                0 <= preferred_arrayseq___0__ &&
                preferred_arrayseq___0__ < nVis ==>
                acc(aloc(optGet1(ant1), preferred_arrayseq___0__).int, 1 *
                write /
                2))
            invariant (forall preferred_arrayseq___0__: Int ::
                { aloc(optGet1(ant1), preferred_arrayseq___0__).int }
                0 <= preferred_arrayseq___0__ &&
                preferred_arrayseq___0__ < nVis ==>
                aloc(optGet1(ant1), preferred_arrayseq___0__).int ==
                pureAnt1(preferred_arrayseq___0__))
            invariant (forall preferred_arrayseq___0__: Int ::
                { aloc(optGet1(ant2), preferred_arrayseq___0__).int }
                0 <= preferred_arrayseq___0__ &&
                preferred_arrayseq___0__ < nVis ==>
                acc(aloc(optGet1(ant2), preferred_arrayseq___0__).int, 1 *
                write /
                2))
            invariant (forall preferred_arrayseq___0__: Int ::
                { aloc(optGet1(ant2), preferred_arrayseq___0__).int }
                0 <= preferred_arrayseq___0__ &&
                preferred_arrayseq___0__ < nVis ==>
                aloc(optGet1(ant2), preferred_arrayseq___0__).int ==
                pureAnt2(preferred_arrayseq___0__))
            invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
                { aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
                0 <=
                preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
                preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
                2 * 2 * 2 * nVis ==>
                acc(aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
                write /
                2))
            invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
                { aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
                0 <=
                preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
                preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
                2 * 2 * 2 * nVis ==>
                aloc(optGet1(model), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
                pureModel(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
            invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
                { aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
                0 <=
                preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
                preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
                2 * 2 * nSolutions * nAntennas ==>
                acc(aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
                write /
                2))
            invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
                { aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
                0 <=
                preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
                preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
                2 * 2 * nSolutions * nAntennas ==>
                aloc(optGet1(sol), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
                pureSol(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
            invariant (forall preferred_arrayseq___0__: Int ::
                { aloc(optGet1(solutionMap), preferred_arrayseq___0__).int }
                0 <= preferred_arrayseq___0__ &&
                preferred_arrayseq___0__ < nVis ==>
                acc(aloc(optGet1(solutionMap), preferred_arrayseq___0__).int, 1 *
                write /
                2))
            invariant (forall preferred_arrayseq___0__: Int ::
                { aloc(optGet1(solutionMap), preferred_arrayseq___0__).int }
                0 <= preferred_arrayseq___0__ &&
                preferred_arrayseq___0__ < nVis ==>
                aloc(optGet1(solutionMap), preferred_arrayseq___0__).int ==
                pureSolutionMap(preferred_arrayseq___0__))
            invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
                { aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
                0 <=
                preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
                preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
                2 * 2 * 2 * nVis ==>
                acc(aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat, 1 *
                write /
                2))
            invariant (forall preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__: Int ::
                { aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat }
                0 <=
                preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ &&
                preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__ <
                2 * 2 * 2 * nVis ==>
                aloc(optGet1(vResIn), preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__).rat ==
                pureVResIn(preferred_arrayseq___0___preferred_arrayseq___1___preferred_arrayseq___2___preferred_arrayseq___3__))
            invariant (forall preferred_arrayseq_v__res__out__s__0__c__forall__: Int ::
                { aloc(optGet1(vResOut), preferred_arrayseq_v__res__out__s__0__c__forall__).rat }
                0 <=
                preferred_arrayseq_v__res__out__s__0__c__forall__ -
                (vResOutS0I * 2 + vResOutS0J * 4 + vResOutS0Vis * 8) &&
                preferred_arrayseq_v__res__out__s__0__c__forall__ -
                (vResOutS0I * 2 + vResOutS0J * 4 + vResOutS0Vis * 8) <
                2 ==>
                acc(aloc(optGet1(vResOut), preferred_arrayseq_v__res__out__s__0__c__forall__).rat, 1 *
                write)) 
          {
            flatten256 := vResOutS0C == 0
            t5714 := flatten256
            flatten257 := t5714 && t5757
            t5716 := flatten257
            flatten258 := aloc(optGet1(ant2), vResOutS0Vis).int
            _101 := flatten258
            flatten259 := solStride3 * _101
            t5718 := flatten259
            flatten260 := aloc(optGet1(solutionMap), vResOutS0Vis).int
            _102 := flatten260
            t5719 := _102
            res1 := lemma4dAccess(tid, 1, 0, _102, _101, 1, 2, 4, 4 *
              nSolutions, 2, 2, nSolutions, nAntennas)
            flatten261 := aloc(optGet1(sol), t5719 * 4 + t5718 + 1).rat
            _103 := flatten261
            t5721 := _103
            flatten262 := aloc(optGet1(ant1), vResOutS0Vis).int
            _104 := flatten262
            flatten263 := solStride3 * _104
            t5722 := flatten263
            res2 := lemma4dAccess(tid, 0, 0, _102, _104, 1, 2, 4, 4 *
              nSolutions, 2, 2, nSolutions, nAntennas)
            flatten264 := aloc(optGet1(sol), t5719 * 4 + t5722).rat
            _105 := flatten264
            t5723 := _105
            flatten265 := aloc(optGet1(model), vResOutS0Vis * 8 + 1).rat
            t5724 := flatten265
            flatten266 := aloc(optGet1(model), vResOutS0Vis * 8).rat
            t5725 := flatten266
            res3 := lemma4dAccess(tid, 1, 0, _102, _104, 1, 2, 4, 4 *
              nSolutions, 2, 2, nSolutions, nAntennas)
            flatten267 := aloc(optGet1(sol), t5719 * 4 + t5722 + 1).rat
            _106 := flatten267
            t5727 := _106
            flatten268 := t5723 * t5724 + t5725 * t5727
            t5728 := flatten268
            flatten269 := t5723 * t5725 - t5724 * t5727
            t5729 := flatten269
            res4 := lemma4dAccess(tid, 0, 0, _102, _101, 1, 2, 4, 4 *
              nSolutions, 2, 2, nSolutions, nAntennas)
            flatten270 := aloc(optGet1(sol), t5719 * 4 + t5718).rat
            _107 := flatten270
            t5730 := _107
            flatten271 := vResOutS0C == 1
            t5731 := flatten271
            flatten272 := t5731 && t5757
            t5732 := flatten272
            flatten273 := t5714 && t5759
            t5734 := flatten273
            res5 := lemma4dAccess(tid, 1, 1, _102, _101, 1, 2, 4, 4 *
              nSolutions, 2, 2, nSolutions, nAntennas)
            flatten274 := aloc(optGet1(sol), t5719 * 4 + t5718 + 3).rat
            _108 := flatten274
            t5735 := _108
            flatten275 := aloc(optGet1(model), vResOutS0Vis * 8 + 3).rat
            t5736 := flatten275
            flatten276 := aloc(optGet1(model), vResOutS0Vis * 8 + 2).rat
            t5737 := flatten276
            flatten277 := t5723 * t5736 + t5727 * t5737
            t5738 := flatten277
            flatten278 := t5723 * t5737 - t5727 * t5736
            t5739 := flatten278
            res6 := lemma4dAccess(tid, 0, 1, _102, _101, 1, 2, 4, 4 *
              nSolutions, 2, 2, nSolutions, nAntennas)
            flatten279 := aloc(optGet1(sol), t5719 * 4 + t5718 + 2).rat
            _109 := flatten279
            t5740 := _109
            res7 := lemma4dAccess(tid, 0, 1, _102, _104, 1, 2, 4, 4 *
              nSolutions, 2, 2, nSolutions, nAntennas)
            flatten280 := aloc(optGet1(sol), t5719 * 4 + t5722 + 2).rat
            _110 := flatten280
            t5742 := _110
            flatten281 := aloc(optGet1(model), vResOutS0Vis * 8 + 5).rat
            t5743 := flatten281
            flatten282 := aloc(optGet1(model), vResOutS0Vis * 8 + 4).rat
            t5744 := flatten282
            res8 := lemma4dAccess(tid, 1, 1, _102, _104, 1, 2, 4, 4 *
              nSolutions, 2, 2, nSolutions, nAntennas)
            flatten283 := aloc(optGet1(sol), t5719 * 4 + t5722 + 3).rat
            _111 := flatten283
            t5745 := _111
            flatten284 := t5742 * t5743 + t5744 * t5745
            t5746 := flatten284
            flatten285 := t5742 * t5744 - t5743 * t5745
            t5747 := flatten285
            flatten286 := aloc(optGet1(model), vResOutS0Vis * 8 + 7).rat
            t5748 := flatten286
            flatten287 := aloc(optGet1(model), vResOutS0Vis * 8 + 6).rat
            t5749 := flatten287
            flatten288 := t5742 * t5748 + t5745 * t5749
            t5750 := flatten288
            flatten289 := t5742 * t5749 - t5745 * t5748
            t5751 := flatten289
            flatten290 := t5760 + vResOutS0C
            flatten291 := (t5716 && t5753 ?
                aloc(optGet1(vResIn), vResOutS0Vis * 8).rat +
                ((0 * write / 1 - t5721) * t5728 - t5729 * t5730) :
                (t5732 && t5753 ?
                  aloc(optGet1(vResIn), vResOutS0Vis * 8 + 1).rat -
                  ((0 * write / 1 - t5721) * t5729 + t5728 * t5730) :
                  (t5734 && t5753 ?
                    aloc(optGet1(vResIn), vResOutS0Vis * 8 + 2).rat +
                    ((0 * write / 1 - t5735) * t5738 - t5739 * t5740) :
                    (t5731 && t5759 && t5753 ?
                      aloc(optGet1(vResIn), vResOutS0Vis * 8 + 3).rat -
                      ((0 * write / 1 - t5735) * t5739 + t5738 * t5740) :
                      (t5716 && t5755 ?
                        aloc(optGet1(vResIn), vResOutS0Vis * 8 + 4).rat +
                        ((0 * write / 1 - t5721) * t5746 - t5730 * t5747) :
                        (t5732 && t5755 ?
                          aloc(optGet1(vResIn), vResOutS0Vis * 8 + 5).rat -
                          ((0 * write / 1 - t5721) * t5747 + t5730 * t5746) :
                          (t5734 && t5755 ?
                            aloc(optGet1(vResIn), vResOutS0Vis * 8 + 6).rat +
                            ((0 * write / 1 - t5735) * t5750 -
                            t5740 * t5751) :
                            aloc(optGet1(vResIn), vResOutS0Vis * 8 + 7).rat -
                            ((0 * write / 1 - t5735) * t5751 +
                            t5740 * t5750))))))))
            aloc(optGet1(vResOut), flatten290).rat := flatten291
            flatten255 := vResOutS0C
            vResOutS0C := vResOutS0C + 1
          }
          flatten250 := vResOutS0I
          vResOutS0I := vResOutS0I + 1
        }
        flatten245 := vResOutS0J
        vResOutS0J := vResOutS0J + 1
      }
      flatten243 := vResOutS0Vis
      vResOutS0Vis := vResOutS0Vis + 1
    }
    flatten292 := 0
    return := flatten292
    goto END
    label END
    res := return
    label BUBBLE
    assert exc == null
  }
}